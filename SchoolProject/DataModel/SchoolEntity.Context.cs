//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SchoolProject.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class alhaqldbEntities : DbContext
    {
        public alhaqldbEntities()
            : base("name=alhaqldbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<course> courses { get; set; }
        public virtual DbSet<studyYear> studyYears { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<term> terms { get; set; }
        public virtual DbSet<Coding> Codings { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<PageCategory> PageCategories { get; set; }
        public virtual DbSet<PageOperaion> PageOperaions { get; set; }
        public virtual DbSet<PageOperationRole> PageOperationRoles { get; set; }
        public virtual DbSet<Page> Pages { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<studentdegree> studentdegrees { get; set; }
        public virtual DbSet<Plan> Plans { get; set; }
        public virtual DbSet<StudentAbsent> StudentAbsents { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<StudentLevel> StudentLevels { get; set; }
        public virtual DbSet<TermPlan> TermPlans { get; set; }
        public virtual DbSet<student> students { get; set; }
        public virtual DbSet<schoolData> schoolDatas { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<TypeTeatcher> TypeTeatchers { get; set; }
        public virtual DbSet<ProfilePermanence> ProfilePermanences { get; set; }
        public virtual DbSet<level> levels { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<LectureWeek> LectureWeeks { get; set; }
        public virtual DbSet<BasicStudentDataV> BasicStudentDataVs { get; set; }
        public virtual DbSet<LevelCourse> LevelCourses { get; set; }
        public virtual DbSet<TypeLevel> TypeLevels { get; set; }
        public virtual DbSet<GradeRank> GradeRanks { get; set; }
        public virtual DbSet<ExamPeriod> ExamPeriods { get; set; }
        public virtual DbSet<Period> Periods { get; set; }
        public virtual DbSet<RoomStudentInExam> RoomStudentInExams { get; set; }
        public virtual DbSet<TableExam> TableExams { get; set; }
        public virtual DbSet<TblNotify> TblNotifies { get; set; }
    
        public virtual ObjectResult<Nullable<int>> getMaxNumber(Nullable<int> levelid, string sgroup)
        {
            var levelidParameter = levelid.HasValue ?
                new ObjectParameter("levelid", levelid) :
                new ObjectParameter("levelid", typeof(int));
    
            var sgroupParameter = sgroup != null ?
                new ObjectParameter("sgroup", sgroup) :
                new ObjectParameter("sgroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getMaxNumber", levelidParameter, sgroupParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int upgradeApsentCourse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upgradeApsentCourse");
        }
    
        public virtual int upgradeDegreeForSuccessStudent(Nullable<double> degterm1, Nullable<double> degterm2, Nullable<double> conditionup)
        {
            var degterm1Parameter = degterm1.HasValue ?
                new ObjectParameter("degterm1", degterm1) :
                new ObjectParameter("degterm1", typeof(double));
    
            var degterm2Parameter = degterm2.HasValue ?
                new ObjectParameter("degterm2", degterm2) :
                new ObjectParameter("degterm2", typeof(double));
    
            var conditionupParameter = conditionup.HasValue ?
                new ObjectParameter("conditionup", conditionup) :
                new ObjectParameter("conditionup", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upgradeDegreeForSuccessStudent", degterm1Parameter, degterm2Parameter, conditionupParameter);
        }
    
        [DbFunction("alhaqldbEntities", "RoleAuthorizedOperations")]
        public virtual IQueryable<RoleAuthorizedOperations_Result> RoleAuthorizedOperations(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<RoleAuthorizedOperations_Result>("[alhaqldbEntities].[RoleAuthorizedOperations](@RoleID)", roleIDParameter);
        }
    
        public virtual ObjectResult<getStudentDataFinal_Result> getStudentDataFinal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStudentDataFinal_Result>("getStudentDataFinal");
        }
    
        public virtual int UpdateDegreeForStudentApsent(Nullable<int> std, Nullable<int> courseid, Nullable<int> levelid, Nullable<int> termid, Nullable<double> total, Nullable<int> yearid)
        {
            var stdParameter = std.HasValue ?
                new ObjectParameter("std", std) :
                new ObjectParameter("std", typeof(int));
    
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            var levelidParameter = levelid.HasValue ?
                new ObjectParameter("levelid", levelid) :
                new ObjectParameter("levelid", typeof(int));
    
            var termidParameter = termid.HasValue ?
                new ObjectParameter("termid", termid) :
                new ObjectParameter("termid", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(double));
    
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDegreeForStudentApsent", stdParameter, courseidParameter, levelidParameter, termidParameter, totalParameter, yearidParameter);
        }
    
        public virtual int DelCourseDifferLevel(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelCourseDifferLevel", yearParameter);
        }
    
        public virtual int UpgradeStudentForNextLevel(Nullable<int> yearid, Nullable<int> levelid)
        {
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            var levelidParameter = levelid.HasValue ?
                new ObjectParameter("levelid", levelid) :
                new ObjectParameter("levelid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpgradeStudentForNextLevel", yearidParameter, levelidParameter);
        }
    
        public virtual ObjectResult<GetCourseNewsLine_Result> GetCourseNewsLine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourseNewsLine_Result>("GetCourseNewsLine");
        }
    
        public virtual int AddCourseLevel(Nullable<int> newplan, Nullable<int> currentyear, Nullable<int> nextyear)
        {
            var newplanParameter = newplan.HasValue ?
                new ObjectParameter("newplan", newplan) :
                new ObjectParameter("newplan", typeof(int));
    
            var currentyearParameter = currentyear.HasValue ?
                new ObjectParameter("currentyear", currentyear) :
                new ObjectParameter("currentyear", typeof(int));
    
            var nextyearParameter = nextyear.HasValue ?
                new ObjectParameter("nextyear", nextyear) :
                new ObjectParameter("nextyear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCourseLevel", newplanParameter, currentyearParameter, nextyearParameter);
        }
    
        public virtual int AddCourseForStudent(Nullable<int> termid, Nullable<int> yearid, Nullable<int> planid)
        {
            var termidParameter = termid.HasValue ?
                new ObjectParameter("termid", termid) :
                new ObjectParameter("termid", typeof(int));
    
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            var planidParameter = planid.HasValue ?
                new ObjectParameter("planid", planid) :
                new ObjectParameter("planid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCourseForStudent", termidParameter, yearidParameter, planidParameter);
        }
    
        public virtual ObjectResult<getCourseWithLevel_Result> getCourseWithLevel(Nullable<int> yearID)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCourseWithLevel_Result>("getCourseWithLevel", yearIDParameter);
        }
    
        public virtual ObjectResult<getSchoolData_Result> getSchoolData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSchoolData_Result>("getSchoolData");
        }
    
        public virtual ObjectResult<GetStudentData_Result> GetStudentData(Nullable<int> yearID, Nullable<int> levelID)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentData_Result>("GetStudentData", yearIDParameter, levelIDParameter);
        }
    
        public virtual int MergeStudenToGroup(Nullable<int> groupID, Nullable<int> yearID, Nullable<int> levelID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeStudenToGroup", groupIDParameter, yearIDParameter, levelIDParameter);
        }
    
        [DbFunction("alhaqldbEntities", "GetAnalyticResultForStident")]
        public virtual IQueryable<GetAnalyticResultForStident_Result> GetAnalyticResultForStident(Nullable<int> yearID)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("yearID", yearID) :
                new ObjectParameter("yearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAnalyticResultForStident_Result>("[alhaqldbEntities].[GetAnalyticResultForStident](@yearID)", yearIDParameter);
        }
    
        [DbFunction("alhaqldbEntities", "GetStatisticalStudent")]
        public virtual IQueryable<GetStatisticalStudent_Result> GetStatisticalStudent(Nullable<int> yearID)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("yearID", yearID) :
                new ObjectParameter("yearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetStatisticalStudent_Result>("[alhaqldbEntities].[GetStatisticalStudent](@yearID)", yearIDParameter);
        }
    
        public virtual int AddEdit_student(Nullable<int> iD, Nullable<int> seqID, string sname, Nullable<int> levelid, string birthPlace, string lastName, string gender, string natianalityt, Nullable<int> yearid, string lvlState, string sgroup, Nullable<System.DateTime> bdate, byte[] stdImage, string village, string notes, Nullable<bool> isDelete, Nullable<System.DateTime> addDate, Nullable<System.DateTime> editDate, Nullable<System.DateTime> deletDate, Nullable<int> userAdd, Nullable<int> userEdit, Nullable<int> userDelete, Nullable<int> groupID, Nullable<bool> isLeave)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var seqIDParameter = seqID.HasValue ?
                new ObjectParameter("SeqID", seqID) :
                new ObjectParameter("SeqID", typeof(int));
    
            var snameParameter = sname != null ?
                new ObjectParameter("sname", sname) :
                new ObjectParameter("sname", typeof(string));
    
            var levelidParameter = levelid.HasValue ?
                new ObjectParameter("levelid", levelid) :
                new ObjectParameter("levelid", typeof(int));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var natianalitytParameter = natianalityt != null ?
                new ObjectParameter("natianalityt", natianalityt) :
                new ObjectParameter("natianalityt", typeof(string));
    
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            var lvlStateParameter = lvlState != null ?
                new ObjectParameter("lvlState", lvlState) :
                new ObjectParameter("lvlState", typeof(string));
    
            var sgroupParameter = sgroup != null ?
                new ObjectParameter("sgroup", sgroup) :
                new ObjectParameter("sgroup", typeof(string));
    
            var bdateParameter = bdate.HasValue ?
                new ObjectParameter("bdate", bdate) :
                new ObjectParameter("bdate", typeof(System.DateTime));
    
            var stdImageParameter = stdImage != null ?
                new ObjectParameter("stdImage", stdImage) :
                new ObjectParameter("stdImage", typeof(byte[]));
    
            var villageParameter = village != null ?
                new ObjectParameter("Village", village) :
                new ObjectParameter("Village", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            var addDateParameter = addDate.HasValue ?
                new ObjectParameter("AddDate", addDate) :
                new ObjectParameter("AddDate", typeof(System.DateTime));
    
            var editDateParameter = editDate.HasValue ?
                new ObjectParameter("EditDate", editDate) :
                new ObjectParameter("EditDate", typeof(System.DateTime));
    
            var deletDateParameter = deletDate.HasValue ?
                new ObjectParameter("DeletDate", deletDate) :
                new ObjectParameter("DeletDate", typeof(System.DateTime));
    
            var userAddParameter = userAdd.HasValue ?
                new ObjectParameter("UserAdd", userAdd) :
                new ObjectParameter("UserAdd", typeof(int));
    
            var userEditParameter = userEdit.HasValue ?
                new ObjectParameter("UserEdit", userEdit) :
                new ObjectParameter("UserEdit", typeof(int));
    
            var userDeleteParameter = userDelete.HasValue ?
                new ObjectParameter("UserDelete", userDelete) :
                new ObjectParameter("UserDelete", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var isLeaveParameter = isLeave.HasValue ?
                new ObjectParameter("IsLeave", isLeave) :
                new ObjectParameter("IsLeave", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEdit_student", iDParameter, seqIDParameter, snameParameter, levelidParameter, birthPlaceParameter, lastNameParameter, genderParameter, natianalitytParameter, yearidParameter, lvlStateParameter, sgroupParameter, bdateParameter, stdImageParameter, villageParameter, notesParameter, isDeleteParameter, addDateParameter, editDateParameter, deletDateParameter, userAddParameter, userEditParameter, userDeleteParameter, groupIDParameter, isLeaveParameter);
        }
    
        public virtual ObjectResult<GetStudentThatNoAddToDegree_Result> GetStudentThatNoAddToDegree(Nullable<int> yearID)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentThatNoAddToDegree_Result>("GetStudentThatNoAddToDegree", yearIDParameter);
        }
    
        public virtual int AddStudentToLevels(Nullable<int> sid, Nullable<int> yearid, Nullable<int> levelid, string lvlStatus, Nullable<bool> active, string sgroup, Nullable<int> groupID)
        {
            var sidParameter = sid.HasValue ?
                new ObjectParameter("sid", sid) :
                new ObjectParameter("sid", typeof(int));
    
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            var levelidParameter = levelid.HasValue ?
                new ObjectParameter("levelid", levelid) :
                new ObjectParameter("levelid", typeof(int));
    
            var lvlStatusParameter = lvlStatus != null ?
                new ObjectParameter("lvlStatus", lvlStatus) :
                new ObjectParameter("lvlStatus", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var sgroupParameter = sgroup != null ?
                new ObjectParameter("sgroup", sgroup) :
                new ObjectParameter("sgroup", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStudentToLevels", sidParameter, yearidParameter, levelidParameter, lvlStatusParameter, activeParameter, sgroupParameter, groupIDParameter);
        }
    
        public virtual int Edit_studentlevels(Nullable<int> sid, Nullable<int> yearid, Nullable<int> levelid, string lvlStatus, Nullable<bool> active, string sgroup, Nullable<int> groupID)
        {
            var sidParameter = sid.HasValue ?
                new ObjectParameter("sid", sid) :
                new ObjectParameter("sid", typeof(int));
    
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            var levelidParameter = levelid.HasValue ?
                new ObjectParameter("levelid", levelid) :
                new ObjectParameter("levelid", typeof(int));
    
            var lvlStatusParameter = lvlStatus != null ?
                new ObjectParameter("lvlStatus", lvlStatus) :
                new ObjectParameter("lvlStatus", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var sgroupParameter = sgroup != null ?
                new ObjectParameter("sgroup", sgroup) :
                new ObjectParameter("sgroup", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Edit_studentlevels", sidParameter, yearidParameter, levelidParameter, lvlStatusParameter, activeParameter, sgroupParameter, groupIDParameter);
        }
    
        public virtual ObjectResult<GetDataTHatNoAddDegreePerTerm_Result> GetDataTHatNoAddDegreePerTerm(Nullable<int> termID, Nullable<int> yearID)
        {
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("TermID", termID) :
                new ObjectParameter("TermID", typeof(int));
    
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("yearID", yearID) :
                new ObjectParameter("yearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataTHatNoAddDegreePerTerm_Result>("GetDataTHatNoAddDegreePerTerm", termIDParameter, yearIDParameter);
        }
    
        [DbFunction("alhaqldbEntities", "GetAnalyticResultForStidentForTerm")]
        public virtual IQueryable<GetAnalyticResultForStidentForTerm_Result> GetAnalyticResultForStidentForTerm(Nullable<int> yearID, Nullable<int> termId)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("yearID", yearID) :
                new ObjectParameter("yearID", typeof(int));
    
            var termIdParameter = termId.HasValue ?
                new ObjectParameter("TermId", termId) :
                new ObjectParameter("TermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAnalyticResultForStidentForTerm_Result>("[alhaqldbEntities].[GetAnalyticResultForStidentForTerm](@yearID, @TermId)", yearIDParameter, termIdParameter);
        }
    
        public virtual int UpdateStudentDegree(Nullable<double> deg1, Nullable<double> deg2, Nullable<int> levelid, Nullable<int> courseid, Nullable<int> studentid, Nullable<int> termid, Nullable<int> yearid)
        {
            var deg1Parameter = deg1.HasValue ?
                new ObjectParameter("deg1", deg1) :
                new ObjectParameter("deg1", typeof(double));
    
            var deg2Parameter = deg2.HasValue ?
                new ObjectParameter("deg2", deg2) :
                new ObjectParameter("deg2", typeof(double));
    
            var levelidParameter = levelid.HasValue ?
                new ObjectParameter("levelid", levelid) :
                new ObjectParameter("levelid", typeof(int));
    
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var termidParameter = termid.HasValue ?
                new ObjectParameter("termid", termid) :
                new ObjectParameter("termid", typeof(int));
    
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudentDegree", deg1Parameter, deg2Parameter, levelidParameter, courseidParameter, studentidParameter, termidParameter, yearidParameter);
        }
    
        public virtual int RollBackForFull(Nullable<int> stdid, Nullable<int> levelid, Nullable<int> yearid)
        {
            var stdidParameter = stdid.HasValue ?
                new ObjectParameter("stdid", stdid) :
                new ObjectParameter("stdid", typeof(int));
    
            var levelidParameter = levelid.HasValue ?
                new ObjectParameter("levelid", levelid) :
                new ObjectParameter("levelid", typeof(int));
    
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RollBackForFull", stdidParameter, levelidParameter, yearidParameter);
        }
    
        public virtual ObjectResult<GetProfilePermanence_Result> GetProfilePermanence(Nullable<System.DateTime> stDate, Nullable<System.DateTime> enDate)
        {
            var stDateParameter = stDate.HasValue ?
                new ObjectParameter("stDate", stDate) :
                new ObjectParameter("stDate", typeof(System.DateTime));
    
            var enDateParameter = enDate.HasValue ?
                new ObjectParameter("enDate", enDate) :
                new ObjectParameter("enDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfilePermanence_Result>("GetProfilePermanence", stDateParameter, enDateParameter);
        }
    
        public virtual ObjectResult<GetAllDistrubuteStudent_Result> GetAllDistrubuteStudent(Nullable<int> yearid, Nullable<int> termID)
        {
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("TermID", termID) :
                new ObjectParameter("TermID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDistrubuteStudent_Result>("GetAllDistrubuteStudent", yearidParameter, termIDParameter);
        }
    
        public virtual ObjectResult<Proc_GetStudentDataForTerm_Result> Proc_GetStudentDataForTerm(Nullable<int> termID, Nullable<int> yearID, Nullable<int> levelID)
        {
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("TermID", termID) :
                new ObjectParameter("TermID", typeof(int));
    
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetStudentDataForTerm_Result>("Proc_GetStudentDataForTerm", termIDParameter, yearIDParameter, levelIDParameter);
        }
    
        public virtual int proc_UpdateLevelStateForStudent(Nullable<int> yearID)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateLevelStateForStudent", yearIDParameter);
        }
    
        public virtual int proc_GetDegreeFromTermToAnother(Nullable<int> target, Nullable<int> termID, Nullable<int> levelID, Nullable<int> yearID, Nullable<int> stdid)
        {
            var targetParameter = target.HasValue ?
                new ObjectParameter("target", target) :
                new ObjectParameter("target", typeof(int));
    
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("termID", termID) :
                new ObjectParameter("termID", typeof(int));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("levelID", levelID) :
                new ObjectParameter("levelID", typeof(int));
    
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            var stdidParameter = stdid.HasValue ?
                new ObjectParameter("stdid", stdid) :
                new ObjectParameter("stdid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetDegreeFromTermToAnother", targetParameter, termIDParameter, levelIDParameter, yearIDParameter, stdidParameter);
        }
    
        public virtual int proc_UpdateGroupForStudent(Nullable<int> yearID, Nullable<int> lvlid)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            var lvlidParameter = lvlid.HasValue ?
                new ObjectParameter("lvlid", lvlid) :
                new ObjectParameter("lvlid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateGroupForStudent", yearIDParameter, lvlidParameter);
        }
    
        public virtual ObjectResult<proc_GetResultFinalStudent_Result> proc_GetResultFinalStudent(Nullable<int> yearid, Nullable<int> levelid, Nullable<int> studentid)
        {
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            var levelidParameter = levelid.HasValue ?
                new ObjectParameter("levelid", levelid) :
                new ObjectParameter("levelid", typeof(int));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetResultFinalStudent_Result>("proc_GetResultFinalStudent", yearidParameter, levelidParameter, studentidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetTypSchool()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetTypSchool");
        }
    
        public virtual int UpdateBreeders(Nullable<int> planID, Nullable<int> brdID, Nullable<int> termID, Nullable<int> lvlid)
        {
            var planIDParameter = planID.HasValue ?
                new ObjectParameter("planID", planID) :
                new ObjectParameter("planID", typeof(int));
    
            var brdIDParameter = brdID.HasValue ?
                new ObjectParameter("brdID", brdID) :
                new ObjectParameter("brdID", typeof(int));
    
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("termID", termID) :
                new ObjectParameter("termID", typeof(int));
    
            var lvlidParameter = lvlid.HasValue ?
                new ObjectParameter("lvlid", lvlid) :
                new ObjectParameter("lvlid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBreeders", planIDParameter, brdIDParameter, termIDParameter, lvlidParameter);
        }
    
        public virtual ObjectResult<GetDistributeStudent_Result> GetDistributeStudent(Nullable<int> yearID)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDistributeStudent_Result>("GetDistributeStudent", yearIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetTypSchoolByYear(Nullable<int> yearID)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetTypSchoolByYear", yearIDParameter);
        }
    
        public virtual int Proc_AddProfilPermanences(Nullable<int> yearID, Nullable<System.DateTime> startdate, Nullable<System.DateTime> endDate)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("yearID", yearID) :
                new ObjectParameter("yearID", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_AddProfilPermanences", yearIDParameter, startdateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Proc_GetFinalResultDataForTermNew_Result> Proc_GetFinalResultDataForTermNew(Nullable<int> termID, Nullable<int> yearID, Nullable<int> levelID)
        {
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("TermID", termID) :
                new ObjectParameter("TermID", typeof(int));
    
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetFinalResultDataForTermNew_Result>("Proc_GetFinalResultDataForTermNew", termIDParameter, yearIDParameter, levelIDParameter);
        }
    
        public virtual ObjectResult<proc_GetFinalResultStudentNew_Result> proc_GetFinalResultStudentNew(Nullable<int> yearid, Nullable<int> levelid)
        {
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            var levelidParameter = levelid.HasValue ?
                new ObjectParameter("levelid", levelid) :
                new ObjectParameter("levelid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_GetFinalResultStudentNew_Result>("proc_GetFinalResultStudentNew", yearidParameter, levelidParameter);
        }
    
        public virtual ObjectResult<GetProfileHorizontal_Result> GetProfileHorizontal(Nullable<int> yearID, Nullable<int> startWeek, Nullable<int> endWeek, Nullable<int> yearProfile)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            var startWeekParameter = startWeek.HasValue ?
                new ObjectParameter("startWeek", startWeek) :
                new ObjectParameter("startWeek", typeof(int));
    
            var endWeekParameter = endWeek.HasValue ?
                new ObjectParameter("EndWeek", endWeek) :
                new ObjectParameter("EndWeek", typeof(int));
    
            var yearProfileParameter = yearProfile.HasValue ?
                new ObjectParameter("YearProfile", yearProfile) :
                new ObjectParameter("YearProfile", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfileHorizontal_Result>("GetProfileHorizontal", yearIDParameter, startWeekParameter, endWeekParameter, yearProfileParameter);
        }
    
        public virtual ObjectResult<GetProfileHorizontalNew_Result> GetProfileHorizontalNew(Nullable<int> yearID, Nullable<System.DateTime> starDate, Nullable<System.DateTime> endDate, Nullable<int> yearProfile)
        {
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            var starDateParameter = starDate.HasValue ?
                new ObjectParameter("starDate", starDate) :
                new ObjectParameter("starDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var yearProfileParameter = yearProfile.HasValue ?
                new ObjectParameter("YearProfile", yearProfile) :
                new ObjectParameter("YearProfile", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfileHorizontalNew_Result>("GetProfileHorizontalNew", yearIDParameter, starDateParameter, endDateParameter, yearProfileParameter);
        }
    
        public virtual int Proc_RestStudentToPrevLevel(Nullable<int> stdid, Nullable<int> lvlID, Nullable<int> yearID, string note)
        {
            var stdidParameter = stdid.HasValue ?
                new ObjectParameter("stdid", stdid) :
                new ObjectParameter("stdid", typeof(int));
    
            var lvlIDParameter = lvlID.HasValue ?
                new ObjectParameter("lvlID", lvlID) :
                new ObjectParameter("lvlID", typeof(int));
    
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_RestStudentToPrevLevel", stdidParameter, lvlIDParameter, yearIDParameter, noteParameter);
        }
    
        [DbFunction("alhaqldbEntities", "GetStudentDataForTermNew")]
        public virtual IQueryable<GetStudentDataForTermNew_Result> GetStudentDataForTermNew(Nullable<int> termID, Nullable<int> yearID, Nullable<int> levelID)
        {
            var termIDParameter = termID.HasValue ?
                new ObjectParameter("TermID", termID) :
                new ObjectParameter("TermID", typeof(int));
    
            var yearIDParameter = yearID.HasValue ?
                new ObjectParameter("YearID", yearID) :
                new ObjectParameter("YearID", typeof(int));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetStudentDataForTermNew_Result>("[alhaqldbEntities].[GetStudentDataForTermNew](@TermID, @YearID, @LevelID)", termIDParameter, yearIDParameter, levelIDParameter);
        }
    
        public virtual int UpdateStudentDegreeNew(Nullable<double> qranDeg1, Nullable<double> qranDeg2, Nullable<double> islamicDeg1, Nullable<double> islamicDeg2, Nullable<double> arabicDeg1, Nullable<double> arabicDeg2, Nullable<double> engDeg1, Nullable<double> engDeg2, Nullable<double> mathDeg1, Nullable<double> mathDeg2, Nullable<double> scoDeg1, Nullable<double> scoDeg2, Nullable<double> sciDeg1, Nullable<double> sciDeg2, Nullable<double> compDeg1, Nullable<double> compDeg2, Nullable<double> artDeg1, Nullable<double> artDeg2, Nullable<double> sportDeg1, Nullable<double> sportDeg2, Nullable<double> physicDeg1, Nullable<double> physicDeg2, Nullable<double> chemstryDeg1, Nullable<double> chemstryDeg2, Nullable<double> biologyDeg1, Nullable<double> biologyDeg2, Nullable<double> geographicDeg1, Nullable<double> geographicDeg2, Nullable<double> historyDeg1, Nullable<double> historyDeg2, Nullable<double> communityDeg1, Nullable<double> communityDeg2, Nullable<int> levelid, Nullable<int> studentid, Nullable<int> termid, Nullable<int> yearid)
        {
            var qranDeg1Parameter = qranDeg1.HasValue ?
                new ObjectParameter("QranDeg1", qranDeg1) :
                new ObjectParameter("QranDeg1", typeof(double));
    
            var qranDeg2Parameter = qranDeg2.HasValue ?
                new ObjectParameter("QranDeg2", qranDeg2) :
                new ObjectParameter("QranDeg2", typeof(double));
    
            var islamicDeg1Parameter = islamicDeg1.HasValue ?
                new ObjectParameter("IslamicDeg1", islamicDeg1) :
                new ObjectParameter("IslamicDeg1", typeof(double));
    
            var islamicDeg2Parameter = islamicDeg2.HasValue ?
                new ObjectParameter("IslamicDeg2", islamicDeg2) :
                new ObjectParameter("IslamicDeg2", typeof(double));
    
            var arabicDeg1Parameter = arabicDeg1.HasValue ?
                new ObjectParameter("ArabicDeg1", arabicDeg1) :
                new ObjectParameter("ArabicDeg1", typeof(double));
    
            var arabicDeg2Parameter = arabicDeg2.HasValue ?
                new ObjectParameter("ArabicDeg2", arabicDeg2) :
                new ObjectParameter("ArabicDeg2", typeof(double));
    
            var engDeg1Parameter = engDeg1.HasValue ?
                new ObjectParameter("EngDeg1", engDeg1) :
                new ObjectParameter("EngDeg1", typeof(double));
    
            var engDeg2Parameter = engDeg2.HasValue ?
                new ObjectParameter("EngDeg2", engDeg2) :
                new ObjectParameter("EngDeg2", typeof(double));
    
            var mathDeg1Parameter = mathDeg1.HasValue ?
                new ObjectParameter("MathDeg1", mathDeg1) :
                new ObjectParameter("MathDeg1", typeof(double));
    
            var mathDeg2Parameter = mathDeg2.HasValue ?
                new ObjectParameter("MathDeg2", mathDeg2) :
                new ObjectParameter("MathDeg2", typeof(double));
    
            var scoDeg1Parameter = scoDeg1.HasValue ?
                new ObjectParameter("ScoDeg1", scoDeg1) :
                new ObjectParameter("ScoDeg1", typeof(double));
    
            var scoDeg2Parameter = scoDeg2.HasValue ?
                new ObjectParameter("ScoDeg2", scoDeg2) :
                new ObjectParameter("ScoDeg2", typeof(double));
    
            var sciDeg1Parameter = sciDeg1.HasValue ?
                new ObjectParameter("SciDeg1", sciDeg1) :
                new ObjectParameter("SciDeg1", typeof(double));
    
            var sciDeg2Parameter = sciDeg2.HasValue ?
                new ObjectParameter("SciDeg2", sciDeg2) :
                new ObjectParameter("SciDeg2", typeof(double));
    
            var compDeg1Parameter = compDeg1.HasValue ?
                new ObjectParameter("CompDeg1", compDeg1) :
                new ObjectParameter("CompDeg1", typeof(double));
    
            var compDeg2Parameter = compDeg2.HasValue ?
                new ObjectParameter("CompDeg2", compDeg2) :
                new ObjectParameter("CompDeg2", typeof(double));
    
            var artDeg1Parameter = artDeg1.HasValue ?
                new ObjectParameter("ArtDeg1", artDeg1) :
                new ObjectParameter("ArtDeg1", typeof(double));
    
            var artDeg2Parameter = artDeg2.HasValue ?
                new ObjectParameter("ArtDeg2", artDeg2) :
                new ObjectParameter("ArtDeg2", typeof(double));
    
            var sportDeg1Parameter = sportDeg1.HasValue ?
                new ObjectParameter("SportDeg1", sportDeg1) :
                new ObjectParameter("SportDeg1", typeof(double));
    
            var sportDeg2Parameter = sportDeg2.HasValue ?
                new ObjectParameter("SportDeg2", sportDeg2) :
                new ObjectParameter("SportDeg2", typeof(double));
    
            var physicDeg1Parameter = physicDeg1.HasValue ?
                new ObjectParameter("PhysicDeg1", physicDeg1) :
                new ObjectParameter("PhysicDeg1", typeof(double));
    
            var physicDeg2Parameter = physicDeg2.HasValue ?
                new ObjectParameter("PhysicDeg2", physicDeg2) :
                new ObjectParameter("PhysicDeg2", typeof(double));
    
            var chemstryDeg1Parameter = chemstryDeg1.HasValue ?
                new ObjectParameter("ChemstryDeg1", chemstryDeg1) :
                new ObjectParameter("ChemstryDeg1", typeof(double));
    
            var chemstryDeg2Parameter = chemstryDeg2.HasValue ?
                new ObjectParameter("ChemstryDeg2", chemstryDeg2) :
                new ObjectParameter("ChemstryDeg2", typeof(double));
    
            var biologyDeg1Parameter = biologyDeg1.HasValue ?
                new ObjectParameter("BiologyDeg1", biologyDeg1) :
                new ObjectParameter("BiologyDeg1", typeof(double));
    
            var biologyDeg2Parameter = biologyDeg2.HasValue ?
                new ObjectParameter("BiologyDeg2", biologyDeg2) :
                new ObjectParameter("BiologyDeg2", typeof(double));
    
            var geographicDeg1Parameter = geographicDeg1.HasValue ?
                new ObjectParameter("GeographicDeg1", geographicDeg1) :
                new ObjectParameter("GeographicDeg1", typeof(double));
    
            var geographicDeg2Parameter = geographicDeg2.HasValue ?
                new ObjectParameter("GeographicDeg2", geographicDeg2) :
                new ObjectParameter("GeographicDeg2", typeof(double));
    
            var historyDeg1Parameter = historyDeg1.HasValue ?
                new ObjectParameter("HistoryDeg1", historyDeg1) :
                new ObjectParameter("HistoryDeg1", typeof(double));
    
            var historyDeg2Parameter = historyDeg2.HasValue ?
                new ObjectParameter("HistoryDeg2", historyDeg2) :
                new ObjectParameter("HistoryDeg2", typeof(double));
    
            var communityDeg1Parameter = communityDeg1.HasValue ?
                new ObjectParameter("CommunityDeg1", communityDeg1) :
                new ObjectParameter("CommunityDeg1", typeof(double));
    
            var communityDeg2Parameter = communityDeg2.HasValue ?
                new ObjectParameter("CommunityDeg2", communityDeg2) :
                new ObjectParameter("CommunityDeg2", typeof(double));
    
            var levelidParameter = levelid.HasValue ?
                new ObjectParameter("levelid", levelid) :
                new ObjectParameter("levelid", typeof(int));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var termidParameter = termid.HasValue ?
                new ObjectParameter("termid", termid) :
                new ObjectParameter("termid", typeof(int));
    
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudentDegreeNew", qranDeg1Parameter, qranDeg2Parameter, islamicDeg1Parameter, islamicDeg2Parameter, arabicDeg1Parameter, arabicDeg2Parameter, engDeg1Parameter, engDeg2Parameter, mathDeg1Parameter, mathDeg2Parameter, scoDeg1Parameter, scoDeg2Parameter, sciDeg1Parameter, sciDeg2Parameter, compDeg1Parameter, compDeg2Parameter, artDeg1Parameter, artDeg2Parameter, sportDeg1Parameter, sportDeg2Parameter, physicDeg1Parameter, physicDeg2Parameter, chemstryDeg1Parameter, chemstryDeg2Parameter, biologyDeg1Parameter, biologyDeg2Parameter, geographicDeg1Parameter, geographicDeg2Parameter, historyDeg1Parameter, historyDeg2Parameter, communityDeg1Parameter, communityDeg2Parameter, levelidParameter, studentidParameter, termidParameter, yearidParameter);
        }
    }
}
