USE [master]
GO
/****** Object:  Database [schoolDb]    Script Date: 2024-10-07 04:25:40 م ******/
CREATE DATABASE [schoolDb]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'schoolDb', FILENAME = N'F:\Sql2022\MSSQL16.MSSQLSERVER\MSSQL\DATA\schoolDb.mdf' , SIZE = 11264KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
 LOG ON 
( NAME = N'schoolDb_log', FILENAME = N'F:\Sql2022\MSSQL16.MSSQLSERVER\MSSQL\DATA\schoolDb_log.ldf' , SIZE = 136064KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
 WITH CATALOG_COLLATION = DATABASE_DEFAULT, LEDGER = OFF
GO
ALTER DATABASE [schoolDb] SET COMPATIBILITY_LEVEL = 120
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [schoolDb].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [schoolDb] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [schoolDb] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [schoolDb] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [schoolDb] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [schoolDb] SET ARITHABORT OFF 
GO
ALTER DATABASE [schoolDb] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [schoolDb] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [schoolDb] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [schoolDb] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [schoolDb] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [schoolDb] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [schoolDb] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [schoolDb] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [schoolDb] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [schoolDb] SET  DISABLE_BROKER 
GO
ALTER DATABASE [schoolDb] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [schoolDb] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [schoolDb] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [schoolDb] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [schoolDb] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [schoolDb] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [schoolDb] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [schoolDb] SET RECOVERY FULL 
GO
ALTER DATABASE [schoolDb] SET  MULTI_USER 
GO
ALTER DATABASE [schoolDb] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [schoolDb] SET DB_CHAINING OFF 
GO
ALTER DATABASE [schoolDb] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [schoolDb] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [schoolDb] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [schoolDb] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
EXEC sys.sp_db_vardecimal_storage_format N'schoolDb', N'ON'
GO
ALTER DATABASE [schoolDb] SET QUERY_STORE = OFF
GO
USE [schoolDb]
GO
/****** Object:  UserDefinedFunction [dbo].[GetCourseApsentTerm1]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[GetCourseApsentTerm1]
(
@termid int,
@sid int
)
returns int
as 
begin

declare @res int
select @res=isnull (cnt,0) from

(
select studentid,count(courseLevelID) cnt from studentdegree sdd where TotalAll<(select minDegree from LevelCourse where  ID=sdd.courseLevelID)
and termid=@termid
group by studentid
) as temp
where studentid=@sid

return @res
end

GO
/****** Object:  UserDefinedFunction [dbo].[GetCYear]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create FUNCTION [dbo].[GetCYear]
(
	
)
RETURNS datetime
AS
BEGIN
	-- Declare the return variable here
	DECLARE @r datetime

	-- Add the T-SQL statements to compute the return value here
	SELECT @r=GETDATE();

	-- Return the result of the function
	RETURN @r;

END




GO
/****** Object:  UserDefinedFunction [dbo].[getMaxStudentNumber]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[getMaxStudentNumber]
(
	-- Add the parameters for the function here
	@levelid int,@sgroup nvarchar(4)
)
RETURNS int
AS
BEGIN
	-- Declare the return variable here
	DECLARE @result int

	-- Add the T-SQL statements to compute the return value here
	select @result= isnull(max(SeqID),0)+1 from student where isnull(IsDelete,0)=0

	-- Return the result of the function
	RETURN @result

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetNumberCourseLwssThanOrder]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[GetNumberCourseLwssThanOrder]
(
	-- Add the parameters for the function here
	@orderNumber float,
	@sid int
)
RETURNS int
AS
BEGIN
	-- Declare the return variable here
	DECLARE @res int

	-- Add the T-SQL statements to compute the return value here
	select @res=ISNULL(COUNT(courseid),0) from

(select  st.ID,st.sname,cr.courseid,cr.coursename,SUM(std.TotalAll) as totalAll,st.levelid

 from studentdegree std inner join LevelCourse lvcr on std.courseLevelID=lvcr.ID
 
 inner join student st  on std.studentid=st.ID
 
  inner join course cr on lvcr.CourseID=cr.courseid

  group by st.ID,st.sname,cr.courseid,cr.coursename,st.levelid
  ) as tmp
  where totalAll<@orderNumber and ID=@sid

	-- Return the result of the function
	RETURN @res

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetRankForFinalResult]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetRankForFinalResult]
(@sid int)

returns nvarchar(15)
as
begin

declare @res nvarchar(15)
select @res=ra from 

(
select st.ID,st.levelid ,sum(sd.TotalAll) total,
(case  
DENSE_RANK() over ( partition by st.levelid order by st.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end) ra
--RANK()over(order by st.levelid desc) rk,
--ROW_NUMBER()over(partition by st.levelid order by st.levelid desc) rnum
--,NTILE(6) over( partition by st.levelid order by st.levelid desc) nt
 from studentdegree sd inner join student st on sd.studentid=st.ID where courseLevelID IN
  (select ID from LevelCourse where IsActive=1 and levelid=sd.levelid)
 group by st.ID,st.levelid
 )as tm
 where ID=@sid
 return @res
 end
GO
/****** Object:  Table [dbo].[levels]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[levels](
	[levelid] [int] IDENTITY(1,1) NOT NULL,
	[levelname] [nvarchar](20) NULL,
	[numbercourseterm1] [int] NULL,
	[nextLevelID] [int] NULL,
	[IsStop] [bit] NULL,
	[LevelTypeID] [int] NULL,
 CONSTRAINT [PK_class] PRIMARY KEY CLUSTERED 
(
	[levelid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[course]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[course](
	[courseid] [int] IDENTITY(1,1) NOT NULL,
	[coursename] [nvarchar](20) NULL,
	[sortshowInReport] [int] NULL,
	[CourseLevelType] [int] NULL,
 CONSTRAINT [PK_course] PRIMARY KEY CLUSTERED 
(
	[courseid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[terms]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[terms](
	[termid] [int] IDENTITY(1,1) NOT NULL,
	[termname] [nvarchar](15) NULL,
 CONSTRAINT [PK_terms] PRIMARY KEY CLUSTERED 
(
	[termid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[student]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[student](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SeqID] [int] NOT NULL,
	[sname] [nvarchar](50) NULL,
	[levelid] [int] NULL,
	[BirthPlace] [nvarchar](50) NULL,
	[LastName] [nvarchar](20) NULL,
	[gender] [nvarchar](10) NULL,
	[natianalityt] [nvarchar](20) NULL,
	[yearid] [int] NULL,
	[lvlState] [nvarchar](10) NULL,
	[sgroup] [nchar](5) NULL,
	[bdate] [date] NULL,
	[stdImage] [image] NULL,
	[Village] [nvarchar](30) NULL,
	[IsLeave] [bit] NULL,
	[Notes] [nvarchar](100) NULL,
	[IsDelete] [bit] NULL,
	[AddDate] [date] NULL,
	[EditDate] [date] NULL,
	[DeletDate] [date] NULL,
	[UserAdd] [int] NULL,
	[UserEdit] [int] NULL,
	[UserDelete] [int] NULL,
	[GroupID] [int] NULL,
 CONSTRAINT [PK_student_ONE] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[studentdegree]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[studentdegree](
	[seqid] [int] IDENTITY(1,1) NOT NULL,
	[studentid] [int] NULL,
	[levelid] [int] NULL,
	[courseLevelID] [int] NULL,
	[courseID] [int] NULL,
	[termid] [int] NULL,
	[deg1] [float] NULL,
	[deg2] [float] NULL,
	[total]  AS (isnull([deg1],(0))+isnull([deg2],(0))),
	[deg3] [float] NULL,
	[deg4] [float] NULL,
	[forFull] [float] NULL,
	[total2]  AS (isnull([deg3],(0))+isnull([deg4],(0))),
	[TotalAll]  AS ((((isnull([deg1],(0))+isnull([deg2],(0)))+isnull([deg3],(0)))+isnull([deg4],(0)))+isnull([forFull],(0))),
	[yearID] [int] NULL,
	[amontapsentcourse] [int] NULL,
 CONSTRAINT [PK_studentdegree_1] PRIMARY KEY CLUSTERED 
(
	[seqid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StudentLevels]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StudentLevels](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[StdID] [int] NULL,
	[LevelID] [int] NULL,
	[YearID] [int] NULL,
	[active] [bit] NULL,
	[lvlState] [nvarchar](20) NULL,
	[sgroup] [nvarchar](20) NULL,
	[GroupID] [int] NULL,
	[Note] [nvarchar](100) NULL,
 CONSTRAINT [PK_StudentLevels] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[studyYear]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[studyYear](
	[seqid] [int] IDENTITY(1,1) NOT NULL,
	[FormYear] [smallint] NULL,
	[ToYear] [smallint] NULL,
	[studyYearEngl] [nvarchar](15) NULL,
	[studyYearArab] [nvarchar](15) NULL,
	[IsActive] [bit] NULL,
	[NextYear] [int] NULL,
 CONSTRAINT [PK_studyYear] PRIMARY KEY CLUSTERED 
(
	[seqid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Group]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Group](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[GroupName] [nchar](10) NULL,
	[NumberPlace] [int] NULL,
	[IsShowInList] [bit] NULL,
 CONSTRAINT [PK_Group] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LevelCourse]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LevelCourse](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[LevelID] [int] NULL,
	[CourseID] [int] NULL,
	[termID] [int] NULL,
	[maxDegree] [float] NULL,
	[minDegree] [float] NULL,
	[IsActive] [bit] NULL,
	[PlanID] [int] NULL,
	[DefaultDegree] [float] NULL,
	[TermPlanID] [int] NULL,
	[TeacherID] [int] NULL,
	[BredLevel] [int] NULL,
 CONSTRAINT [PK_LevelCourse] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[GetBasicStudentDataFinal]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetBasicStudentDataFinal]
()
returns table
as
return
(
select 
st.ID as stdid,st.sname,st.SeqID,st.BirthPlace,st.LastName,st.gender,st.natianalityt,stlv.lvlState,grp.GroupName as sgroup
,stlv.GroupID,
st.bdate,st.Village,st.Notes,st.IsDelete,isnull(st.IsLeave,0) as IsLeave,
cr.courseid,
cr.coursename,
  sum( case when tr.termid=1 then sd.deg1 else 0 end) as deg1term1 ,
 sum( case when tr.termid=2 then sd.deg1 else 0 end) as deg1term2,
 sum( case when tr.termid=1 then sd.deg2 else 0 end) as deg2term1,
 sum( case when tr.termid=2 then sd.deg2 else 0 end) as deg2term2,
 sum( case when tr.termid=1 then sd.deg3 else 0 end) as deg3term1,
 sum( case when tr.termid=2 then sd.deg3 else 0 end) as deg3term2,
 sum( case when tr.termid=1 then sd.deg4 else 0 end) as deg4term1,
 sum( case when tr.termid=2 then sd.deg4 else 0 end) as deg4term2,
 sum( case when tr.termid=1 then sd.forFull else 0 end) as forfullterm1,
 sum( case when tr.termid=2 then sd.forFull else 0 end) as forfullterm2,
 sum( case when tr.termid=1 then sd.TotalAll else 0 end) as TotalAllterm1,
 sum( case when tr.termid=2 then sd.TotalAll else 0 end) as TotalAllterm2,
 --SUM(lvc.minDegree) mindeg,
lvl.levelid,lvl.levelname 
,lvl.LevelTypeID
,sty.seqid as yearID,
sty.studyYearEngl,
lvc.PlanID

from studentdegree sd inner join student st on st.ID=sd.studentid
inner join LevelCourse lvc on lvc.ID=sd.courseLevelID 
inner join levels lvl on lvl.levelid=lvc.LevelID
inner join course cr on cr.courseid =lvc.CourseID
inner join terms tr on tr.termid=sd.termid and tr.termid=lvc.termID
 inner join StudentLevels stlv on st.ID=stlv.StdID and sd.levelid=stlv.LevelID 
inner join studyYear sty on sty.seqid=sd.yearID and sty.seqid=stlv.YearID
inner join dbo.[Group] grp on grp.ID=stlv.GroupID
group by sty.seqid,sty.studyYearEngl,lvl.LevelTypeID,lvl.levelid,levelname,lvc.PlanID, st.ID,st.sname,st.SeqID,st.BirthPlace,st.LastName,st.gender,st.natianalityt,stlv.lvlState,grp.GroupName,stlv.GroupID,
st.bdate,st.Village,st.Notes,st.IsDelete,st.IsLeave,cr.courseid,cr.coursename
)
GO
/****** Object:  UserDefinedFunction [dbo].[GetCourseFail]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE function [dbo].[GetCourseFail] 
()
 returns table 
 as
 return
 (select studentid,COUNT(CourseID) coursFialCount,isnull(sum(amontapsentcourse),0) amontapsentcourse,levelid,YearID,PlanID  from
 (
 select studentid,stlv.levelid,sum(sd.amontapsentcourse) as amontapsentcourse,lvc.CourseID,SUM(TotalAll) as Total,stlv.YearID,lvc.PlanID,
 sum(lvc.minDegree) as minDeg,sum(lvc.maxDegree) as maxDeg 
 from studentdegree sd 
 inner join LevelCourse lvc on sd.courseLevelID=lvc.ID
 inner join student st on sd.studentid=st.ID 
 inner join StudentLevels stlv on stlv.StdID=sd.studentid and stlv.YearID=sd.yearID
 where lvc.IsActive=1 and lvc.LevelID=sd.levelid 
 group by studentid,stlv.levelid,lvc.CourseID,stlv.YearID,lvc.planID
 ) as tmp
 where Total<(select sum(lvc.minDegree) from LevelCourse lvc where IsActive=1 and lvc.LevelID=tmp.levelid and lvc.CourseID=tmp.CourseID and lvc.PlanID=tmp.PlanID) 
 group by studentid,levelid,YearID,PlanID
 )
GO
/****** Object:  UserDefinedFunction [dbo].[getCountCourseLevel]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create function [dbo].[getCountCourseLevel]
()
returns table 
as
return
(
select LevelID, count(*) curseCount from
(
select distinct CourseID,LevelID from LevelCourse where IsActive=1 
) as tmp
group by LevelID
)

GO
/****** Object:  UserDefinedFunction [dbo].[GetRankWithAvrage]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetRankWithAvrage]
()
returns table 
as
return
(select 
stlv.StdID as stdid,
  sum(sd.TotalAll) as TotalAll ,
        (select (sum(sd.TotalAll)/crlv.curseCount) from [dbo].[getCountCourseLevel]() crlv where lvl.levelid=crlv.LevelID)  avgst ,
    isnull((select coursFialCount from GetCourseFail() cf where cf.studentid=stlv.StdID and cf.YearID=sty.seqid and cf.levelid=lvl.levelid ),0)coursFialCount,
	(select amontapsentcourse from GetCourseFail() cf where cf.studentid=stlv.StdID and cf.YearID=sty.seqid and cf.levelid=lvl.levelid ) amontapsentcourse,
lvl.levelid,lvl.levelname ,
sty.seqid as yearID,
sty.studyYearEngl,
(case  
DENSE_RANK() over ( partition by sty.seqid, lvl.levelid order by lvl.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end)  as StudentRamk
,(case  
DENSE_RANK() over ( partition by sty.seqid, lvl.levelid,stlv.GroupID order by lvl.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end)  as GroupIDStudentRamk
,stlv.active
from studentdegree sd inner join student st on sd.studentid=st.ID
inner join LevelCourse lvc on sd.courseLevelID=lvc.ID 
inner join levels lvl on lvc.LevelID=lvl.levelid
inner join course cr on lvc.CourseID=cr.courseid 
inner join terms tr on sd.termid=tr.termid and lvc.termID=tr.termid 
inner join studyYear sty on sd.yearID=sty.seqid  -- inner join [dbo].[GetCourseFail]() crsfl on st.ID =crsfl.studentid
inner join StudentLevels stlv on sd.studentid=stlv.StdID and sd.levelid=stlv.LevelID and stlv.YearID=sty.seqid
where lvc.IsActive=1 
group by stlv.StdID,lvl.levelid,lvl.levelname,stlv.GroupID,sty.seqid,sty.studyYearEngl,st.yearid,stlv.active
)
GO
/****** Object:  UserDefinedFunction [dbo].[GetFinalResultStudentWithParameter]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetFinalResultStudentWithParameter]
(@yearid int ,@levelid int)
returns table 
as
return
(
select bdt.*,rnk.coursFialCount,rnk.amontapsentcourse,rnk.avgst,rnk.StudentRamk,rnk.GroupIDStudentRamk,rnk.TotalAll 
from [dbo].[GetBasicStudentDataFinal]() bdt inner join [dbo].[GetRankWithAvrage]() rnk 
on rnk.stdid=bdt.stdid and bdt.levelid=rnk.levelid and bdt.yearID=rnk.yearID  
where bdt.yearID=case when @yearid>0 then @yearid else bdt.yearID end 
and bdt.levelid=case when @levelid>0 then @levelid else bdt.levelid end
)
GO
/****** Object:  View [dbo].[studentnearsuccess]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[studentnearsuccess]
AS
SELECT        seqid, studentid, levelid, courseid, termid, deg1, deg2, total, deg3, deg4, forFull, total2,
                             (SELECT        COUNT(courseid) AS Expr1
                                FROM            dbo.studentdegree AS sd
                                WHERE        (total < 25) AND (studentid = st.studentid) OR
                                                         (studentid = st.studentid) AND (total2 < 25)) AS numbercourseapsent
FROM            dbo.studentdegree AS st
WHERE        (total < 25) OR
                         (total2 < 25)
GO
/****** Object:  UserDefinedFunction [dbo].[getCountCourseLevelPerTerm]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[getCountCourseLevelPerTerm]
(
@termid int
)
returns table 
as
return
(
select LevelID, count(*) curseCount,termID from
(
select  CourseID,LevelID,termID  from LevelCourse where IsActive=1  group by LevelID, termID,CourseID
) as tmp
group by LevelID,termID
)

GO
/****** Object:  UserDefinedFunction [dbo].[GetCourseFialPerTerm]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetCourseFialPerTerm]
()
returns table 
as
return
(

select sd.studentid,count(lvc.CourseID) coursFialCount,sum(sd.amontapsentcourse) amontapsentcourse,sd.levelid,sd.yearID,sd.termid 

from studentdegree sd inner join LevelCourse lvc 
on sd.courseLevelID=lvc.ID where TotalAll<lvc.minDegree and IsActive=1  and sd.levelid=lvc.LevelID
group by sd.studentid,sd.levelid,sd.yearID,sd.termid
)
GO
/****** Object:  UserDefinedFunction [dbo].[GetRankPerTerm]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetRankPerTerm]
(
@termid int
)
returns table 
as
return
(
select 
stlv.StdID as stdid,
  sum(sd.TotalAll) as TotalAll ,
        (select (sum(sd.TotalAll)/crlv.curseCount) from [dbo].[getCountCourseLevelPerTerm](1) crlv where lvl.levelid=crlv.LevelID and crlv.termid=sd.termid)  avgst ,
    isnull((select coursFialCount from [dbo].[GetCourseFialPerTerm]() cf
	 where cf.studentid=stlv.StdID and cf.yearID=sty.seqid and cf.termid=sd.termid and cf.levelid=lvl.levelid ),0)coursFialCount,
	isnull((select isnull(amontapsentcourse,0) from [dbo].[GetCourseFialPerTerm]() cf
	 where cf.studentid=stlv.StdID and cf.yearID=sty.seqid and cf.termid=sd.termid and cf.levelid=lvl.levelid ),0) amontapsentcourse ,
lvl.levelid,lvl.levelname ,
sty.seqid as yearID,
sd.termid,
sty.studyYearEngl,
(case  
DENSE_RANK() over ( partition by sty.seqid, lvl.levelid,sd.termid,stlv.GroupID order by lvl.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end)  as StudentRamk
,
(case  
DENSE_RANK() over ( partition by sty.seqid, lvl.levelid,sd.termid order by lvl.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end)  as StudentRamkByLevel

from studentdegree sd inner join student st on sd.studentid=st.ID
inner join LevelCourse lvc on sd.courseLevelID=lvc.ID 
inner join levels lvl on lvc.LevelID=lvl.levelid
inner join course cr on lvc.CourseID=cr.courseid 
inner join terms tr on sd.termid=tr.termid and lvc.termID=tr.termid
inner join studyYear sty on sd.yearID=sty.seqid -- inner join [dbo].[GetCourseFail]() crsfl on st.ID =crsfl.studentid
inner join StudentLevels stlv on sd.studentid=stlv.StdID and sd.levelid=stlv.LevelID and stlv.YearID=sty.seqid
inner join dbo.[Group] grp on stlv.GroupID=grp.ID
where lvc.IsActive=1 
group by stlv.StdID,lvl.levelid,stlv.GroupID,lvl.levelname,sty.seqid,sty.studyYearEngl,sd.termid
)
GO
/****** Object:  View [dbo].[BasicStudentDataV]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[BasicStudentDataV]
AS
SELECT        TOP (100) PERCENT st.ID AS stdid, st.sname, st.SeqID, st.BirthPlace, st.LastName, st.gender, st.natianalityt, stdlv.lvlState, grp.GroupName AS sgroup, stdlv.GroupID, st.bdate, st.Village, st.stdImage, st.Notes, st.IsDelete, 
                         st.AddDate, st.EditDate, st.DeletDate, st.UserAdd, st.UserEdit, st.UserDelete, sd.courseLevelID, cr.courseid, cr.coursename, sd.deg1, sd.deg2, sd.deg3, sd.deg4, sd.forFull, sd.TotalAll, sd.termid, tr.termname, lvl.levelid, 
                         lvl.levelname, lvc.IsActive, sty.seqid AS yearID, sty.studyYearEngl, rnk.TotalAll AS rnkTotal, rnk.coursFialCount, rnk.amontapsentcourse, rnk.StudentRamk, rnk.StudentRamkByLevel, rnk.avgst,
                             (SELECT        curseCount
                                FROM            dbo.getCountCourseLevelPerTerm(sd.termid) AS crlv
                                WHERE        (lvl.levelid = LevelID) AND (sd.termid = termID)) AS curseCount, 
                         CASE WHEN rnk.amontapsentcourse > 0 THEN '3' WHEN rnk.[coursFialCount] >= 1 THEN '2' WHEN rnk.coursFialCount <= 0 THEN '1' END AS ResultTxt, CASE WHEN st.gender = 'انثى' THEN 2 ELSE 1 END AS genderNumber, 
                         ISNULL(st.IsLeave, 0) AS IsLeave
FROM            dbo.studentdegree AS sd INNER JOIN
                         dbo.student AS st ON sd.studentid = st.ID INNER JOIN
                         dbo.StudentLevels AS stdlv ON st.ID = stdlv.StdID INNER JOIN
                         dbo.LevelCourse AS lvc ON sd.courseLevelID = lvc.ID INNER JOIN
                         dbo.[Group] AS grp ON grp.ID = stdlv.GroupID INNER JOIN
                         dbo.levels AS lvl ON lvc.LevelID = lvl.levelid INNER JOIN
                         dbo.course AS cr ON lvc.CourseID = cr.courseid INNER JOIN
                         dbo.terms AS tr ON sd.termid = tr.termid AND lvc.termID = tr.termid INNER JOIN
                         dbo.studyYear AS sty ON sd.yearID = sty.seqid AND stdlv.YearID = sty.seqid INNER JOIN
                         dbo.GetRankPerTerm(1) AS rnk ON stdlv.StdID = rnk.stdid AND stdlv.YearID = rnk.yearID AND sd.levelid = rnk.levelid AND rnk.termid = sd.termid
ORDER BY stdlv.LevelID, sd.termid
GO
/****** Object:  UserDefinedFunction [dbo].[getStudentForTertmResultFunc]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[getStudentForTertmResultFunc]
(@levelid int,@yearid int)
returns table
as
return
(select * from BasicStudentDataV
where IsDelete=0 and levelid=@levelid and yearID=@yearid)
GO
/****** Object:  UserDefinedFunction [dbo].[getReportStudentFunc]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[getReportStudentFunc]
(@termid int,@yearid int, @levelid int)
returns table
as
return
(
SELECT distinct  st.ID AS stdid, st.sname, st.SeqID, st.BirthPlace, Isnull(st.LastName,' ') LastName, st.gender, st.natianalityt, 
stdlv.lvlState, grp.GroupName AS sgroup, stdlv.GroupID,isnull(st.IsLeave,0 ) as IsLeave, st.bdate, st.Village, st.Notes, st.IsDelete, 
                         st.AddDate, st.EditDate, st.DeletDate, st.UserAdd, st.UserEdit, st.UserDelete
						 
						 , sd.termid, tr.termname, lvl.levelid, 
                         lvl.levelname, sty.seqid AS yearID, sty.studyYearEngl
						 , rnk.TotalAll AS rnkTotal, rnk.coursFialCount, rnk.amontapsentcourse
						 , rnk.StudentRamk
						  ,rnk.StudentRamkByLevel
						 , rnk.avgst,
                             (SELECT        curseCount
                                FROM            dbo.getCountCourseLevelPerTerm(sd.termid) AS crlv
                                WHERE        (lvl.levelid = LevelID) AND (sd.termid = crlv.termID)) AS curseCount, 
                    CASE WHEN rnk.amontapsentcourse > 0 THEN '3' WHEN rnk.[coursFialCount] >= 1 THEN '2' WHEN rnk.coursFialCount <= 0 THEN '1' END AS ResultTxt
					, CASE WHEN st.gender = 'انثى' THEN 2 ELSE 1 END AS genderNumber
FROM            dbo.studentdegree AS sd INNER JOIN
                         dbo.student AS st ON sd.studentid = st.ID INNER JOIN
                         dbo.StudentLevels AS stdlv ON st.ID = stdlv.StdID INNER JOIN
                         dbo.LevelCourse AS lvc ON sd.courseLevelID = lvc.ID INNER JOIN
                         dbo.[Group] AS grp ON grp.ID = stdlv.GroupID INNER JOIN
                         dbo.levels AS lvl ON lvc.LevelID = lvl.levelid INNER JOIN
                         dbo.course AS cr ON lvc.CourseID = cr.courseid INNER JOIN
                         dbo.terms AS tr ON sd.termid = tr.termid AND lvc.termID = tr.termid INNER JOIN
                         dbo.studyYear AS sty ON sd.yearID = sty.seqid AND stdlv.YearID = sty.seqid INNER JOIN
                         dbo.GetRankPerTerm(1) AS rnk ON stdlv.StdID = rnk.stdid AND stdlv.YearID = rnk.yearID AND sd.levelid = rnk.levelid AND rnk.termid = sd.termid
						 where st.IsDelete=0 and sd.termid=@termid and stdlv.LevelID=@levelid and stdlv.YearID=@yearid
--ORDER BY stdlv.LevelID, sd.termid
--where IsDelete=0 and termid=@termid and yearID=@yearid and levelid=@levelid
)
GO
/****** Object:  UserDefinedFunction [dbo].[GetActiveLevelCourse]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create function [dbo].[GetActiveLevelCourse]
()
returns table
as
return 
(
select courseid,LevelID,IsActive from
(
select ID,LevelID,crs.courseid,coursename,termID,IsActive from LevelCourse
 inner join course crs on LevelCourse.CourseID=crs.courseid

 )as tmp 
 where IsActive=1
 group by courseid,LevelID,IsActive
 )
GO
/****** Object:  Table [dbo].[Pages]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Pages](
	[PageID] [int] NOT NULL,
	[PageName] [nvarchar](50) NULL,
	[PageTitle] [nvarchar](50) NULL,
	[IsActive] [bit] NULL,
	[PageCategoryID] [int] NULL,
 CONSTRAINT [PK_Pages] PRIMARY KEY CLUSTERED 
(
	[PageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PageCategories]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PageCategories](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NULL,
	[ActiveStatus] [bit] NULL,
	[Note] [nvarchar](50) NULL,
	[UserID] [int] NULL,
	[AddingDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[EditDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[DeletingUserID] [int] NULL,
	[DeletingDate] [datetime] NULL,
 CONSTRAINT [PK_PageCategories] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PageOperaions]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PageOperaions](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PageID] [int] NULL,
	[OperationName] [nvarchar](50) NULL,
	[OperationSymbol] [nvarchar](50) NULL,
	[IsActive] [bit] NULL,
 CONSTRAINT [PK_PageOperaions] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PageOperationRoles]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PageOperationRoles](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PageOperationID] [int] NULL,
	[RoleID] [int] NULL,
	[IsActive] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[UserID] [int] NULL,
	[AddingDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[EditDate] [datetime] NULL,
	[DeletingUserID] [int] NULL,
	[DeletingDate] [datetime] NULL,
 CONSTRAINT [PK_PageOperationRoles] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[RoleAuthorizedOperations]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create FUNCTION [dbo].[RoleAuthorizedOperations]
(	
	-- Add the parameters for the function here
	@RoleID int
)
RETURNS TABLE 
AS
RETURN 
(
	-- Add the SELECT statement with parameter references here
	
SELECT      --  por.ID
            --, por.PageOperationID
			--, por.RoleID
			--, case when isnull(por.IsDeleted,0)=1 or isnull(por.IsActive ,0)=0 then 0 else 1 end as IsAuthorized
			--, po.PageID
			 po.OperationSymbol
			--, isnull(po.IsActive,0) AS IsPageOperationActive
			, pg.PageName
			--, case when isnull(pg.IsActive,0)=0 or isnull(pc.ActiveStatus ,0)=0 or isnull(pc.IsDeleted ,0)=1 then 0 else 1 end   AS IsPageActive
			--, pg.PageCategoryID
			--, isnull(pc.ActiveStatus,0) IsPgCategoryActive
			--, isnull(pc.IsDeleted,0) AS IsPgCateGoryDeleted
FROM            PageOperationRoles AS por INNER JOIN
                         PageOperaions AS po ON por.PageOperationID = po.ID INNER JOIN
                         Pages AS pg ON po.PageID = pg.PageID INNER JOIN
                         PageCategories AS pc ON pg.PageCategoryID = pc.ID
WHERE        (por.RoleID = @RoleID) AND (por.IsActive = 1) AND (po.IsActive = 1) AND (pg.IsActive = 1) AND (pc.ActiveStatus = 1) AND (ISNULL(pc.IsDeleted, 0) = 0)
)


GO
/****** Object:  UserDefinedFunction [dbo].[GetTotalMinsGrade]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetTotalMinsGrade]()
returns table
return
select tmp.studentid,tmp.LevelID,tmp.YearID, SUM(ttmines) TotalMins  from 
(
select studentid,stlv.levelid,sum(sd.amontapsentcourse) as amontapsentcourse,lvc.CourseID,SUM(TotalAll) as Total,stlv.YearID,lvc.PlanID,
 sum(lvc.minDegree) as minDeg,sum(lvc.maxDegree) as maxDeg ,case when (SUM(TotalAll- minDegree))<0 then Abs(SUM(TotalAll- minDegree)) else 0 end ttmines
 from studentdegree sd 
 inner join LevelCourse lvc on sd.courseLevelID=lvc.ID
 inner join student st on sd.studentid=st.ID 
 inner join StudentLevels stlv on stlv.StdID=sd.studentid and stlv.YearID=sd.yearID
 where lvc.IsActive=1 and lvc.LevelID=sd.levelid and st.IsDelete=0
  group by studentid,stlv.levelid,lvc.CourseID,stlv.YearID,lvc.planID
 having SUM(TotalAll)<SUM( minDegree)
 ) tmp
 group by YearID,LevelID,studentid
GO
/****** Object:  View [dbo].[topstudent]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[topstudent]
AS
SELECT        sd.studentid, SUM(sd.TotalAll) AS total, sd.levelid, st.sgroup
FROM            dbo.studentdegree AS sd INNER JOIN
                         dbo.student AS st ON sd.studentid = st.ID
WHERE        (sd.courseLevelID IN
                             (SELECT        ID
                                FROM            dbo.LevelCourse
                                WHERE        (IsActive = 1) AND (LevelID = sd.levelid))) AND (sd.termid = 1)
GROUP BY sd.studentid, sd.levelid, st.sgroup
GO
/****** Object:  View [dbo].[top10degree]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[top10degree]
AS
SELECT DISTINCT total, levelid, sgroup
FROM            dbo.topstudent
GO
/****** Object:  View [dbo].[trtaib]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[trtaib]
AS
SELECT        total, levelid,sgroup, CASE ROW_NUMBER() OVER (partition BY levelid,sgroup
ORDER BY total DESC) 
WHEN 1 THEN 'الاول' WHEN 2 THEN 'الثاني' WHEN 3 THEN 'الثالث' WHEN 4 THEN 'الرابع' WHEN 5 THEN 'الخامس' WHEN 6 THEN 'السادس' WHEN 7 THEN 'السابع' WHEN 8 THEN 'الثامن' WHEN 9 THEN 'التاسع' WHEN 10 THEN 'العاشر' ELSE ' ' END AS trtaib
FROM            top10degree
GO
/****** Object:  View [dbo].[studentwithtrtaib]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[studentwithtrtaib]
AS
SELECT        std.studentid, std.total, tr.trtaib, tr.levelid, std.sgroup
FROM            dbo.topstudent AS std INNER JOIN
                         dbo.trtaib AS tr ON std.total = tr.total AND std.levelid = tr.levelid AND tr.sgroup = std.sgroup
GO
/****** Object:  View [dbo].[beginresult]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* and levelid<3*/
CREATE VIEW [dbo].[beginresult]
AS
SELECT DISTINCT sd.studentid, sd.levelid, CASE WHEN (sd.total >= 25) THEN '1' ELSE '0' END AS result
FROM            dbo.studentdegree AS sd INNER JOIN
                         dbo.levels AS lv ON sd.levelid = lv.levelid
WHERE        (sd.courseid NOT IN
                             (SELECT        courseid
                                FROM            dbo.studentdegree
                                WHERE        (courseid > lv.numbercourseterm1)))
GO
/****** Object:  View [dbo].[StudentData]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*inner join studentwithtrtaib tr on tr.studentid=st.ID*/
CREATE VIEW [dbo].[StudentData]
AS
SELECT        st.ID, st.SeqID, st.sname, stdlvl.LevelID, st.BirthPlace, st.LastName, st.gender, st.natianalityt, stdlvl.YearID, stdlvl.lvlState, grp.GroupName AS sgroup, stdlvl.GroupID, st.bdate, st.stdImage, st.Village, st.Notes, st.IsDelete, 
                         st.AddDate, st.EditDate, st.DeletDate, st.UserAdd, st.UserEdit, st.UserDelete, cr.courseid, cr.coursename, trm.termid, trm.termname, lvl.levelname, std.deg1, std.deg2, std.deg3, std.deg4, std.forFull, ISNULL
                             ((SELECT        deg1
                                 FROM            dbo.studentdegree
                                 WHERE        (studentid = st.ID) AND (courseLevelID = lvcr.ID) AND (termid = 1)), 0) AS Deg1Term1, ISNULL
                             ((SELECT        deg2
                                 FROM            dbo.studentdegree AS studentdegree_5
                                 WHERE        (studentid = st.ID) AND (courseLevelID = lvcr.ID) AND (termid = 1)), 0) AS Deg2Term1, ISNULL
                             ((SELECT        TotalAll
                                 FROM            dbo.studentdegree AS studentdegree_4
                                 WHERE        (studentid = st.ID) AND (courseLevelID = lvcr.ID) AND (termid = 1)), 0) AS TotalTerm1, ISNULL
                             ((SELECT        deg1
                                 FROM            dbo.studentdegree AS studentdegree_3
                                 WHERE        (studentid = st.ID) AND (courseLevelID = lvcr.ID) AND (termid = 2)), 0) AS Deg1Term2, ISNULL
                             ((SELECT        deg2
                                 FROM            dbo.studentdegree AS studentdegree_2
                                 WHERE        (studentid = st.ID) AND (courseLevelID = lvcr.ID) AND (termid = 2)), 0) AS Deg2Term2, ISNULL
                             ((SELECT        TotalAll
                                 FROM            dbo.studentdegree AS studentdegree_1
                                 WHERE        (studentid = st.ID) AND (courseLevelID = lvcr.ID) AND (termid = 2)), 0) AS TotalTerm2, std.TotalAll, sy.studyYearArab, lvcr.IsActive AS courseActive
FROM            dbo.student AS st INNER JOIN
                         dbo.StudentLevels AS stdlvl ON st.ID = stdlvl.StdID INNER JOIN
                         dbo.studentdegree AS std ON st.ID = std.studentid AND std.levelid = st.levelid INNER JOIN
                         dbo.LevelCourse AS lvcr ON std.courseLevelID = lvcr.ID INNER JOIN
                         dbo.levels AS lvl ON lvcr.LevelID = lvl.levelid AND st.levelid = lvl.levelid INNER JOIN
                         dbo.course AS cr ON lvcr.CourseID = cr.courseid INNER JOIN
                         dbo.terms AS trm ON trm.termid = std.termid INNER JOIN
                         dbo.studyYear AS sy ON std.yearID = sy.seqid AND sy.seqid = stdlvl.YearID INNER JOIN
                         dbo.[Group] AS grp ON grp.ID = stdlvl.GroupID
GO
/****** Object:  View [dbo].[finalResult]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[finalResult]
AS
SELECT DISTINCT studentid, ISNULL
                             ((SELECT        0 AS Expr1
                                 FROM            dbo.beginresult
                                 WHERE        (result = 0) AND (result <> 1) AND (studentid = dbo.studentdegree.studentid)), 1) AS result
FROM            dbo.studentdegree
GO
/****** Object:  View [dbo].[studentDegreeV]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[studentDegreeV]
AS
SELECT        dbo.student.ID, dbo.student.sname, dbo.student.levelid, dbo.student.BirthPlace, dbo.student.LastName, dbo.student.gender, dbo.student.natianalityt, dbo.student.yearid, dbo.levels.levelname, dbo.terms.termname, 
                         dbo.studyYear.studyYearEngl, dbo.studentdegree.deg1, dbo.studentdegree.deg2, dbo.studentdegree.total, dbo.studentdegree.studentid, dbo.course.coursename AS cname, dbo.studentdegree.deg3, dbo.course.courseid, 
                         dbo.studentwithtrtaib.trtaib, dbo.finalResult.result, dbo.studentdegree.deg4, dbo.student.SeqID, dbo.student.sgroup, dbo.student.bdate, dbo.studentdegree.total2
FROM            dbo.student INNER JOIN
                         dbo.levels ON dbo.student.levelid = dbo.levels.levelid INNER JOIN
                         dbo.studentdegree ON dbo.student.ID = dbo.studentdegree.studentid AND dbo.levels.levelid = dbo.studentdegree.levelid INNER JOIN
                         dbo.studyYear ON dbo.student.yearid = dbo.studyYear.seqid INNER JOIN
                         dbo.course ON dbo.studentdegree.courseID = dbo.course.courseid INNER JOIN
                         dbo.terms ON dbo.studentdegree.termid = dbo.terms.termid INNER JOIN
                         dbo.studentwithtrtaib ON dbo.studentwithtrtaib.studentid = dbo.studentdegree.studentid INNER JOIN
                         dbo.finalResult ON dbo.finalResult.studentid = dbo.studentdegree.studentid
GO
/****** Object:  UserDefinedFunction [dbo].[GetResultFinalFunction]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION [dbo].[GetResultFinalFunction]
(	
	-- Add the parameters for the function here
	@yearid int,
	@levelid int,
	@studentid int
)
RETURNS TABLE 
AS
RETURN 
(
	select
  sdeg.stdid
  , sdeg.sname
  , sdeg.LastName
  , sdeg.levelid
  , sdeg.bdate
  , sdeg.BirthPlace
  , sdeg.gender
  , sdeg.sgroup
  , sdeg.GroupID
  , sdeg.lvlState
  , sdeg.IsLeave
  , sdeg.SeqID
  , sdeg.natianalityt
  , sdeg.levelname
 -- , 
 --sdeg.stdid
 --         , sdeg.sname
 --         , sdeg.LastName
	--	  , sdeg.levelid
	--	  , sdeg.bdate
	--	  , sdeg.BirthPlace
	--	  , sdeg.gender
	--	  , sdeg.sgroup
	--	  , sdeg.GroupID
 --         , sdeg.lvlState
	--	  , sdeg.IsLeave
 --         , sdeg.SeqID
	--	  , sdeg.natianalityt
	--	  , sdeg.levelname 
          , SUM(CASE WHEN sdeg.CourseID = 1 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS QrnDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 1 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS QrnDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 1   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS QrnForFull
		  , SUM(CASE WHEN sdeg.CourseID = 2 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS IslamicDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 2 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END)   AS IslamicDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 2   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS IslamicForFull
		  , SUM(CASE WHEN sdeg.CourseID = 3 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS arDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 3 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS arDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 3   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS ArForFull
		  , SUM(CASE WHEN sdeg.CourseID = 4 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS EnDegTotal1 
          , SUM(CASE WHEN sdeg.CourseID = 4 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS EnDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 4   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS EnForFull
		  , SUM(CASE WHEN sdeg.CourseID = 5 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS mathDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 5 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS mathDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 5   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS MathForFull
		  , SUM(CASE WHEN sdeg.CourseID = 6 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS scoDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 6 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS scoDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 6   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS ScoForFull 
          , SUM(CASE WHEN sdeg.CourseID = 7 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS sciDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 7 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS sciDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 7   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS SciForFull
		  , SUM(CASE WHEN sdeg.CourseID = 8 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS compDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 8 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS compDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 8   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS CompForFull
		  , SUM(CASE WHEN sdeg.CourseID = 9 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS artDegTotal1 
          , SUM(CASE WHEN sdeg.CourseID = 9 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS artDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 9   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS ArtForFull
		  , SUM(CASE WHEN sdeg.CourseID = 10 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END)AS sportDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 10 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS sportDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 10   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS SportForFull
		  ,isnull(SUM(case when (sdeg.forfullterm1+sdeg.forfullterm2)>0 then 1 else 0 end ),0) CountCourseForFull
		  ,SUm(sdeg.forfullterm1+sdeg.forfullterm2) TotalAllForFull
		  , lvlsFunc.curseCount AS LevelCrsCounts
          , isnull(rnk.coursFialCount,0) coursFialCount
		  , isnull(rnk.amontapsentcourse,0) amontapsentcourse
		  , rnk.TotalAll AS ttl
		  , ROUND(rnk.avgst, 2) AS prcnt
		  ,case when isnull(rnk.coursFialCount,0)<=0 then rnk.StudentRamk else '' end StudentRamk
		  ,case when isnull(rnk.coursFialCount,0)<=0 then rnk.GroupIDStudentRamk else '' end GroupIDStudentRamk
		  , sdeg.yearID
          , CASE WHEN isnull(rnk.amontapsentcourse,0) > 0 THEN '3' WHEN isnull(rnk.[coursFialCount],0) >= 1 THEN '2' WHEN isnull(rnk.coursFialCount,0) <= 0 THEN '1' END AS ResultTxt
          , CASE WHEN sdeg.gender = 'انثى' THEN 2 ELSE 1 END AS genderNumber

 from
(
select 
st.ID as stdid,st.sname,st.SeqID,st.BirthPlace,st.LastName,st.gender,st.natianalityt,stlv.lvlState,grp.GroupName as sgroup
,stlv.GroupID,
st.bdate,st.Village,st.Notes,st.IsDelete,isnull(st.IsLeave,0) as IsLeave,
cr.courseid,
cr.coursename,
  sum( case when tr.termid=1 then sd.deg1 else 0 end) as deg1term1 ,
 sum( case when tr.termid=2 then sd.deg1 else 0 end) as deg1term2,
 sum( case when tr.termid=1 then sd.deg2 else 0 end) as deg2term1,
 sum( case when tr.termid=2 then sd.deg2 else 0 end) as deg2term2,
 sum( case when tr.termid=1 then sd.deg3 else 0 end) as deg3term1,
 sum( case when tr.termid=2 then sd.deg3 else 0 end) as deg3term2,
 sum( case when tr.termid=1 then sd.deg4 else 0 end) as deg4term1,
 sum( case when tr.termid=2 then sd.deg4 else 0 end) as deg4term2,
 sum( case when tr.termid=1 then sd.forFull else 0 end) as forfullterm1,
 sum( case when tr.termid=2 then sd.forFull else 0 end) as forfullterm2,
 sum( case when tr.termid=1 then sd.TotalAll else 0 end) as TotalAllterm1,
 sum( case when tr.termid=2 then sd.TotalAll else 0 end) as TotalAllterm2,
 --SUM(lvc.minDegree) mindeg,
lvl.levelid,lvl.levelname ,
sty.seqid as yearID,
sty.studyYearEngl,
lvc.PlanID

from studentdegree sd inner join student st on sd.studentid=st.ID
inner join LevelCourse lvc on sd.courseLevelID=lvc.ID 
inner join levels lvl on lvc.LevelID=lvl.levelid
inner join course cr on lvc.CourseID=cr.courseid 
inner join terms tr on sd.termid=tr.termid and lvc.termID=tr.termid
 inner join StudentLevels stlv on st.ID=stlv.StdID and sd.levelid=stlv.LevelID 
inner join studyYear sty on sd.yearID=sty.seqid and stlv.YearID=sty.seqid
inner join dbo.[Group] grp on grp.ID=stlv.GroupID
group by st.ID,st.sname,st.SeqID,st.BirthPlace,st.LastName,st.gender,st.natianalityt,stlv.lvlState,grp.GroupName,stlv.GroupID,
st.bdate,st.Village,st.Notes,st.IsDelete,st.IsLeave,cr.courseid,cr.coursename,lvl.levelid,levelname,sty.seqid,sty.studyYearEngl,lvc.PlanID
) as sdeg inner join [dbo].[GetRankWithAvrage]() rnk 

on rnk.stdid=sdeg.stdid and sdeg.levelid=rnk.levelid and sdeg.yearID=rnk.yearID
inner join getCountCourseLevel() lvlsFunc on sdeg.levelid=lvlsFunc.LevelID
where sdeg.IsDelete=0 and sdeg.levelid=@levelid and sdeg.yearID=@yearid --and sdeg.stdid=case when @studentid>0 then @studentid else sdeg.stdid end
group by sdeg.stdid
          , sdeg.sname
          , sdeg.LastName
		  , sdeg.levelid
		  , sdeg.bdate
		  , sdeg.BirthPlace
		  , sdeg.gender
		  , sdeg.sgroup
		  , sdeg.GroupID
          , sdeg.lvlState
		  , sdeg.IsLeave
          , sdeg.SeqID
		  , sdeg.natianalityt
		  , sdeg.levelname 
		  , lvlsFunc.curseCount
		  , rnk.coursFialCount
		  , rnk.amontapsentcourse
		  , rnk.TotalAll 
		  , ROUND(rnk.avgst, 2) 
		  , rnk.StudentRamk
		  ,rnk.GroupIDStudentRamk
		  , sdeg.yearID 
)
GO
/****** Object:  View [dbo].[StudentPrif]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[StudentPrif]
AS
SELECT        st.ID, st.sname, cr.courseid, cr.coursename, SUM(std.TotalAll) AS totalAll, st.levelid
FROM            dbo.studentdegree AS std INNER JOIN
                         dbo.LevelCourse AS lvcr ON std.courseLevelID = lvcr.ID INNER JOIN
                         dbo.student AS st ON std.studentid = st.ID INNER JOIN
                         dbo.course AS cr ON lvcr.CourseID = cr.courseid
WHERE        (std.courseLevelID IN
                             (SELECT        ID
                                FROM            dbo.LevelCourse
                                WHERE        (IsActive = 1) AND (LevelID = std.levelid)))
GROUP BY st.ID, st.sname, cr.courseid, cr.coursename, st.levelid
GO
/****** Object:  UserDefinedFunction [dbo].[GetStatisticalStudent]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetStatisticalStudent]
(@yearID int)
returns table
as
return
(
select LevelID,levelname,
sum(contStudentNoLeaveMail) contStudentNoLeaveMail
,sum(contStudentNoLeaveFmail) contStudentNoLeaveFmail
,sum(contStudentLeaveMail) contStudentLeaveMail
,sum(contStudentLeaveFmail) contStudentLeaveFmail
,COUNT(GroupID) contGroup from
(select stl.LevelID,lvl.levelname,stl.GroupID,
 SUM(case when isnull(st.IsLeave,0)=0 and st.gender=N'ذكر' then 1 else 0 end) as contStudentNoLeaveMail
 ,SUM(case when isnull(st.IsLeave,0)=1 and st.gender=N'ذكر' then 1 else 0 end) contStudentLeaveMail
 ,SUM(case when isnull(st.IsLeave,0)=0 and st.gender=N'انثى' then 1 else 0 end) as contStudentNoLeaveFmail
 ,SUM(case when isnull(st.IsLeave,0)=1 and st.gender=N'انثى' then 1 else 0 end) contStudentLeaveFmail

from StudentLevels stl 
inner join student st on st.ID=stl.StdID 
inner join levels lvl on stl.LevelID=lvl.levelid
where stl.YearID=@yearID and st.IsDelete=0
group by stl.LevelID,lvl.levelname,stl.GroupID
) as tmp
group by LevelID,levelname
)
GO
/****** Object:  Table [dbo].[Plans]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Plans](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](60) NULL,
	[Descript] [nvarchar](100) NULL,
	[sadte] [date] NULL,
	[edate] [date] NULL,
	[active] [bit] NULL,
	[IsRemoved] [bit] NULL,
	[InstDeptSpecID] [int] NULL,
	[YearID] [int] NULL,
 CONSTRAINT [PK_Plans] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[StudentHorizentalV]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[StudentHorizentalV]
AS
select * 
       ,round((ttl/LevelCrsCounts),2) prcnt
       ,CASE WHEN amontapsentcourse > 0 and [coursFialCount]>0 THEN '3' WHEN [coursFialCount] >= 1 THEN '2' WHEN coursFialCount <= 0 THEN '1' END AS ResultTxt from (


SELECT        
  sd.studentid  stdid
, st.sname sname
, st.LastName
, sd.levelid
, st.bdate
, st.BirthPlace
, st.gender
, stl.sgroup
, stl.GroupID
, stl.lvlState
, st.IsLeave
, st.SeqID
, st.natianalityt
--, sdeg.levelname, 
, (select lv.levelname from levels lv where lv.levelid=sd.levelid) levelname

,sum(case when sd.termid=1 and sd.courseID=1 then sd.TotalAll else 0 end) QrnDegTotal1
,sum(case when sd.termid=2 and sd.courseID=1 then sd.TotalAll else 0 end) QrnDegTotal2
,sum(case when sd.courseID=1 then sd.forFull else 0 end) qrnForFull
,sum(case when sd.courseID=1 then sd.TotalAll else 0 end) qrnTotal

,sum(case when sd.termid=1 and sd.courseID=2 then sd.TotalAll else 0 end) IslamicDegTotal1
,sum(case when sd.termid=2 and sd.courseID=2 then sd.TotalAll else 0 end) IslamicDegTotal2
,sum(case when sd.courseID=2 then sd.forFull else 0 end) IslamicForFull
,sum(case when sd.courseID=2 then sd.TotalAll else 0 end) IslamicTotal

,sum(case when sd.termid=1 and sd.courseID=3 then sd.TotalAll else 0 end) arDegTotal1
,sum(case when sd.termid=2 and sd.courseID=3 then sd.TotalAll else 0 end) arDegTotal2
,sum(case when sd.courseID=3 then sd.forFull else 0 end) ArabicForFull
,sum(case when sd.courseID=3 then sd.TotalAll else 0 end) ArabicTotal

,sum(case when sd.termid=1 and sd.courseID=4 then sd.TotalAll else 0 end) EnDegTotal1
,sum(case when sd.termid=2 and sd.courseID=4 then sd.TotalAll else 0 end) EnDegTotal2
,sum(case when sd.courseID=4 then sd.forFull else 0 end) EnglishForFull
,sum(case when sd.courseID=4 then sd.TotalAll else 0 end) EnglishTotal

,sum(case when sd.termid=1 and sd.courseID=5 then sd.TotalAll else 0 end) mathDegTotal1
,sum(case when sd.termid=2 and sd.courseID=5 then sd.TotalAll else 0 end) mathDegTotal2
,sum(case when sd.courseID=5 then sd.forFull else 0 end) MathForFull
,sum(case when sd.courseID=5 then sd.TotalAll else 0 end) MathTotal

,sum(case when sd.termid=1 and sd.courseID=6 then sd.TotalAll else 0 end) scoDegTotal1
,sum(case when sd.termid=2 and sd.courseID=6 then sd.TotalAll else 0 end) scoDegTotal2
,sum(case when sd.courseID=6 then sd.forFull else 0 end) ScoForFull
,sum(case when sd.courseID=6 then sd.TotalAll else 0 end) ScoTotal

,sum(case when sd.termid=1 and sd.courseID=7 then sd.TotalAll else 0 end) sciDegTotal1
,sum(case when sd.termid=2 and sd.courseID=7 then sd.TotalAll else 0 end) sciDegTotal2
,sum(case when sd.courseID=7 then sd.forFull else 0 end) SciForFull
,sum(case when sd.courseID=7 then sd.TotalAll else 0 end) SciTotal

,sum(case when sd.termid=1 and sd.courseID=8 then sd.TotalAll else 0 end) compDegTotal1
,sum(case when sd.termid=2 and sd.courseID=8 then sd.TotalAll else 0 end) compDegTotal2
,sum(case when sd.courseID=8 then sd.forFull else 0 end) ComputerForFull
,sum(case when sd.courseID=8 then sd.TotalAll else 0 end) CompTotal

,sum(case when sd.termid=1 and sd.courseID=9 then sd.TotalAll else 0 end) artDegTotal1
,sum(case when sd.termid=2 and sd.courseID=9 then sd.TotalAll else 0 end) artDegTotal2
,sum(case when sd.courseID=9 then sd.forFull else 0 end) ArtForFull
,sum(case when sd.courseID=9 then sd.TotalAll else 0 end) ArtTotal

,sum(case when sd.termid=1 and sd.courseID=10 then sd.TotalAll else 0 end) sportDegTotal1
,sum(case when sd.termid=2 and sd.courseID=10 then sd.TotalAll else 0 end) sportDegTotal2
,sum(case when sd.courseID=10 then sd.forFull else 0 end) SportForFull
,sum(case when sd.courseID=10 then sd.TotalAll else 0 end) SportTotal

,sum(case when sd.termid=1 and sd.courseID=11 then sd.TotalAll else 0 end) Physic1
,sum(case when sd.termid=2 and sd.courseID=11 then sd.TotalAll else 0 end) Physic2
,sum(case when sd.courseID=11 then sd.forFull else 0 end) PhysicForFull
,sum(case when sd.courseID=11 then sd.TotalAll else 0 end) PhysicTotal

,sum(case when sd.termid=1 and sd.courseID=12 then sd.TotalAll else 0 end) chemistry1
,sum(case when sd.termid=2 and sd.courseID=12 then sd.TotalAll else 0 end) chemistry2
,sum(case when sd.courseID=12 then sd.forFull else 0 end) chemistryForFull
,sum(case when sd.courseID=12 then sd.TotalAll else 0 end) chemistryTotal

,sum(case when sd.termid=1 and sd.courseID=13 then sd.TotalAll else 0 end) Biology1
,sum(case when sd.termid=2 and sd.courseID=13 then sd.TotalAll else 0 end) Biology2
,sum(case when sd.courseID=13 then sd.forFull else 0 end) BiologyForFull
,sum(case when sd.courseID=13 then sd.TotalAll else 0 end) BiologyTotal

,sum(case when sd.termid=1 and sd.courseID=14 then sd.TotalAll else 0 end) Geographic1
,sum(case when sd.termid=2 and sd.courseID=14 then sd.TotalAll else 0 end) Geographic2
,sum(case when sd.courseID=14 then sd.forFull else 0 end) GeographicFull
,sum(case when sd.courseID=14 then sd.TotalAll else 0 end) GeographicTotal

,sum(case when sd.termid=1 and sd.courseID=15 then sd.TotalAll else 0 end) History1
,sum(case when sd.termid=2 and sd.courseID=15 then sd.TotalAll else 0 end) History2
,sum(case when sd.courseID=15 then sd.forFull else 0 end) HistoryFull
,sum(case when sd.courseID=15 then sd.TotalAll else 0 end) History1Total

,sum(case when sd.termid=1 and sd.courseID=16 then sd.TotalAll else 0 end) Community1
,sum(case when sd.termid=2 and sd.courseID=16 then sd.TotalAll else 0 end) Community2
,sum(case when sd.courseID=16 then sd.forFull else 0 end) Community1Full
,sum(case when sd.courseID=16 then sd.TotalAll else 0 end) Community1Total


,isnull(SUM(case when (sd.forFull>0) then 1 else 0 end ),0) CountCourseForFull
,(select count(*)  from dbo.LevelCourse lvc where lvc.LevelID=sd.levelid and lvc.IsActive=1 and lvc.termID=2 and lvc.PlanID =(select p.ID from Plans p where p.YearID=sd.yearID)) LevelCrsCounts
,(select sum(d1.TotalAll) from studentdegree d1 inner join dbo.LevelCourse lvc on lvc.ID=d1.courseLevelID where lvc.IsActive=1 and d1.studentid=sd.studentid and d1.levelid=sd.levelid and d1.yearID=sd.yearID) ttl
,SUm(sd.forFull) TotalAllForFull
,DENSE_RANK() over ( partition by sd.yearid, sd.levelid order by sd.levelid,((select sum(d1.TotalAll) from studentdegree d1 inner join dbo.LevelCourse lvc on lvc.ID=d1.courseLevelID where lvc.IsActive=1 and d1.studentid=sd.studentid and d1.levelid=sd.levelid and d1.yearID=sd.yearID)
) desc) 
  as StudentRamkNumberByLevel
  ,(case  
DENSE_RANK() over ( partition by sd.yearid, sd.levelid order by sd.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end) 
  as RamkByLevelInner
  , 
DENSE_RANK() over ( partition by sd.yearid, sd.levelid,stl.GroupID order by sd.levelid,((select sum(d1.TotalAll) from studentdegree d1 inner join dbo.LevelCourse lvc on lvc.ID=d1.courseLevelID where lvc.IsActive=1 and d1.studentid=sd.studentid and d1.levelid=sd.levelid and d1.yearID=sd.yearID)
) desc) 
  as StudentRamkNumberByGroup
  ,(case  
DENSE_RANK() over ( partition by sd.yearid, sd.levelid,stl.GroupID order by sd.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end)  
  as RamkByGroupInner
  , CASE WHEN st.gender = 'انثى' THEN 2 ELSE 1 END AS genderNumber
,(select isnull( count(*),0) from studentdegree d1 inner join dbo.LevelCourse lvc on lvc.ID=d1.courseLevelID where lvc.IsActive=1 and d1.amontapsentcourse>0 and d1.studentid=sd.studentid and d1.levelid=sd.levelid and d1.yearID=sd.yearID) amontapsentcourse
,isnull((select isnull(cf.coursFialCount,0) from dbo.GetCourseFail() cf where cf.levelid=sd.levelid and cf.studentid=sd.studentid and cf.YearID=sd.yearID),0) coursFialCount
,(select isnull(count(*),0) from StudentLevels sl where sl.StdID=sd.studentid and sl.lvlState=N'معيد' AND SL.LevelID=SD.levelid and sl.YearID<=sd.yearID) countFailYear
,(select lv.LevelTypeID from levels lv where levelid=sd.levelid) LevelTypeID
,sd.yearID
from studentdegree sd inner join dbo.student st on st.ID=sd.studentid inner join dbo.StudentLevels stl on st.ID=stl.StdID and stl.LevelID=sd.levelid and stl.YearID=sd.yearID
 where --stl.YearID=@yearid and  
 st.IsDelete=0 --and stl.LevelID=@levelid  
GROUP BY sd.yearID, sd.levelid, sd.studentid 
       , st.sname
  , st.LastName
  --, st.levelid
  , st.bdate
  , st.BirthPlace
  , st.gender
  , stl.sgroup
  , stl.GroupID
  , stl.lvlState
  , st.IsLeave
  , st.SeqID
  , st.natianalityt
  ) tbl
GO
/****** Object:  UserDefinedFunction [dbo].[GetAnalyticResultForStident]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Function [dbo].[GetAnalyticResultForStident](@yearID int)
returns table 
as 
return
(select yearID,levelid,LevelTypeID,levelname
,SUM(case when genderNumber=1 then countSuccess else 0 end) countSuccessMail
,SUM(case when genderNumber=2 then countSuccess else 0 end) countSuccessFmail
,SUM(case when genderNumber=1 then countFail else 0 end)countFailMail
,SUM(case when genderNumber=2 then countFail else 0 end) countFailFmail
,SUM(case when genderNumber=1 then countApsent else 0 end)countApsentMail
,SUM(case when genderNumber=2 then countApsent else 0 end) countApsentFmail
,SUM(countFail) countFail
,SUM(countApsent) countApsent from
(select yearID,levelid,LevelTypeID,levelname,genderNumber,ResultTxt,
sum(case when ResultTxt=1 then 1 else 0 end) countSuccess
,sum(case when ResultTxt=2 then 1 else 0 end) countFail
,sum(case when ResultTxt=3 then 1 else 0 end) countApsent
from StudentHorizentalV
where yearID=@yearID
group by yearID,LevelTypeID,levelid,levelname,genderNumber,ResultTxt
) as tmp
group by yearID,LevelTypeID,levelid,levelname
)
GO
/****** Object:  Table [dbo].[RoomStudentInExam]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RoomStudentInExam](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[StdID] [int] NULL,
	[RoomID] [int] NULL,
	[LevelID] [int] NULL,
	[TermID] [int] NULL,
	[YearID] [int] NULL,
	[NumberPlace] [int] NULL,
	[NumperPass] [int] NULL,
	[PeriodID] [int] NULL,
 CONSTRAINT [PK_RoomStudentInExam] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[GetStudentDataForTermNew]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetStudentDataForTermNew](@TermID int,@YearID int ,@LevelID int)
returns table
as
return
(
--declare @trmID int=@TermID,@YerID int=@YearID,@lvlid int=@LevelID
select *, case when coursFialCount<=0 then RamkByGroupInner else '' end RamkByGroup
,case when coursFialCount<=0 then RamkByLevelInner else '' end RamkByLevel 
,round((ttl/LevelCrsCounts),2) avarage
,CASE WHEN amontapsentcourse > 0 and [coursFialCount]>0 THEN '3' WHEN [coursFialCount] >= 1 THEN '2' WHEN coursFialCount <= 0 THEN '1' END AS ResultTxt 

from
(select                
                       sd.studentid stdid
                      , st.sname
					  , st.LastName
					  , sd.levelid levelid
					  , st.bdate
					  , st.BirthPlace
					  , st.gender
					  , stl.sgroup
					  , stl.GroupID
					  , stl.lvlState
					  , isnull(st.IsLeave,0) IsLeave
					  , st.SeqID
					  ,(select rse.NumperPass from RoomStudentInExam rse where rse.TermID=sd.termid and rse.YearID=sd.yearID and rse.LevelID=sd.levelid and rse.StdID=sd.studentid) as NumberPass
					  , st.Village
					  , st.natianalityt
					  , (select lv.levelname from levels lv where lv.levelid=sd.levelid) levelname
					  ,sd.termid
					  , SUM(CASE WHEN sd.CourseID = 1  THEN sd.deg1 ELSE 0 END) AS Qrndeg1
					  , SUM(CASE WHEN sd.CourseID = 1  THEN sd.deg2 ELSE 0 END) AS Qrndeg2
					  , SUM(CASE WHEN sd.CourseID = 1  THEN sd.forFull ELSE 0 END) AS QrnForFull
					  , SUM(CASE WHEN sd.CourseID = 1  THEN sd.TotalAll ELSE 0 END) AS QrnTotalAll
					  , SUM(CASE WHEN sd.CourseID = 2  THEN sd.deg1 ELSE 0 END) AS Islamicdeg1
					  , SUM(CASE WHEN sd.CourseID = 2  THEN sd.deg2 ELSE 0 END) AS Islamicdeg2
					  , SUM(CASE WHEN sd.CourseID = 2  THEN sd.forFull ELSE 0 END) AS IslamicForFull
					  , SUM(CASE WHEN sd.CourseID = 2  THEN sd.TotalAll ELSE 0 END) AS IslamicTotalAll
					  , SUM(CASE WHEN sd.CourseID = 3  THEN sd.deg1 ELSE 0 END) AS ardeg1
					  , SUM(CASE WHEN sd.CourseID = 3  THEN sd.deg2 ELSE 0 END) AS ardeg2
					  , SUM(CASE WHEN sd.CourseID = 3  THEN sd.forFull ELSE 0 END) AS arForFull
					  , SUM(CASE WHEN sd.CourseID = 3  THEN sd.TotalAll ELSE 0 END) AS arTotalAll
					  , SUM(CASE WHEN sd.CourseID = 4  THEN sd.deg1 ELSE 0 END) AS Endeg1
					  , SUM(CASE WHEN sd.CourseID = 4  THEN sd.deg2 ELSE 0 END) AS Endeg2
					  , SUM(CASE WHEN sd.CourseID = 4  THEN sd.forFull ELSE 0 END) AS EnForFull
					  , SUM(CASE WHEN sd.CourseID = 4  THEN sd.TotalAll ELSE 0 END) AS EnTotalAll
					  , SUM(CASE WHEN sd.CourseID = 5  THEN sd.deg1 ELSE 0 END) AS mathdeg1
					  , SUM(CASE WHEN sd.CourseID = 5  THEN sd.deg2 ELSE 0 END) AS mathdeg2 
					  , SUM(CASE WHEN sd.CourseID = 5  THEN sd.forFull ELSE 0 END) AS mathForFull
					  , SUM(CASE WHEN sd.CourseID = 5  THEN sd.TotalAll ELSE 0 END) AS mathTotalAll
                      , SUM(CASE WHEN sd.CourseID = 6  THEN sd.deg1 ELSE 0 END) AS scodeg1
					  , SUM(CASE WHEN sd.CourseID = 6  THEN sd.deg2 ELSE 0 END) AS scodeg2
					  , SUM(CASE WHEN sd.CourseID = 6  THEN sd.forFull ELSE 0 END) AS scoForFull
					  , SUM(CASE WHEN sd.CourseID = 6  THEN sd.TotalAll ELSE 0 END) AS scoTotalAll
					  , SUM(CASE WHEN sd.CourseID = 7  THEN sd.deg1 ELSE 0 END) AS scideg1
					  , SUM(CASE WHEN sd.CourseID = 7  THEN sd.deg2 ELSE 0 END) AS scideg2
					  , SUM(CASE WHEN sd.CourseID = 7  THEN sd.forFull ELSE 0 END) AS sciForFull
					  , SUM(CASE WHEN sd.CourseID = 7  THEN sd.TotalAll ELSE 0 END) AS sciTotalAll
					  , SUM(CASE WHEN sd.CourseID = 8  THEN sd.deg1 ELSE 0 END) AS compdeg1 
                      , SUM(CASE WHEN sd.CourseID = 8  THEN sd.deg2 ELSE 0 END) AS compdeg2
					  , SUM(CASE WHEN sd.CourseID = 8  THEN sd.forFull ELSE 0 END) AS compForFull
					  , SUM(CASE WHEN sd.CourseID = 8  THEN sd.TotalAll ELSE 0 END) AS compTotalAll
					  , SUM(CASE WHEN sd.CourseID = 9  THEN sd.deg1 ELSE 0 END)  AS artdeg1
					  , SUM(CASE WHEN sd.CourseID = 9  THEN sd.deg2 ELSE 0 END) AS artdeg2
					  , SUM(CASE WHEN sd.CourseID = 9  THEN sd.forFull ELSE 0 END) AS artForFull
					  , SUM(CASE WHEN sd.CourseID = 9  THEN sd.TotalAll ELSE 0 END) AS artTotalAll
					  , SUM(CASE WHEN sd.CourseID = 10 THEN sd.deg1 ELSE 0 END) AS sportdeg1
					  , SUM(CASE WHEN sd.CourseID = 10 THEN sd.deg2 ELSE 0 END) AS sportdeg2
					  , SUM(CASE WHEN sd.CourseID = 10 THEN sd.forFull ELSE 0 END) AS sportForFull
					  , SUM(CASE WHEN sd.CourseID = 10 THEN sd.TotalAll ELSE 0 END) AS sportTotalAll

					  ,sum(case when sd.courseID=11 then sd.deg1 else 0 end) PhysicDeg1
                      ,sum(case when sd.courseID=11 then sd.deg2 else 0 end) PhysicDeg2
                      ,sum(case when sd.courseID=11 then sd.forFull else 0 end) PhysicForFull
                      ,sum(case when sd.courseID=11 then sd.TotalAll else 0 end) PhysicTotal
                      
                      ,sum(case when sd.courseID=12 then sd.deg1 else 0 end) chemistryDeg1
                      ,sum(case when sd.courseID=12 then sd.deg2 else 0 end) chemistryDeg2
                      ,sum(case when sd.courseID=12 then sd.forFull else 0 end) chemistryForFull
                      ,sum(case when sd.courseID=12 then sd.TotalAll else 0 end) chemistryTotal
                      
                      ,sum(case when sd.courseID=13 then sd.deg1 else 0 end) BiologyDeg1
                      ,sum(case when sd.courseID=13 then sd.deg2 else 0 end) BiologyDeg2
                      ,sum(case when sd.courseID=13 then sd.forFull else 0 end) BiologyForFull
                      ,sum(case when sd.courseID=13 then sd.TotalAll else 0 end) BiologyTotal

					  ,sum(case when sd.courseID=14 then sd.deg1 else 0 end) Geographic1
                      ,sum(case when sd.courseID=14 then sd.deg2 else 0 end) Geographic2
                      ,sum(case when sd.courseID=14 then sd.forFull else 0 end) GeographicForFull
                      ,sum(case when sd.courseID=14 then sd.TotalAll else 0 end) GeographicTotal

					  ,sum(case when sd.courseID=15 then sd.deg1 else 0 end) History1
                      ,sum(case when sd.courseID=15 then sd.deg2 else 0 end) History2
                      ,sum(case when sd.courseID=15 then sd.forFull else 0 end) HistoryFull
                      ,sum(case when sd.courseID=15 then sd.TotalAll else 0 end) History1Total
                      
                      ,sum(case when sd.courseID=16 then sd.deg1 else 0 end) Community1
                      ,sum(case when sd.courseID=16 then sd.deg2 else 0 end) Community2
                      ,sum(case when sd.courseID=16 then sd.forFull else 0 end) Community1Full
                      ,sum(case when sd.courseID=16 then sd.TotalAll else 0 end) Community1Total


					  , SUM(case when sd.forFull>0 then 1 else 0 end) AS CountForFullCourse
					  ,isnull(SUM(case when (sd.forFull)>0 then 1 else 0 end ),0) CountCourseForFull
					  ,SUm(sd.forFull) TotalAllForFull
					, (select count(*)  from dbo.LevelCourse lvc where lvc.LevelID=sd.levelid and lvc.IsActive=1 and lvc.termID=sd.termid and lvc.PlanID =(select p.ID from Plans p where p.YearID=sd.yearID)) AS LevelCrsCounts
					, isnull((select cf.coursFialCount from dbo.GetCourseFialPerTerm() cf where cf.levelid=sd.levelid and cf.termid=sd.termid and cf.studentid=sd.studentid and cf.YearID=sd.yearID),0) coursFialCount
		            , (select count(*) from studentdegree d1 inner join dbo.LevelCourse lvc on lvc.ID=d1.courseLevelID where lvc.IsActive=1 and d1.amontapsentcourse>0 and d1.studentid=sd.studentid and d1.levelid=sd.levelid and d1.termid=sd.termid and d1.yearID=sd.yearID) amontapsentcourse
					, (select sum(d1.TotalAll) from studentdegree d1 inner join dbo.LevelCourse lvc on lvc.ID=d1.courseLevelID where lvc.IsActive=1 and d1.studentid=sd.studentid and d1.levelid=sd.levelid and d1.termid=sd.termid and d1.yearID=sd.yearID) AS ttl
					--, ROUND(sdeg.avgst, 2) AS prcnt
					, (case  
DENSE_RANK() over ( partition by sd.yearid, sd.levelid,sd.termid,stl.GroupID order by sd.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end)  
  as RamkByGroupInner

					, (case  
DENSE_RANK() over ( partition by sd.yearid, sd.levelid,sd.termid order by sd.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end)  RamkByLevelInner
					, sd.yearID
					
					--, CASE WHEN isnull(sdeg.amontapsentcourse,0) > 0 THEN '3' WHEN isnull(sdeg.[coursFialCount],0) >= 1 THEN '2' WHEN isnull(sdeg.coursFialCount,0) <= 0 THEN '1' END AS ResultTxt
					, CASE WHEN st.gender = 'انثى' THEN 2 ELSE 1 END AS genderNumber 
					
					from studentdegree sd inner join dbo.student st on st.ID=sd.studentid inner join dbo.StudentLevels stl on st.ID=stl.StdID and stl.LevelID=sd.levelid and stl.YearID=sd.yearID
 where stl.YearID=@YearID and  sd.termid=@TermID and
 st.IsDelete=0 --and stl.LevelID=@LevelID  
group by               sd.yearID
                       ,sd.levelid
					   ,sd.termid
                      , sd.studentid
                      , st.sname
					  , st.LastName
					  
					  , st.bdate
					  , st.BirthPlace
					  , st.gender
					  , stl.sgroup
					  , stl.GroupID
					  , stl.lvlState
					  , st.IsLeave
					  , st.SeqID
					  , st.Village
					  , st.natianalityt
   ) tbl
   --order by tbl.yearID, tbl.levelid,tbl.gender desc ,tbl.sname,tbl.LastName
	)
GO
/****** Object:  UserDefinedFunction [dbo].[GetAnalyticResultForStidentForTerm]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Function [dbo].[GetAnalyticResultForStidentForTerm](@yearID int,@TermId int=0)
returns table 
as 
return

(
select yearID,levelid,levelname
,SUM(case when genderNumber=1 then countSuccess else 0 end) countSuccessMail
,SUM(case when genderNumber=2 then countSuccess else 0 end) countSuccessFmail
,SUM(case when genderNumber=1 then countFail else 0 end)countFailMail
,SUM(case when genderNumber=2 then countFail else 0 end) countFailFmail
,SUM(case when genderNumber=1 then countApsent else 0 end)countApsentMail
,SUM(case when genderNumber=2 then countApsent else 0 end) countApsentFmail
,SUM(countFail) countFail
,SUM(countApsent) countApsent from
(select yearID,levelid,levelname,genderNumber,ResultTxt,
sum(case when ResultTxt=1 then 1 else 0 end) countSuccess
,sum(case when ResultTxt=2 then 1 else 0 end) countFail
,sum(case when ResultTxt=3 then 1 else 0 end) countApsent
from GetStudentDataForTermNew(@TermId,@yearID,0)

group by yearID,levelid,levelname,genderNumber,ResultTxt
) as tmp
group by yearID,levelid,levelname
)
GO
/****** Object:  UserDefinedFunction [dbo].[getStudentForFinal]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ================================================
-- Template generated from Template Explorer using:
-- Create Multi-Statement Function (New Menu).SQL
--
-- Use the Specify Values for Template Parameters 
-- command (Ctrl-Shift-M) to fill in the parameter 
-- values below.
--
-- This block of comments will not be included in
-- the definition of the function.

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION [dbo].[getStudentForFinal]
(	
	-- Add the parameters for the function here
	@StudentID INT=0
)
RETURNS TABLE 

AS
	return
(select ID, sname,courseid,
coursename,yearid,studyYearArab ,levelid,levelname,BirthPlace,LastName,gender,natianalityt,sgroup,Village,Notes,bdate,
(select TotalAll from StudentData where StudentData.courseid=sdd.courseid and StudentData.ID=sdd.ID and termid=1 and StudentData.levelid=sdd.levelid and StudentData.yearid=sdd.yearid) as term1 
,(select TotalAll from StudentData where StudentData.courseid=sdd.courseid and StudentData.ID=sdd.ID and termid=2 and StudentData.levelid=sdd.levelid and StudentData.yearid=sdd.yearid) as term2 ,
SUM(TotalAll) as TotalAll,

(case when SUM(totalAll)<50 then 1  else 0 end
 ) as aps
,(select COUNT(courseid) from StudentPrif where totalAll<50 and ID=sdd.ID)as coursecount,
(case  
DENSE_RANK() over ( partition by sdd.levelid order by sdd.levelid,sum(sdd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end)  as StudentRamk
 from StudentData sdd where sdd.ID=(case when @StudentID>0 then @StudentID else sdd.ID end)
group by ID,courseid ,sname,coursename,yearid,studyYearArab,levelid,levelname,BirthPlace
,LastName,gender,natianalityt,sgroup,Village,Notes,bdate
	)
GO
/****** Object:  View [dbo].[totalforallstudentFinalResult]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view 
[dbo].[totalforallstudentFinalResult] as

SELECT studentid,sum( total+total2) alltotal,levelid from studentdegree
group by studentid,levelid
GO
/****** Object:  View [dbo].[distinctTopDegreeforfinal]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[distinctTopDegreeforfinal] as
select distinct alltotal,levelid from totalforallstudentFinalResult
GO
/****** Object:  View [dbo].[trtaibForFinalResult]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[trtaibForFinalResult] as
SELECT        alltotal, levelid, CASE ROW_NUMBER() OVER (partition BY levelid
ORDER BY alltotal DESC) 
WHEN 1 THEN 'الاول' WHEN 2 THEN 'الثاني' WHEN 3 THEN 'الثالث' WHEN 4 THEN 'الرابع' WHEN 5 THEN 'الخامس' WHEN 6 THEN 'السادس' WHEN 7 THEN 'السابع' WHEN 8 THEN 'الثامن' WHEN 9 THEN 'التاسع' WHEN 10 THEN 'العاشر' ELSE ' ' END AS trtaib
FROM            distinctTopDegreeforfinal
GO
/****** Object:  View [dbo].[allstudentwithtrtaibforfinal]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[allstudentwithtrtaibforfinal] as
SELECT        std.studentid, std.alltotal, tr.trtaib, tr.levelid
FROM            dbo.totalforallstudentFinalResult AS std INNER JOIN
                         dbo.trtaibForFinalResult AS tr ON std.alltotal = tr.alltotal AND std.levelid = tr.levelid
GO
/****** Object:  View [dbo].[amountCourseApsent]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*select studentid, count(courseid) from studentdegree
where total+total2<50
group by studentid*/
CREATE VIEW [dbo].[amountCourseApsent]
AS
SELECT        ID, levelid,
                             (SELECT        COUNT(courseid) AS Expr1
                                FROM            dbo.studentdegree
                                WHERE        (total + total2 < 50) AND (studentid = dbo.student.ID)) AS numbercourseapsent, CASE WHEN
                             (SELECT        COUNT(courseid) AS Expr1
                                FROM            dbo.studentdegree
                                WHERE        (total + total2 < 50) AND (studentid = dbo.student.ID)) <= 2 THEN 1 ELSE 0 END AS finalresult, CASE WHEN
                             (SELECT        COUNT(courseid) AS Expr1
                                FROM            dbo.studentdegree
                                WHERE        (total + total2 < 50) AND (studentid = dbo.student.ID)) <= 2 THEN 'ناجح' ELSE 'راسب' END AS txtresult
FROM            dbo.student
GO
/****** Object:  View [dbo].[studentFinalResult]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[studentFinalResult]
AS
SELECT        dbo.student.ID, dbo.student.sname, dbo.student.levelid, dbo.student.city, dbo.student.address, dbo.student.gender, dbo.student.natianalityt, dbo.student.yearid, dbo.levels.levelname, dbo.terms.termname, 
                         dbo.studyYear.studyYearEngl, dbo.studentdegree.deg1, dbo.studentdegree.deg2, dbo.studentdegree.total, dbo.studentdegree.studentid, dbo.course.coursename AS cname, dbo.studentdegree.deg3, dbo.course.courseid, 
                         dbo.allstudentwithtrtaibforfinal.trtaib, dbo.amountCourseApsent.finalresult, dbo.studentdegree.deg4, dbo.student.atdSeq, dbo.student.sgroup, dbo.student.bdate, dbo.studentdegree.total2, dbo.amountCourseApsent.txtresult, 
                         dbo.course.sortshowInReport
FROM            dbo.student INNER JOIN
                         dbo.levels ON dbo.student.levelid = dbo.levels.levelid INNER JOIN
                         dbo.studentdegree ON dbo.student.ID = dbo.studentdegree.studentid AND dbo.levels.levelid = dbo.studentdegree.levelid INNER JOIN
                         dbo.studyYear ON dbo.student.yearid = dbo.studyYear.seqid INNER JOIN
                         dbo.course ON dbo.studentdegree.courseid = dbo.course.courseid INNER JOIN
                         dbo.terms ON dbo.studentdegree.termid = dbo.terms.termid INNER JOIN
                         dbo.allstudentwithtrtaibforfinal ON dbo.allstudentwithtrtaibforfinal.studentid = dbo.studentdegree.studentid INNER JOIN
                         dbo.amountCourseApsent ON dbo.amountCourseApsent.ID = dbo.studentdegree.studentid
GO
/****** Object:  UserDefinedFunction [dbo].[GetFinalResultStudent]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetFinalResultStudent]
()
returns table
as
return
(
select bdt.*,rnk.coursFialCount,rnk.amontapsentcourse,rnk.avgst,rnk.StudentRamk,rnk.GroupIDStudentRamk,rnk.TotalAll 
from [dbo].[GetBasicStudentDataFinal]() bdt inner join [dbo].[GetRankWithAvrage]() rnk 
on rnk.stdid=bdt.stdid and bdt.levelid=rnk.levelid and bdt.yearID=rnk.yearID
)
GO
/****** Object:  UserDefinedFunction [dbo].[GetStudenFailMorethanOne]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[GetStudenFailMorethanOne]
(@YearID int,@levelid int)

returns table

as
return
(
select StdID,sname,LevelID,COUNT(YearID) countYearFial,levelname,sgroup,GroupID,
isnull((select crf.amontapsentcourse from GetCourseFail() crf where crf.studentid=StdID and crf.levelid=LevelID and crf.YearID=2010),0)  amontapsentcourse
 from
(
select stdlvl.StdID,(st.sname+' '+isnull(st.LastName,' '))as sname,stdlvl.LevelID,lvl.levelname,stdlvl.sgroup,stdlvl.GroupID,stdlvl.YearID,stdlvl.active
,stdlvl.lvlState ,crsfial.amontapsentcourse,crsfial.coursFialCount,crsfial.PlanID

from StudentLevels stdlvl
inner join GetCourseFail() crsfial on stdlvl.StdID=crsfial.studentid 
and stdlvl.LevelID=crsfial.levelid and stdlvl.YearID=crsfial.YearID
inner join student st on stdlvl.StdID=st.ID 
inner join levels lvl on stdlvl.LevelID=lvl.levelid
 where stdlvl.lvlState='معيد' and st.IsDelete=0 and crsfial.amontapsentcourse>=0 and stdlvl.YearID<=@YearID
 group by stdlvl.StdID,st.sname,st.LastName,stdlvl.LevelID,stdlvl.sgroup,stdlvl.GroupID,stdlvl.YearID,stdlvl.active,stdlvl.lvlState ,crsfial.amontapsentcourse,
 crsfial.coursFialCount,crsfial.PlanID,lvl.levelname
 )as tmp
 where levelID=@levelid
 group by LevelID,levelname,sname,StdID,sgroup,GroupID
 )
GO
/****** Object:  Table [dbo].[Codings]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Codings](
	[CodeID] [nvarchar](50) NOT NULL,
	[CodeNo] [int] NOT NULL,
	[CodeName] [nvarchar](50) NULL,
 CONSTRAINT [PK_Codings] PRIMARY KEY CLUSTERED 
(
	[CodeID] ASC,
	[CodeNo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CourseRegisterdLearners]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CourseRegisterdLearners](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CourseRegLnrSeqID] [int] NULL,
	[LearnerID] [int] NULL,
	[TargetTypeID] [int] NULL,
	[TargetID] [int] NULL,
	[CourseID] [bigint] NULL,
	[FeesAmount] [money] NULL,
	[DiscownPrcnt] [float] NULL,
	[DiscownAmount]  AS ([FeesAmount]*[DiscownPrcnt]),
	[NetFeesAmount]  AS ([FeesAmount]-[FeesAmount]*[DiscownPrcnt]),
	[Note] [nvarchar](100) NULL,
	[AddingDate] [datetime] NULL,
	[UserID] [int] NULL,
	[IsDeleted] [bit] NULL,
	[EditUserID] [int] NULL,
	[EditDate] [datetime] NULL,
	[DeletingUserID] [int] NULL,
	[DeletingDate] [datetime] NULL,
	[DeletingNote] [nvarchar](100) NULL,
 CONSTRAINT [PK_CourseRegisterdLearners] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ExamPeriod]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExamPeriod](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PeriodID] [int] NULL,
	[FromTime] [datetime] NULL,
	[ToTime] [datetime] NULL,
	[ExamTime] [int] NULL,
	[YearID] [int] NULL,
	[TermID] [int] NULL,
 CONSTRAINT [PK_ExamPeriodss] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[f1]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[f1](
	[name] [nvarchar](50) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[f2]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[f2](
	[F1] [float] NULL,
	[name] [nvarchar](50) NULL,
	[F3] [float] NULL,
	[F4] [nvarchar](255) NULL,
	[F5] [nvarchar](255) NULL,
	[F6] [nvarchar](255) NULL,
	[F7] [nvarchar](255) NULL,
	[F8] [nvarchar](255) NULL,
	[F9] [nvarchar](255) NULL,
	[F10] [nvarchar](255) NULL,
	[F11] [nvarchar](255) NULL,
	[F12] [nvarchar](255) NULL,
	[F13] [nvarchar](255) NULL,
	[F14] [nvarchar](255) NULL,
	[F15] [nvarchar](255) NULL,
	[F16] [nvarchar](255) NULL,
	[F17] [nvarchar](255) NULL,
	[F18] [nvarchar](255) NULL,
	[F19] [nvarchar](255) NULL,
	[F20] [nvarchar](255) NULL,
	[F21] [nvarchar](255) NULL,
	[F22] [nvarchar](255) NULL,
	[F23] [nvarchar](255) NULL,
	[F24] [nvarchar](255) NULL,
	[F25] [nvarchar](255) NULL,
	[F26] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[fa]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[fa](
	[F1] [float] NULL,
	[name] [nvarchar](255) NULL,
	[F3] [float] NULL,
	[F4] [nvarchar](255) NULL,
	[F5] [nvarchar](255) NULL,
	[F6] [nvarchar](255) NULL,
	[F7] [nvarchar](255) NULL,
	[F8] [nvarchar](255) NULL,
	[F9] [nvarchar](255) NULL,
	[F10] [nvarchar](255) NULL,
	[F11] [nvarchar](255) NULL,
	[F12] [nvarchar](255) NULL,
	[F13] [nvarchar](255) NULL,
	[F14] [nvarchar](255) NULL,
	[F15] [nvarchar](255) NULL,
	[F16] [nvarchar](255) NULL,
	[F17] [nvarchar](255) NULL,
	[F18] [nvarchar](255) NULL,
	[F19] [nvarchar](255) NULL,
	[F20] [nvarchar](255) NULL,
	[F21] [nvarchar](255) NULL,
	[F22] [nvarchar](255) NULL,
	[F23] [nvarchar](255) NULL,
	[F24] [nvarchar](255) NULL,
	[F25] [nvarchar](255) NULL,
	[F26] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[fif]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[fif](
	[F1] [float] NULL,
	[name] [nvarchar](50) NULL,
	[F3] [float] NULL,
	[F4] [nvarchar](255) NULL,
	[F5] [nvarchar](255) NULL,
	[F6] [nvarchar](255) NULL,
	[F7] [nvarchar](255) NULL,
	[F8] [nvarchar](255) NULL,
	[F9] [nvarchar](255) NULL,
	[F10] [nvarchar](255) NULL,
	[F11] [nvarchar](255) NULL,
	[F12] [nvarchar](255) NULL,
	[F13] [nvarchar](255) NULL,
	[F14] [nvarchar](255) NULL,
	[F15] [nvarchar](255) NULL,
	[F16] [nvarchar](255) NULL,
	[F17] [nvarchar](255) NULL,
	[F18] [nvarchar](255) NULL,
	[F19] [nvarchar](255) NULL,
	[F20] [nvarchar](255) NULL,
	[F21] [nvarchar](255) NULL,
	[F22] [nvarchar](255) NULL,
	[F23] [nvarchar](255) NULL,
	[F24] [nvarchar](255) NULL,
	[F25] [nvarchar](255) NULL,
	[F26] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[for1]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[for1](
	[F1] [float] NULL,
	[name] [nvarchar](50) NULL,
	[F3] [float] NULL,
	[F4] [float] NULL,
	[F5] [nvarchar](255) NULL,
	[F6] [nvarchar](255) NULL,
	[F7] [nvarchar](255) NULL,
	[F8] [nvarchar](255) NULL,
	[F9] [nvarchar](255) NULL,
	[F10] [nvarchar](255) NULL,
	[F11] [nvarchar](255) NULL,
	[F12] [nvarchar](255) NULL,
	[F13] [nvarchar](255) NULL,
	[F14] [nvarchar](255) NULL,
	[F15] [nvarchar](255) NULL,
	[F16] [nvarchar](255) NULL,
	[F17] [nvarchar](255) NULL,
	[F18] [nvarchar](255) NULL,
	[F19] [nvarchar](255) NULL,
	[F20] [nvarchar](255) NULL,
	[F21] [nvarchar](255) NULL,
	[F22] [nvarchar](255) NULL,
	[F23] [nvarchar](255) NULL,
	[F24] [nvarchar](255) NULL,
	[F25] [nvarchar](255) NULL,
	[F26] [nvarchar](255) NULL,
	[F27] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Gender]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Gender](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[GenderName] [nvarchar](10) NULL,
 CONSTRAINT [PK_Gender] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[GradeRank]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GradeRank](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[FromGrade] [float] NULL,
	[ToGrade] [float] NULL,
	[RankName] [nvarchar](50) NULL,
 CONSTRAINT [PK_GradeRank] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LectureWeek]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LectureWeek](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[NumLecture] [int] NULL,
	[LectureName] [nvarchar](50) NULL,
	[cDay] [date] NULL,
	[CdayNum] [int] NULL,
	[fromdate] [time](7) NULL,
	[toDate] [time](7) NULL,
	[courseid] [int] NULL,
	[levelid] [int] NULL,
	[termid] [int] NULL,
	[IDRoom] [int] NULL,
	[YearID] [int] NULL,
 CONSTRAINT [PK_LectureWeek] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Periods]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Periods](
	[ID] [int] NOT NULL,
	[Name] [nvarchar](50) NULL,
 CONSTRAINT [PK_ExamPeriod] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ProfilePermanences]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProfilePermanences](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TeatcherID] [int] NULL,
	[Cdate] [datetime] NULL,
	[NumberDay] [int] NULL,
	[NumberWeek] [int] NULL,
	[DayName] [nvarchar](50) NULL,
	[PringTime] [nvarchar](30) NULL,
	[LogoutTime] [nvarchar](30) NULL,
	[YearID] [int] NULL,
	[YearProfile] [int] NULL,
 CONSTRAINT [PK_ProfilePermanences] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ProfilePermanencesbk1]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProfilePermanencesbk1](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TeatcherID] [int] NULL,
	[Cdate] [datetime] NULL,
	[NumberDay] [int] NULL,
	[NumberWeek] [int] NULL,
	[DayName] [nvarchar](50) NULL,
	[PringTime] [nvarchar](30) NULL,
	[LogoutTime] [nvarchar](30) NULL,
	[YearID] [int] NULL,
	[YearProfile] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ProfilePermanencesbk112]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProfilePermanencesbk112](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TeatcherID] [int] NULL,
	[Cdate] [datetime] NULL,
	[NumberDay] [int] NULL,
	[NumberWeek] [int] NULL,
	[DayName] [nvarchar](50) NULL,
	[PringTime] [nvarchar](30) NULL,
	[LogoutTime] [nvarchar](30) NULL,
	[YearID] [int] NULL,
	[YearProfile] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[R_ConsultTransactions]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[R_ConsultTransactions](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[SeqID] [int] NULL,
	[RefrenceID] [nvarchar](10) NULL,
	[R_ConfirmID] [int] NULL,
	[PayAmount] [money] NULL,
	[CurrencyID] [int] NULL,
	[ExchangeRate] [money] NULL,
	[PayAmountLocal] [money] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[Notes] [nvarchar](200) NULL,
	[R_Status] [smallint] NULL,
	[UserID] [int] NULL,
	[IsDeleted] [bit] NULL,
	[EditUserID] [int] NULL,
	[EditDate] [datetime] NULL,
	[DeletingUserID] [int] NULL,
	[DeletingDate] [datetime] NULL,
	[IsShown] [bit] NULL,
	[AddingDate] [datetime] NULL,
	[DocType] [int] NULL,
	[DiscownPercent] [float] NULL,
	[TempInAccountID] [bigint] NULL,
	[TempConfAccountID] [bigint] NULL,
	[BranchID] [int] NULL,
	[CpcID] [int] NULL,
	[TempDescAccountID] [bigint] NULL,
	[TransDocTypeID] [int] NULL,
	[CourseName] [nvarchar](60) NULL,
	[CourseLimitNo] [smallint] NULL,
	[ResponsibleID] [int] NULL,
	[RespAccountID] [bigint] NULL,
	[PomotingID] [int] NULL,
	[PromotingName] [nvarchar](50) NULL,
	[PromotingAccountID] [bigint] NULL,
	[PromotingPercent] [float] NULL,
 CONSTRAINT [PK_R_ConsultTransactions] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Roles]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Roles](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NULL,
	[IsRoleActive] [bit] NULL,
 CONSTRAINT [PK_Roles] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Rooms]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Rooms](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[RoomName] [nvarchar](50) NULL,
	[IsShow] [bit] NULL,
	[NumberOfPlace] [int] NULL,
 CONSTRAINT [PK_Rooms] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[s1]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[s1](
	[F1] [float] NULL,
	[name] [nvarchar](50) NULL,
	[F3] [float] NULL,
	[F4] [nvarchar](255) NULL,
	[F5] [nvarchar](255) NULL,
	[F6] [nvarchar](255) NULL,
	[F7] [nvarchar](255) NULL,
	[F8] [nvarchar](255) NULL,
	[F9] [nvarchar](255) NULL,
	[F10] [nvarchar](255) NULL,
	[F11] [nvarchar](255) NULL,
	[F12] [nvarchar](255) NULL,
	[F13] [nvarchar](255) NULL,
	[F14] [nvarchar](255) NULL,
	[F15] [nvarchar](255) NULL,
	[F16] [nvarchar](255) NULL,
	[F17] [nvarchar](255) NULL,
	[F18] [nvarchar](255) NULL,
	[F19] [nvarchar](255) NULL,
	[F20] [nvarchar](255) NULL,
	[F21] [nvarchar](255) NULL,
	[F22] [nvarchar](255) NULL,
	[F23] [nvarchar](255) NULL,
	[F24] [nvarchar](255) NULL,
	[F25] [nvarchar](255) NULL,
	[F26] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[s2]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[s2](
	[F1] [float] NULL,
	[name] [nvarchar](50) NULL,
	[F3] [float] NULL,
	[F4] [nvarchar](255) NULL,
	[F5] [nvarchar](255) NULL,
	[F6] [nvarchar](255) NULL,
	[F7] [nvarchar](255) NULL,
	[F8] [nvarchar](255) NULL,
	[F9] [nvarchar](255) NULL,
	[F10] [nvarchar](255) NULL,
	[F11] [nvarchar](255) NULL,
	[F12] [nvarchar](255) NULL,
	[F13] [nvarchar](255) NULL,
	[F14] [nvarchar](255) NULL,
	[F15] [nvarchar](255) NULL,
	[F16] [nvarchar](255) NULL,
	[F17] [nvarchar](255) NULL,
	[F18] [nvarchar](255) NULL,
	[F19] [nvarchar](255) NULL,
	[F20] [nvarchar](255) NULL,
	[F21] [nvarchar](255) NULL,
	[F22] [nvarchar](255) NULL,
	[F23] [nvarchar](255) NULL,
	[F24] [nvarchar](255) NULL,
	[F25] [nvarchar](255) NULL,
	[F26] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[schoolData]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[schoolData](
	[seqid] [int] IDENTITY(1,1) NOT NULL,
	[schoolName] [nvarchar](50) NULL,
	[city] [nvarchar](50) NULL,
	[gover] [nvarchar](50) NULL,
	[LogoImage] [image] NULL,
	[AdminSchool] [int] NULL,
	[Village] [nvarchar](50) NULL,
	[HeaderExam] [nvarchar](50) NULL,
	[AdminCity] [nvarchar](50) NULL,
	[Appropriate] [nvarchar](50) NULL,
	[DeptStatistical] [nvarchar](50) NULL,
	[AdminGeneralGover] [nvarchar](50) NULL,
	[AdminHeadExamGover] [nvarchar](50) NULL,
 CONSTRAINT [PK_schoolData] PRIMARY KEY CLUSTERED 
(
	[seqid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ShahadatMelad]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ShahadatMelad](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[seqNumber] [bigint] NOT NULL,
	[IsUsed] [bit] NULL,
	[notes] [nvarchar](50) NULL,
	[AddingDate] [datetime] NULL,
 CONSTRAINT [PK_ShahadatMelad] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [pinky] UNIQUE NONCLUSTERED 
(
	[seqNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[six]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[six](
	[F1] [float] NULL,
	[name] [nvarchar](50) NULL,
	[F3] [float] NULL,
	[F4] [nvarchar](255) NULL,
	[F5] [nvarchar](255) NULL,
	[F6] [nvarchar](255) NULL,
	[F7] [nvarchar](255) NULL,
	[F8] [nvarchar](255) NULL,
	[F9] [nvarchar](255) NULL,
	[F10] [nvarchar](255) NULL,
	[F11] [nvarchar](255) NULL,
	[F12] [nvarchar](255) NULL,
	[F13] [nvarchar](255) NULL,
	[F14] [nvarchar](255) NULL,
	[F15] [nvarchar](255) NULL,
	[F16] [nvarchar](255) NULL,
	[F17] [nvarchar](255) NULL,
	[F18] [nvarchar](255) NULL,
	[F19] [nvarchar](255) NULL,
	[F20] [nvarchar](255) NULL,
	[F21] [nvarchar](255) NULL,
	[F22] [nvarchar](255) NULL,
	[F23] [nvarchar](255) NULL,
	[F24] [nvarchar](255) NULL,
	[F25] [nvarchar](255) NULL,
	[F26] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StudentAbsent]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StudentAbsent](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SID] [int] NULL,
	[CDate] [date] NULL,
	[Status] [nvarchar](10) NULL,
	[CDay] [nvarchar](20) NULL,
	[NumAbsent] [int] NULL,
	[LevelID] [int] NULL,
	[IsFind] [char](1) NULL,
 CONSTRAINT [PK_StudentAbsent] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[studentAN]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[studentAN](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[atdSeq] [int] NOT NULL,
	[sname] [nvarchar](30) NULL,
	[levelid] [int] NULL,
	[city] [nvarchar](20) NULL,
	[address] [nvarchar](20) NULL,
	[gender] [nvarchar](10) NULL,
	[natianalityt] [nvarchar](20) NULL,
	[yearid] [int] NULL,
	[status] [nvarchar](10) NULL,
	[sgroup] [nchar](5) NULL,
	[bdate] [date] NULL,
 CONSTRAINT [PK_student] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StudentState]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StudentState](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[StateName] [nvarchar](20) NULL,
	[IsShowInComb] [bit] NULL,
 CONSTRAINT [PK_StudentState] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[t1]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t1](
	[F1] [float] NULL,
	[name] [nvarchar](50) NULL,
	[F3] [float] NULL,
	[F4] [nvarchar](255) NULL,
	[F5] [nvarchar](255) NULL,
	[F6] [nvarchar](255) NULL,
	[F7] [nvarchar](255) NULL,
	[F8] [nvarchar](255) NULL,
	[F9] [nvarchar](255) NULL,
	[F10] [nvarchar](255) NULL,
	[F11] [nvarchar](255) NULL,
	[F12] [nvarchar](255) NULL,
	[F13] [nvarchar](255) NULL,
	[F14] [nvarchar](255) NULL,
	[F15] [nvarchar](255) NULL,
	[F16] [nvarchar](255) NULL,
	[F17] [nvarchar](255) NULL,
	[F18] [nvarchar](255) NULL,
	[F19] [nvarchar](255) NULL,
	[F20] [nvarchar](255) NULL,
	[F21] [nvarchar](255) NULL,
	[F22] [nvarchar](255) NULL,
	[F23] [nvarchar](255) NULL,
	[F24] [nvarchar](255) NULL,
	[F25] [nvarchar](255) NULL,
	[F26] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[t2]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[t2](
	[F1] [float] NULL,
	[name] [nvarchar](50) NULL,
	[F3] [float] NULL,
	[F4] [nvarchar](255) NULL,
	[F5] [nvarchar](255) NULL,
	[F6] [nvarchar](255) NULL,
	[F7] [nvarchar](255) NULL,
	[F8] [nvarchar](255) NULL,
	[F9] [nvarchar](255) NULL,
	[F10] [nvarchar](255) NULL,
	[F11] [nvarchar](255) NULL,
	[F12] [nvarchar](255) NULL,
	[F13] [nvarchar](255) NULL,
	[F14] [nvarchar](255) NULL,
	[F15] [nvarchar](255) NULL,
	[F16] [nvarchar](255) NULL,
	[F17] [nvarchar](255) NULL,
	[F18] [nvarchar](255) NULL,
	[F19] [nvarchar](255) NULL,
	[F20] [nvarchar](255) NULL,
	[F21] [nvarchar](255) NULL,
	[F22] [nvarchar](255) NULL,
	[F23] [nvarchar](255) NULL,
	[F24] [nvarchar](255) NULL,
	[F25] [nvarchar](255) NULL,
	[F26] [nvarchar](255) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TableExam]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TableExam](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CDate] [date] NULL,
	[DayName] [nvarchar](50) NULL,
	[DayNumber] [int] NULL,
	[LevelID] [int] NULL,
	[TermID] [int] NULL,
	[YearID] [int] NULL,
	[CourseID] [int] NULL,
	[Time] [time](7) NULL,
	[CDateString] [nvarchar](50) NULL,
	[PeriodID] [int] NULL,
	[ExamPeriodTime] [datetime] NULL,
 CONSTRAINT [PK_TableExam] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TblNotify]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TblNotify](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[LectureName] [nvarchar](50) NULL,
	[DayNum] [int] NULL,
	[FromDate] [datetime] NULL,
	[TermID] [int] NULL,
	[YearID] [int] NULL,
	[FromTime] [time](7) NULL,
 CONSTRAINT [PK_TblNotify] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Teacher]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Teacher](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TeacherName] [nvarchar](50) NULL,
	[Gender] [nvarchar](10) NULL,
	[Phone] [nvarchar](14) NULL,
	[Quali] [nvarchar](50) NULL,
	[Experties] [nvarchar](50) NULL,
	[QualiDate] [date] NULL,
	[QualiPlace] [nvarchar](50) NULL,
	[Address] [nvarchar](50) NULL,
	[TypeTeacher] [nvarchar](20) NULL,
	[TypeTeacherID] [int] NULL,
	[Rateb] [float] NULL,
	[AddDate] [date] NULL,
	[UserAdd] [int] NULL,
	[EditDate] [date] NULL,
	[UserEdit] [int] NULL,
	[DeleteDate] [date] NULL,
	[UserDelete] [int] NULL,
	[IsDelete] [char](1) NULL,
 CONSTRAINT [PK_Teacher] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TermPlan]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TermPlan](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TermID] [int] NULL,
	[PlanID] [int] NULL,
	[Sdate] [date] NULL,
	[Edate] [date] NULL,
	[IsActive] [bit] NULL,
	[IsDelete] [bit] NULL,
 CONSTRAINT [PK_TermPlan] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TypeLevel]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TypeLevel](
	[ID] [int] NOT NULL,
	[LevelTypeName] [nvarchar](50) NULL,
 CONSTRAINT [PK_TypeLevel] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TypeTeatcher]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TypeTeatcher](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[TypeName] [nvarchar](20) NULL,
	[IsShowInCombo] [bit] NULL,
 CONSTRAINT [PK_TypeTeatcher] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Users]    Script Date: 2024-10-07 04:25:40 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Users](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[UserName] [nvarchar](50) NULL,
	[LoginName] [nvarchar](50) NULL,
	[Pwd] [nvarchar](50) NULL,
	[IsActive] [int] NULL,
	[CreationDate] [datetime] NULL,
	[RoleID] [int] NULL,
	[SchoolID] [int] NULL,
	[branchID] [int] NULL,
	[TempStop] [bit] NULL,
	[BoxAccountID] [bigint] NULL,
	[Note] [nvarchar](50) NULL,
	[UserID] [int] NULL,
	[AddingDate] [datetime] NULL,
	[EditUserID] [int] NULL,
	[EditDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[DeletingUserID] [int] NULL,
	[DeletingDate] [datetime] NULL,
 CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_Users] UNIQUE NONCLUSTERED 
(
	[LoginName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[CourseRegisterdLearners] ADD  CONSTRAINT [DF_CourseRegisterdLearners_TargetTypeID]  DEFAULT ((0)) FOR [TargetTypeID]
GO
ALTER TABLE [dbo].[CourseRegisterdLearners] ADD  CONSTRAINT [DF_CourseRegisterdLearners_FeesAmount]  DEFAULT ((0)) FOR [FeesAmount]
GO
ALTER TABLE [dbo].[CourseRegisterdLearners] ADD  CONSTRAINT [DF_CourseRegisterdLearners_DiscownPrcnt]  DEFAULT ((0)) FOR [DiscownPrcnt]
GO
ALTER TABLE [dbo].[CourseRegisterdLearners] ADD  CONSTRAINT [DF_CourseRegisterdLearners_AddingDate]  DEFAULT (getdate()) FOR [AddingDate]
GO
ALTER TABLE [dbo].[CourseRegisterdLearners] ADD  CONSTRAINT [DF_CourseRegisterdLearners_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[PageCategories] ADD  CONSTRAINT [DF_PageCategories_ActiveStatus]  DEFAULT ((1)) FOR [ActiveStatus]
GO
ALTER TABLE [dbo].[PageCategories] ADD  CONSTRAINT [DF_PageCategories_AddingDate]  DEFAULT (getdate()) FOR [AddingDate]
GO
ALTER TABLE [dbo].[PageCategories] ADD  CONSTRAINT [DF_PageCategories_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[PageOperaions] ADD  CONSTRAINT [DF_PageOperaions_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[PageOperationRoles] ADD  CONSTRAINT [DF_PageOperationRoles_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[PageOperationRoles] ADD  CONSTRAINT [DF_PageOperationRoles_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[PageOperationRoles] ADD  CONSTRAINT [DF_PageOperationRoles_AddingDate]  DEFAULT (getdate()) FOR [AddingDate]
GO
ALTER TABLE [dbo].[Pages] ADD  CONSTRAINT [DF_Pages_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[R_ConsultTransactions] ADD  CONSTRAINT [DF_R_ConsultTransactions_exchangeRate]  DEFAULT ((1)) FOR [ExchangeRate]
GO
ALTER TABLE [dbo].[R_ConsultTransactions] ADD  CONSTRAINT [DF_R_ConsultTransactions_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[R_ConsultTransactions] ADD  CONSTRAINT [DF_R_ConsultTransactions_IsShown]  DEFAULT ((1)) FOR [IsShown]
GO
ALTER TABLE [dbo].[R_ConsultTransactions] ADD  CONSTRAINT [DF_R_ConsultTransactions_AddingDate]  DEFAULT (getdate()) FOR [AddingDate]
GO
ALTER TABLE [dbo].[R_ConsultTransactions] ADD  CONSTRAINT [DF_R_ConsultTransactions_DocType]  DEFAULT ((0)) FOR [DocType]
GO
ALTER TABLE [dbo].[R_ConsultTransactions] ADD  CONSTRAINT [DF_R_ConsultTransactions_DiscownPercent]  DEFAULT ((0)) FOR [DiscownPercent]
GO
ALTER TABLE [dbo].[R_ConsultTransactions] ADD  CONSTRAINT [DF_R_ConsultTransactions_CourseLimitNo]  DEFAULT ((0)) FOR [CourseLimitNo]
GO
ALTER TABLE [dbo].[R_ConsultTransactions] ADD  CONSTRAINT [DF_R_ConsultTransactions_PromotingPercent]  DEFAULT ((0)) FOR [PromotingPercent]
GO
ALTER TABLE [dbo].[Roles] ADD  CONSTRAINT [DF_Roles_IsRoleActive]  DEFAULT ((1)) FOR [IsRoleActive]
GO
ALTER TABLE [dbo].[student] ADD  CONSTRAINT [DF_student_IsDelete]  DEFAULT ((0)) FOR [IsDelete]
GO
ALTER TABLE [dbo].[student] ADD  CONSTRAINT [DF_student_AddDate]  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[studentdegree] ADD  CONSTRAINT [DF_studentdegree_deg3]  DEFAULT ((0)) FOR [deg3]
GO
ALTER TABLE [dbo].[studentdegree] ADD  CONSTRAINT [DF_studentdegree_deg4]  DEFAULT ((0)) FOR [deg4]
GO
ALTER TABLE [dbo].[studentdegree] ADD  CONSTRAINT [DF_studentdegree_forFull]  DEFAULT ((0)) FOR [forFull]
GO
ALTER TABLE [dbo].[StudentLevels] ADD  CONSTRAINT [DF_StudentLevels_active]  DEFAULT ((1)) FOR [active]
GO
ALTER TABLE [dbo].[Teacher] ADD  CONSTRAINT [DF_Teacher_AddDate]  DEFAULT (getdate()) FOR [AddDate]
GO
ALTER TABLE [dbo].[TermPlan] ADD  CONSTRAINT [DF_TermPlan_IsDelete]  DEFAULT ((0)) FOR [IsDelete]
GO
ALTER TABLE [dbo].[Users] ADD  CONSTRAINT [DF_Users_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE [dbo].[Users] ADD  CONSTRAINT [DF_Users_CreationDate]  DEFAULT (getdate()) FOR [CreationDate]
GO
ALTER TABLE [dbo].[Users] ADD  CONSTRAINT [DF_Users_TempStop]  DEFAULT ((0)) FOR [TempStop]
GO
ALTER TABLE [dbo].[Users] ADD  CONSTRAINT [DF_Users_AddingDate]  DEFAULT (getdate()) FOR [AddingDate]
GO
ALTER TABLE [dbo].[Users] ADD  CONSTRAINT [DF_Users_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [dbo].[course]  WITH NOCHECK ADD  CONSTRAINT [FK_course_TypeLevel] FOREIGN KEY([CourseLevelType])
REFERENCES [dbo].[TypeLevel] ([ID])
GO
ALTER TABLE [dbo].[course] CHECK CONSTRAINT [FK_course_TypeLevel]
GO
ALTER TABLE [dbo].[ExamPeriod]  WITH NOCHECK ADD  CONSTRAINT [FK_ExamPeriod_Periods] FOREIGN KEY([PeriodID])
REFERENCES [dbo].[Periods] ([ID])
GO
ALTER TABLE [dbo].[ExamPeriod] CHECK CONSTRAINT [FK_ExamPeriod_Periods]
GO
ALTER TABLE [dbo].[LectureWeek]  WITH CHECK ADD  CONSTRAINT [FK_LectureWeek_course] FOREIGN KEY([courseid])
REFERENCES [dbo].[course] ([courseid])
GO
ALTER TABLE [dbo].[LectureWeek] CHECK CONSTRAINT [FK_LectureWeek_course]
GO
ALTER TABLE [dbo].[LectureWeek]  WITH CHECK ADD  CONSTRAINT [FK_LectureWeek_levels] FOREIGN KEY([levelid])
REFERENCES [dbo].[levels] ([levelid])
GO
ALTER TABLE [dbo].[LectureWeek] CHECK CONSTRAINT [FK_LectureWeek_levels]
GO
ALTER TABLE [dbo].[LectureWeek]  WITH CHECK ADD  CONSTRAINT [FK_LectureWeek_studyYear] FOREIGN KEY([YearID])
REFERENCES [dbo].[studyYear] ([seqid])
GO
ALTER TABLE [dbo].[LectureWeek] CHECK CONSTRAINT [FK_LectureWeek_studyYear]
GO
ALTER TABLE [dbo].[LectureWeek]  WITH CHECK ADD  CONSTRAINT [FK_LectureWeek_terms] FOREIGN KEY([termid])
REFERENCES [dbo].[terms] ([termid])
GO
ALTER TABLE [dbo].[LectureWeek] CHECK CONSTRAINT [FK_LectureWeek_terms]
GO
ALTER TABLE [dbo].[LevelCourse]  WITH CHECK ADD  CONSTRAINT [FK_LevelCourse_course] FOREIGN KEY([CourseID])
REFERENCES [dbo].[course] ([courseid])
GO
ALTER TABLE [dbo].[LevelCourse] CHECK CONSTRAINT [FK_LevelCourse_course]
GO
ALTER TABLE [dbo].[LevelCourse]  WITH CHECK ADD  CONSTRAINT [FK_LevelCourse_levels] FOREIGN KEY([LevelID])
REFERENCES [dbo].[levels] ([levelid])
GO
ALTER TABLE [dbo].[LevelCourse] CHECK CONSTRAINT [FK_LevelCourse_levels]
GO
ALTER TABLE [dbo].[LevelCourse]  WITH CHECK ADD  CONSTRAINT [FK_LevelCourse_Plans] FOREIGN KEY([PlanID])
REFERENCES [dbo].[Plans] ([ID])
GO
ALTER TABLE [dbo].[LevelCourse] CHECK CONSTRAINT [FK_LevelCourse_Plans]
GO
ALTER TABLE [dbo].[LevelCourse]  WITH CHECK ADD  CONSTRAINT [FK_LevelCourse_Teacher] FOREIGN KEY([TeacherID])
REFERENCES [dbo].[Teacher] ([ID])
GO
ALTER TABLE [dbo].[LevelCourse] CHECK CONSTRAINT [FK_LevelCourse_Teacher]
GO
ALTER TABLE [dbo].[LevelCourse]  WITH CHECK ADD  CONSTRAINT [FK_LevelCourse_TermPlan] FOREIGN KEY([TermPlanID])
REFERENCES [dbo].[TermPlan] ([ID])
GO
ALTER TABLE [dbo].[LevelCourse] CHECK CONSTRAINT [FK_LevelCourse_TermPlan]
GO
ALTER TABLE [dbo].[LevelCourse]  WITH CHECK ADD  CONSTRAINT [FK_LevelCourse_terms] FOREIGN KEY([termID])
REFERENCES [dbo].[terms] ([termid])
GO
ALTER TABLE [dbo].[LevelCourse] CHECK CONSTRAINT [FK_LevelCourse_terms]
GO
ALTER TABLE [dbo].[levels]  WITH CHECK ADD  CONSTRAINT [FK_levels_levels] FOREIGN KEY([nextLevelID])
REFERENCES [dbo].[levels] ([levelid])
GO
ALTER TABLE [dbo].[levels] CHECK CONSTRAINT [FK_levels_levels]
GO
ALTER TABLE [dbo].[levels]  WITH NOCHECK ADD  CONSTRAINT [FK_levels_TypeLevel] FOREIGN KEY([LevelTypeID])
REFERENCES [dbo].[TypeLevel] ([ID])
GO
ALTER TABLE [dbo].[levels] CHECK CONSTRAINT [FK_levels_TypeLevel]
GO
ALTER TABLE [dbo].[PageOperaions]  WITH NOCHECK ADD  CONSTRAINT [FK_PageOperaions_Pages] FOREIGN KEY([PageID])
REFERENCES [dbo].[Pages] ([PageID])
GO
ALTER TABLE [dbo].[PageOperaions] CHECK CONSTRAINT [FK_PageOperaions_Pages]
GO
ALTER TABLE [dbo].[PageOperationRoles]  WITH CHECK ADD  CONSTRAINT [FK_PageOperationRoles_PageOperaions] FOREIGN KEY([PageOperationID])
REFERENCES [dbo].[PageOperaions] ([ID])
GO
ALTER TABLE [dbo].[PageOperationRoles] CHECK CONSTRAINT [FK_PageOperationRoles_PageOperaions]
GO
ALTER TABLE [dbo].[PageOperationRoles]  WITH CHECK ADD  CONSTRAINT [FK_PageOperationRoles_Roles] FOREIGN KEY([RoleID])
REFERENCES [dbo].[Roles] ([ID])
GO
ALTER TABLE [dbo].[PageOperationRoles] CHECK CONSTRAINT [FK_PageOperationRoles_Roles]
GO
ALTER TABLE [dbo].[Pages]  WITH NOCHECK ADD  CONSTRAINT [FK_Pages_PageCategories] FOREIGN KEY([PageCategoryID])
REFERENCES [dbo].[PageCategories] ([ID])
GO
ALTER TABLE [dbo].[Pages] CHECK CONSTRAINT [FK_Pages_PageCategories]
GO
ALTER TABLE [dbo].[Plans]  WITH CHECK ADD  CONSTRAINT [FK_Plans_studyYear] FOREIGN KEY([YearID])
REFERENCES [dbo].[studyYear] ([seqid])
GO
ALTER TABLE [dbo].[Plans] CHECK CONSTRAINT [FK_Plans_studyYear]
GO
ALTER TABLE [dbo].[ProfilePermanences]  WITH CHECK ADD  CONSTRAINT [FK_ProfilePermanences_studyYear] FOREIGN KEY([YearID])
REFERENCES [dbo].[studyYear] ([seqid])
GO
ALTER TABLE [dbo].[ProfilePermanences] CHECK CONSTRAINT [FK_ProfilePermanences_studyYear]
GO
ALTER TABLE [dbo].[ProfilePermanences]  WITH NOCHECK ADD  CONSTRAINT [FK_ProfilePermanences_Teacher] FOREIGN KEY([TeatcherID])
REFERENCES [dbo].[Teacher] ([ID])
GO
ALTER TABLE [dbo].[ProfilePermanences] CHECK CONSTRAINT [FK_ProfilePermanences_Teacher]
GO
ALTER TABLE [dbo].[RoomStudentInExam]  WITH NOCHECK ADD  CONSTRAINT [FK_RoomStudentInExam_ExamPeriod] FOREIGN KEY([PeriodID])
REFERENCES [dbo].[ExamPeriod] ([ID])
GO
ALTER TABLE [dbo].[RoomStudentInExam] CHECK CONSTRAINT [FK_RoomStudentInExam_ExamPeriod]
GO
ALTER TABLE [dbo].[RoomStudentInExam]  WITH NOCHECK ADD  CONSTRAINT [FK_RoomStudentInExam_levels] FOREIGN KEY([LevelID])
REFERENCES [dbo].[levels] ([levelid])
GO
ALTER TABLE [dbo].[RoomStudentInExam] CHECK CONSTRAINT [FK_RoomStudentInExam_levels]
GO
ALTER TABLE [dbo].[RoomStudentInExam]  WITH NOCHECK ADD  CONSTRAINT [FK_RoomStudentInExam_Rooms] FOREIGN KEY([RoomID])
REFERENCES [dbo].[Rooms] ([ID])
GO
ALTER TABLE [dbo].[RoomStudentInExam] CHECK CONSTRAINT [FK_RoomStudentInExam_Rooms]
GO
ALTER TABLE [dbo].[RoomStudentInExam]  WITH NOCHECK ADD  CONSTRAINT [FK_RoomStudentInExam_student] FOREIGN KEY([StdID])
REFERENCES [dbo].[student] ([ID])
GO
ALTER TABLE [dbo].[RoomStudentInExam] CHECK CONSTRAINT [FK_RoomStudentInExam_student]
GO
ALTER TABLE [dbo].[RoomStudentInExam]  WITH NOCHECK ADD  CONSTRAINT [FK_RoomStudentInExam_studyYear] FOREIGN KEY([YearID])
REFERENCES [dbo].[studyYear] ([seqid])
GO
ALTER TABLE [dbo].[RoomStudentInExam] CHECK CONSTRAINT [FK_RoomStudentInExam_studyYear]
GO
ALTER TABLE [dbo].[RoomStudentInExam]  WITH NOCHECK ADD  CONSTRAINT [FK_RoomStudentInExam_terms] FOREIGN KEY([TermID])
REFERENCES [dbo].[terms] ([termid])
GO
ALTER TABLE [dbo].[RoomStudentInExam] CHECK CONSTRAINT [FK_RoomStudentInExam_terms]
GO
ALTER TABLE [dbo].[schoolData]  WITH NOCHECK ADD  CONSTRAINT [FK_schoolData_Teacher] FOREIGN KEY([AdminSchool])
REFERENCES [dbo].[Teacher] ([ID])
GO
ALTER TABLE [dbo].[schoolData] CHECK CONSTRAINT [FK_schoolData_Teacher]
GO
ALTER TABLE [dbo].[student]  WITH NOCHECK ADD  CONSTRAINT [FK_student_Group] FOREIGN KEY([GroupID])
REFERENCES [dbo].[Group] ([ID])
GO
ALTER TABLE [dbo].[student] CHECK CONSTRAINT [FK_student_Group]
GO
ALTER TABLE [dbo].[student]  WITH NOCHECK ADD  CONSTRAINT [FK_student_studyYear] FOREIGN KEY([yearid])
REFERENCES [dbo].[studyYear] ([seqid])
GO
ALTER TABLE [dbo].[student] CHECK CONSTRAINT [FK_student_studyYear]
GO
ALTER TABLE [dbo].[student]  WITH NOCHECK ADD  CONSTRAINT [FK_student_Users_add] FOREIGN KEY([UserAdd])
REFERENCES [dbo].[Users] ([ID])
GO
ALTER TABLE [dbo].[student] CHECK CONSTRAINT [FK_student_Users_add]
GO
ALTER TABLE [dbo].[student]  WITH NOCHECK ADD  CONSTRAINT [FK_student_Users_del] FOREIGN KEY([UserDelete])
REFERENCES [dbo].[Users] ([ID])
GO
ALTER TABLE [dbo].[student] CHECK CONSTRAINT [FK_student_Users_del]
GO
ALTER TABLE [dbo].[student]  WITH NOCHECK ADD  CONSTRAINT [FK_student_Users_edit] FOREIGN KEY([UserEdit])
REFERENCES [dbo].[Users] ([ID])
GO
ALTER TABLE [dbo].[student] CHECK CONSTRAINT [FK_student_Users_edit]
GO
ALTER TABLE [dbo].[StudentAbsent]  WITH CHECK ADD  CONSTRAINT [FK_StudentAbsent_levels] FOREIGN KEY([LevelID])
REFERENCES [dbo].[levels] ([levelid])
GO
ALTER TABLE [dbo].[StudentAbsent] CHECK CONSTRAINT [FK_StudentAbsent_levels]
GO
ALTER TABLE [dbo].[StudentAbsent]  WITH NOCHECK ADD  CONSTRAINT [FK_StudentAbsent_student] FOREIGN KEY([SID])
REFERENCES [dbo].[student] ([ID])
GO
ALTER TABLE [dbo].[StudentAbsent] CHECK CONSTRAINT [FK_StudentAbsent_student]
GO
ALTER TABLE [dbo].[studentdegree]  WITH CHECK ADD  CONSTRAINT [FK_studentdegree_levelCourse] FOREIGN KEY([courseLevelID])
REFERENCES [dbo].[LevelCourse] ([ID])
GO
ALTER TABLE [dbo].[studentdegree] CHECK CONSTRAINT [FK_studentdegree_levelCourse]
GO
ALTER TABLE [dbo].[studentdegree]  WITH CHECK ADD  CONSTRAINT [FK_studentdegree_levels] FOREIGN KEY([levelid])
REFERENCES [dbo].[levels] ([levelid])
GO
ALTER TABLE [dbo].[studentdegree] CHECK CONSTRAINT [FK_studentdegree_levels]
GO
ALTER TABLE [dbo].[studentdegree]  WITH NOCHECK ADD  CONSTRAINT [FK_studentdegree_student] FOREIGN KEY([studentid])
REFERENCES [dbo].[student] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[studentdegree] CHECK CONSTRAINT [FK_studentdegree_student]
GO
ALTER TABLE [dbo].[studentdegree]  WITH CHECK ADD  CONSTRAINT [FK_studentdegree_studyYear] FOREIGN KEY([yearID])
REFERENCES [dbo].[studyYear] ([seqid])
GO
ALTER TABLE [dbo].[studentdegree] CHECK CONSTRAINT [FK_studentdegree_studyYear]
GO
ALTER TABLE [dbo].[studentdegree]  WITH CHECK ADD  CONSTRAINT [FK_studentdegree_terms] FOREIGN KEY([termid])
REFERENCES [dbo].[terms] ([termid])
GO
ALTER TABLE [dbo].[studentdegree] CHECK CONSTRAINT [FK_studentdegree_terms]
GO
ALTER TABLE [dbo].[StudentLevels]  WITH NOCHECK ADD  CONSTRAINT [FK_StudentLevels_Group] FOREIGN KEY([GroupID])
REFERENCES [dbo].[Group] ([ID])
GO
ALTER TABLE [dbo].[StudentLevels] CHECK CONSTRAINT [FK_StudentLevels_Group]
GO
ALTER TABLE [dbo].[StudentLevels]  WITH CHECK ADD  CONSTRAINT [FK_StudentLevels_Levels] FOREIGN KEY([LevelID])
REFERENCES [dbo].[levels] ([levelid])
GO
ALTER TABLE [dbo].[StudentLevels] CHECK CONSTRAINT [FK_StudentLevels_Levels]
GO
ALTER TABLE [dbo].[StudentLevels]  WITH NOCHECK ADD  CONSTRAINT [FK_StudentLevels_student] FOREIGN KEY([StdID])
REFERENCES [dbo].[student] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[StudentLevels] CHECK CONSTRAINT [FK_StudentLevels_student]
GO
ALTER TABLE [dbo].[StudentLevels]  WITH CHECK ADD  CONSTRAINT [FK_StudentLevels_studyYear] FOREIGN KEY([YearID])
REFERENCES [dbo].[studyYear] ([seqid])
GO
ALTER TABLE [dbo].[StudentLevels] CHECK CONSTRAINT [FK_StudentLevels_studyYear]
GO
ALTER TABLE [dbo].[studyYear]  WITH CHECK ADD  CONSTRAINT [FK_studyYear_studyYear] FOREIGN KEY([NextYear])
REFERENCES [dbo].[studyYear] ([seqid])
GO
ALTER TABLE [dbo].[studyYear] CHECK CONSTRAINT [FK_studyYear_studyYear]
GO
ALTER TABLE [dbo].[TableExam]  WITH CHECK ADD  CONSTRAINT [FK_TableExam_course] FOREIGN KEY([CourseID])
REFERENCES [dbo].[course] ([courseid])
GO
ALTER TABLE [dbo].[TableExam] CHECK CONSTRAINT [FK_TableExam_course]
GO
ALTER TABLE [dbo].[TableExam]  WITH NOCHECK ADD  CONSTRAINT [FK_TableExam_ExamPeriod] FOREIGN KEY([PeriodID])
REFERENCES [dbo].[ExamPeriod] ([ID])
GO
ALTER TABLE [dbo].[TableExam] CHECK CONSTRAINT [FK_TableExam_ExamPeriod]
GO
ALTER TABLE [dbo].[TableExam]  WITH CHECK ADD  CONSTRAINT [FK_TableExam_levels] FOREIGN KEY([LevelID])
REFERENCES [dbo].[levels] ([levelid])
GO
ALTER TABLE [dbo].[TableExam] CHECK CONSTRAINT [FK_TableExam_levels]
GO
ALTER TABLE [dbo].[TableExam]  WITH CHECK ADD  CONSTRAINT [FK_TableExam_studyYear] FOREIGN KEY([YearID])
REFERENCES [dbo].[studyYear] ([seqid])
GO
ALTER TABLE [dbo].[TableExam] CHECK CONSTRAINT [FK_TableExam_studyYear]
GO
ALTER TABLE [dbo].[TableExam]  WITH CHECK ADD  CONSTRAINT [FK_TableExam_terms] FOREIGN KEY([TermID])
REFERENCES [dbo].[terms] ([termid])
GO
ALTER TABLE [dbo].[TableExam] CHECK CONSTRAINT [FK_TableExam_terms]
GO
ALTER TABLE [dbo].[Teacher]  WITH NOCHECK ADD  CONSTRAINT [FK_Teacher_TypeTeatcher] FOREIGN KEY([TypeTeacherID])
REFERENCES [dbo].[TypeTeatcher] ([ID])
GO
ALTER TABLE [dbo].[Teacher] CHECK CONSTRAINT [FK_Teacher_TypeTeatcher]
GO
ALTER TABLE [dbo].[TermPlan]  WITH CHECK ADD  CONSTRAINT [FK_TermPlan_Plans] FOREIGN KEY([PlanID])
REFERENCES [dbo].[Plans] ([ID])
GO
ALTER TABLE [dbo].[TermPlan] CHECK CONSTRAINT [FK_TermPlan_Plans]
GO
ALTER TABLE [dbo].[TermPlan]  WITH CHECK ADD  CONSTRAINT [FK_TermPlan_terms] FOREIGN KEY([TermID])
REFERENCES [dbo].[terms] ([termid])
GO
ALTER TABLE [dbo].[TermPlan] CHECK CONSTRAINT [FK_TermPlan_terms]
GO
ALTER TABLE [dbo].[Users]  WITH CHECK ADD  CONSTRAINT [FK_Users_Roles] FOREIGN KEY([RoleID])
REFERENCES [dbo].[Roles] ([ID])
GO
ALTER TABLE [dbo].[Users] CHECK CONSTRAINT [FK_Users_Roles]
GO
ALTER TABLE [dbo].[Users]  WITH CHECK ADD  CONSTRAINT [FK_Users_schoolData] FOREIGN KEY([SchoolID])
REFERENCES [dbo].[schoolData] ([seqid])
GO
ALTER TABLE [dbo].[Users] CHECK CONSTRAINT [FK_Users_schoolData]
GO
/****** Object:  StoredProcedure [dbo].[AddCourseForStudent]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[AddCourseForStudent]
(@termid int,@yearid int,@planid int)
as
insert into studentdegree 
SELECT st.StdID,lv.levelid,lvc.ID,lvc.CourseID,lvc.termID ,case when lvc.CourseID=9 or lvc.CourseID=10 then 15 else 0 end,
case when lvc.CourseID=9 or lvc.CourseID=10 then 25 else 0 end,0,0,0,@yearid,0

FROM StudentLevels st 

inner join levels lv on st.levelid=lv.levelid

 inner join LevelCourse lvc on lvc.LevelID=lv.levelid

  where   lvc.LevelID=st.levelid and lvc.termID=@termid  and  st.YearID=@yearid and lvc.PlanID=@planid
    and lvc.ID not in (select courseLevelID from studentdegree sd where sd.studentid=st.StdID and sd.levelid=st.levelid and yearID=@yearid)
GO
/****** Object:  StoredProcedure [dbo].[AddCourseLevel]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[AddCourseLevel]
(@newplan int,@currentyear int,@nextyear int)
as
insert into LevelCourse
select lvc.LevelID,lvc.CourseID,lvc.termID,lvc.maxDegree,lvc.minDegree,lvc.IsActive,@newplan,lvc.DefaultDegree
,(select ID from TermPlan where PlanID=@newplan and TermID=lvc.termID)
,TeacherID
,BredLevel
 from LevelCourse lvc inner join Plans pl on lvc.PlanID=pl.ID 
inner join TermPlan tpl on lvc.TermPlanID=tpl.ID
where pl.YearID=@currentyear and lvc.CourseID not in(select CourseID from LevelCourse levc
inner join Plans pla on levc.PlanID=pla.ID  inner join TermPlan tp on levc.TermPlanID=tp.ID
 where LevelID=lvc.LevelID and levc.termID=lvc.termID and levc.TermPlanID=tp.ID and CourseID=lvc.CourseID and pla.YearID=@nextyear)
GO
/****** Object:  StoredProcedure [dbo].[AddEdit_student]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[AddEdit_student]

(
@ID int=default
, @SeqID int=default
, @sname nvarchar (50)=default
, @levelid int=default
, @BirthPlace nvarchar (50)=default
, @LastName nvarchar (20)=default
, @gender nvarchar (10)=default
, @natianalityt nvarchar (20)=default
, @yearid int=default
, @lvlState nvarchar (10)=default
, @sgroup nchar (5)=default
, @bdate date=default
, @stdImage image=default
, @Village nvarchar (30)=default
, @Notes nvarchar (100)=default
, @IsDelete bit=default
, @AddDate date=default
, @EditDate date=default
, @DeletDate date=default
, @UserAdd int=default
, @UserEdit int=default
, @UserDelete int=default
, @GroupID int=default
,@IsLeave bit=default
)
 AS 
 BEGIN TRANSACTION
 DECLARE @StdID INT=0
 IF(@ID<=0)
 BEGIN
INSERT INTO student(SeqID,sname,levelid,BirthPlace,LastName,gender,natianalityt
,yearid,sgroup,bdate,stdImage,Village,Notes,IsDelete,AddDate,EditDate
,DeletDate,UserAdd,UserEdit,UserDelete,GroupID,IsLeave)
 Values(@SeqID,@sname,@levelid,
 @BirthPlace,@LastName,@gender,@natianalityt,
 @yearid,@sgroup,@bdate,@stdImage,
 @Village,@Notes,@IsDelete,@AddDate,@EditDate
 ,@DeletDate,@UserAdd,@UserEdit,@UserDelete,@GroupID,@IsLeave)

 set @StdID=SCOPE_IDENTITY();

 END
 else if(@ID>0)
 begin
UPDATE student SET
SeqID=isnull(@SeqID,SeqID)
,sname=isnull(@sname,sname)
,levelid=isnull(@levelid,levelid)
,BirthPlace=isnull(@BirthPlace,BirthPlace)
,LastName=isnull(@LastName,LastName)
,gender=isnull(@gender,gender)
,natianalityt=isnull(@natianalityt,natianalityt)
,yearid=isnull(@yearid,yearid)
--,lvlState=isnull(@lvlState,lvlState)
,sgroup=isnull(@sgroup,sgroup)
,bdate=isnull(@bdate,bdate)
,stdImage=isnull(@stdImage,stdImage)
,Village=isnull(@Village,Village)
,Notes=isnull(@Notes,Notes)
,IsDelete=isnull(@IsDelete,IsDelete)
,AddDate=isnull(@AddDate,AddDate)
,EditDate=isnull(@EditDate,EditDate)
,DeletDate=isnull(@DeletDate,DeletDate)
,UserAdd=isnull(@UserAdd,UserAdd)
,UserEdit=isnull(@UserEdit,UserEdit)
,UserDelete=isnull(@UserDelete,UserDelete)
,GroupID=isnull(@GroupID,GroupID)
,IsLeave=isnull(@IsLeave,IsLeave)
 WHERE ID=@ID
 set @StdID=@ID;
 end
 if(@@ERROR<>0)
 begin
  ROLLBACK
   RAISERROR(N'خطا في بيانات !!',16,1);
   RETURN
 end


 if not exists(select * from StudentLevels where StdID=@StdID and YearID=@yearid)
 begin
insert into StudentLevels 
 values(@StdID,@levelid,@yearid,1,@lvlState,@sgroup,@GroupID,NULL)

 END
 ELSE 
 BEGIN

 update  StudentLevels  set 
                         sgroup=isnull(@sgroup,sgroup)
						,GroupID=isnull(@GroupID,GroupID)
						,LevelID=isnull(@levelid,LevelID)
						,lvlState=isnull(@lvlState,lvlState)
						--,active=ISNULL(@active,active)
 where StdID=@StdID and YearID=@yearid
 END

 COMMIT TRANSACTION
GO
/****** Object:  StoredProcedure [dbo].[AddSem]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[AddSem]
@LectureName Nvarchar(100),@levelid int,@IdRoom int,@CdayNum int, @fromdate Nvarchar(100),@toDate Nvarchar(100),@cday date
as
insert into LectureWeek(LectureName,levelid,IdRoom,CdayNum,fromdate,toDate,cDay)
values(@LectureName,@levelid,@IdRoom,@CdayNum,@fromdate,@toDate,@cday)
GO
/****** Object:  StoredProcedure [dbo].[AddStudentToLevels]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[AddStudentToLevels]
(@sid int ,@yearid int ,@levelid int,@lvlStatus nvarchar(10),
@active bit,@sgroup nvarchar(20),@GroupID int

)
as
begin
if not exists(select * from StudentLevels where StdID=@sid and YearID=@yearid)
insert into StudentLevels 
 values(@sid,@levelid,@yearid,@active,@lvlStatus,@sgroup,@GroupID,'')

end
GO
/****** Object:  StoredProcedure [dbo].[AllClass]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[AllClass]
as
select *
from levels
GO
/****** Object:  StoredProcedure [dbo].[AllSemForRoom]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[AllSemForRoom]
@IdRoom int
as
select * from LectureWeek where IDroom=@IdRoom
GO
/****** Object:  StoredProcedure [dbo].[DelCourseDifferLevel]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[DelCourseDifferLevel]
(@year int)
as
delete from studentdegree where seqid in (

select  sd.seqid from  studentdegree sd inner join student st on sd.studentid=st.ID
 where sd.levelid<>st.levelid and sd.yearID=@year)
GO
/****** Object:  StoredProcedure [dbo].[DistributeFtudentForRoom]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[DistributeFtudentForRoom](@YearID int,@CountRoom int,@LevelIDMore int,@Gender nvarchar(10))
as
SELECT * from 
(
select 
NTILE(@CountRoom)over(partition by sl.levelid order by sl.levelid desc) AS RowNum,
SL.LevelID,st.ID as StdID ,st.sname,st.LastName,st.Village,st.gender,sl.lvlState,sl.sgroup,sl.GroupID 
from student st inner join StudentLevels sl on st.ID=sl.StdID
where IsDelete=0 and sl.YearID=@YearID and sl.LevelID>@LevelIDMore 
and st.gender=@Gender
 -- in (select lv.levelid from levels lv where lv.levelid>3)
 --and ID in (select StdID from StudentLevels where YearID=2010)

 ) AS tmp

 group by RowNum,LevelID,sname,LastName,StdID,Village,gender,lvlState,sgroup,GroupID
GO
/****** Object:  StoredProcedure [dbo].[Edit_studentlevels]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[Edit_studentlevels]
(@sid int ,@yearid int ,@levelid int,@lvlStatus nvarchar(10),
@active bit,@sgroup nvarchar(20),@GroupID int

)
as
begin
update  StudentLevels  set 
                         sgroup=isnull(@sgroup,sgroup)
						,GroupID=isnull(@GroupID,GroupID)
						--,LevelID=isnull(@levelid,LevelID)
						,lvlState=isnull(@lvlStatus,lvlState)
						,active=ISNULL(@active,active)
 where StdID=@sid and YearID=@yearid

end
GO
/****** Object:  StoredProcedure [dbo].[GenerateNumberForStudent]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GenerateNumberForStudent](@YearID int,@levelID int=0,@typGenrate int=0)
as
begin
--declare @typPartition int=0

update student 
set SeqID=rownum
,lvlState=tmp.lvlState
from(
select case when @typGenrate=0 then ROW_NUMBER()over(partition by sl.levelid order by st.sname)
when @typGenrate=1 then ROW_NUMBER()over(partition by sl.levelid,sl.GroupID order by st.sname) end
 rownum
,sl.StdID
,sl.lvlState
from student st inner join StudentLevels sl on st.ID=sl.StdID
where sl.yearid=@YearID and st.IsDelete=0
) tmp inner join student on student.ID=tmp.StdID
where student.levelid=case when @levelID>0 then @levelID else student.levelid end
end
GO
/****** Object:  StoredProcedure [dbo].[GetAllDistrubuteStudent]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[GetAllDistrubuteStudent](@yearid int,@TermID int)
as
--declare @yearid int=2015 ,@TermID int=2
select 
sl.StdID,sl.LevelID,@TermID  termid,sl.YearID,st.sname,st.LastName,st.gender,lvl.levelname,
  sdy.studyYearEngl
from StudentLevels sl inner join student st on st.ID=sl.StdID inner join levels lvl on lvl.levelid=sl.LevelID inner join studyYear sdy on sdy.seqid=sl.YearID

where st.IsDelete=0 and isnull(sl.active,1)=1 and sl.YearID=@yearid and sl.StdID not in (select rst.StdID
from RoomStudentInExam rst inner join  student st on st.ID=rst.StdID --inner join StudentLevels stl on st.ID=stl.StdID
inner join levels lvl on rst.LevelID=lvl.levelid 
inner join Rooms rm on rm.ID=rst.RoomID 
inner join terms tr on tr.termid=rst.TermID 
inner join studyYear sy on sy.seqid=rst.YearID
where st.IsDelete=0 and sy.seqid=@YearID and rst.TermID=@TermID )
GO
/****** Object:  StoredProcedure [dbo].[GetCourseNewsLine]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[GetCourseNewsLine]
as
select top 10 *
,CONCAT(N' تم افتتاح دورة جديدة بأسم  ',
N' ('+CourseName+') ',N' سوف تنتهي فترة التسجيل في هذه الدورة بعد '
, case when Sdayno>0 then CONVERT(NVARCHAR,Sdayno)
+ N' يوم ' WHEN Shourno>0 THEN CONVERT(NVARCHAR,Shourno)+ N' ساعة '  
WHEN Sminutno>0 THEN CONVERT(NVARCHAR,Sminutno)+ N' دقيقة ' ELSE null end,N' عدد المتقدمين في الدورة حتى الان  '
,convert(nvarchar,registeredCnt)) AS STMNT
from (
select ID,CourseName,
(select count(*) from CourseRegisterdLearners where CourseID=R_ConsultTransactions.ID and IsDeleted=0) registeredCnt,
datediff(DAY,getdate(),StartDate) as Sdayno
, datediff(HOUR,getdate(),StartDate) as Shourno
,datediff(MINUTE,getdate(),StartDate) as Sminutno
,datediff(DAY,getdate(),EndDate) as Edayno
, datediff(HOUR,getdate(),EndDate) as Ehourno
,datediff(MINUTE,getdate(),EndDate)+100 as Eminutno -- here +100 to take reserve if the presenting done afer lecture with about 1 hourse and 40 minutes
 from R_ConsultTransactions where (datediff(DAY,getdate(),StartDate)>=0 
                               or datediff(HOUR,getdate(),StartDate)>=0
							   or datediff(MINUTE,getdate(),StartDate)>=0)
							   and DocType=9
							   ) sub
							   where CourseName is not null
							   order by ID desc
							  -- offset 10 rows fetch next 10 rows only

GO
/****** Object:  StoredProcedure [dbo].[getCourseWithLevel]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[getCourseWithLevel]
(@YearID int)
as

select lvlc.ID,LevelID,crs.courseid,coursename,termID,IsActive from LevelCourse lvlc
 inner join course crs on lvlc.CourseID=crs.courseid
 inner join Plans pl on lvlc.PlanID=pl.ID 
 where pl.ID in(select ID from Plans pn where pn.YearID=@YearID)
GO
/****** Object:  StoredProcedure [dbo].[GetDataTHatNoAddDegreePerTerm]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[GetDataTHatNoAddDegreePerTerm](@TermID int,@yearID int)
as
select stl.YearID,st.ID stdid,st.sname,st.LastName,st.gender,st.natianalityt,st.SeqID,stl.sgroup,st.Village,stl.lvlState,stl.GroupID,stl.LevelID from StudentLevels stl inner join student st on st.ID=stl.StdID
where st.IsDelete=0 and stl.YearID=@yearID and st.ID not in (

select studentid from studentdegree sd 

 where sd.yearID=stl.YearID and sd.levelid=stl.LevelID and termid=@TermID )
GO
/****** Object:  StoredProcedure [dbo].[GetDistributeStudent]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetDistributeStudent](@YearID int)
as 
select rst.*,st.sname,st.LastName,st.gender,lvl.levelname,rm.RoomName,rm.NumberOfPlace ,tr.termname,sy.studyYearEngl 
,(select pr.Name from dbo.Periods pr where pr.ID=ex.PeriodID ) PeriodName
,ex.FromTime 
,ex.ToTime
from RoomStudentInExam rst left outer join ExamPeriod ex on ex.ID=rst.PeriodID
 inner join   student st on st.ID=rst.StdID --inner join StudentLevels stl on st.ID=stl.StdID
inner join levels lvl on rst.LevelID=lvl.levelid 
inner join Rooms rm on rm.ID=rst.RoomID 
inner join terms tr on tr.termid=rst.TermID 
inner join studyYear sy on sy.seqid=rst.YearID
where st.IsDelete=0 and sy.seqid=@YearID
order by lvl.levelid,st.sname,st.LastName
--inner join 
GO
/****** Object:  StoredProcedure [dbo].[getMaxNumber]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[getMaxNumber] (@levelid int,@sgroup nvarchar(4))
as
begin
select  isnull(max(SeqID),0)+1 from student where isnull(IsDelete,0)=0
end
GO
/****** Object:  StoredProcedure [dbo].[GetProfileHorizontal]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetProfileHorizontal]
(@YearID int,@startWeek int,@EndWeek int,@YearProfile int)
as
 select distinct  tc.ID,tc.TeacherName,pr.NumberWeek,tc.TypeTeacherID,tc.TypeTeacher,tyt.TypeName,pr.YearProfile
,(select p1.Cdate      from ProfilePermanences p1 where p1.NumberDay=1 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile ) SaturdayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=1 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeSaturday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=1 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeSaturday

,(select p2.Cdate      from ProfilePermanences p2 where p2.NumberDay=2 and p2.TeatcherID=tc.ID and p2.NumberWeek=pr.NumberWeek and p2.YearID=pr.YearID and p2.YearProfile=pr.YearProfile) SundayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=2 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeSunday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=2 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeSunday

,(select p3.Cdate      from ProfilePermanences p3 where p3.NumberDay=3 and p3.TeatcherID=tc.ID and p3.NumberWeek=pr.NumberWeek and p3.YearID=pr.YearID and p3.YearProfile=pr.YearProfile) MondayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=3 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeSMonday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=3 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeMonday

,(select p4.Cdate      from ProfilePermanences p4 where p4.NumberDay=4 and p4.TeatcherID=tc.ID and p4.NumberWeek=pr.NumberWeek and p4.YearID=pr.YearID and p4.YearProfile=pr.YearProfile) TuesdayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=4 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeTuesday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=4 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeTuesday

,(select p5.Cdate      from ProfilePermanences p5 where p5.NumberDay=5 and p5.TeatcherID=tc.ID and p5.NumberWeek=pr.NumberWeek and p5.YearID=pr.YearID and p5.YearProfile=pr.YearProfile) WednesdayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=5 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeWednesday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=5 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeWednesday

,(select p6.Cdate      from ProfilePermanences p6 where p6.NumberDay=6 and p6.TeatcherID=tc.ID and p6.NumberWeek=pr.NumberWeek and p6.YearID=pr.YearID and p6.YearProfile=pr.YearProfile) ThursdayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=6 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeThursday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=6 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeThursday

,(select p7.Cdate      from ProfilePermanences p7 where p7.NumberDay=7 and p7.TeatcherID=tc.ID and p7.NumberWeek=pr.NumberWeek and p7.YearID=pr.YearID and p7.YearProfile=pr.YearProfile) FridayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=7 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeFriday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=7 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeFriday

from Teacher tc inner join ProfilePermanences pr on tc.ID=pr.TeatcherID inner join TypeTeatcher tyt on tyt.ID=tc.TypeTeacherID
where pr.YearID=@YearID and pr.YearProfile=@YearProfile and pr.NumberWeek between @startWeek and @EndWeek
GO
/****** Object:  StoredProcedure [dbo].[GetProfileHorizontalNew]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetProfileHorizontalNew]
(@YearID int,@starDate datetime,@EndDate datetime,@YearProfile int)
as
 select distinct  tc.ID,tc.TeacherName,pr.NumberWeek,tc.TypeTeacherID,tc.TypeTeacher,tyt.TypeName,pr.YearProfile,tc.Gender
,(select p1.Cdate      from ProfilePermanences p1 where p1.NumberDay=1 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile ) SaturdayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=1 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeSaturday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=1 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeSaturday

,(select p2.Cdate      from ProfilePermanences p2 where p2.NumberDay=2 and p2.TeatcherID=tc.ID and p2.NumberWeek=pr.NumberWeek and p2.YearID=pr.YearID and p2.YearProfile=pr.YearProfile) SundayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=2 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeSunday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=2 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeSunday

,(select p3.Cdate      from ProfilePermanences p3 where p3.NumberDay=3 and p3.TeatcherID=tc.ID and p3.NumberWeek=pr.NumberWeek and p3.YearID=pr.YearID and p3.YearProfile=pr.YearProfile) MondayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=3 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeSMonday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=3 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeMonday

,(select p4.Cdate      from ProfilePermanences p4 where p4.NumberDay=4 and p4.TeatcherID=tc.ID and p4.NumberWeek=pr.NumberWeek and p4.YearID=pr.YearID and p4.YearProfile=pr.YearProfile) TuesdayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=4 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeTuesday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=4 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeTuesday

,(select p5.Cdate      from ProfilePermanences p5 where p5.NumberDay=5 and p5.TeatcherID=tc.ID and p5.NumberWeek=pr.NumberWeek and p5.YearID=pr.YearID and p5.YearProfile=pr.YearProfile) WednesdayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=5 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeWednesday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=5 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeWednesday

,(select p6.Cdate      from ProfilePermanences p6 where p6.NumberDay=6 and p6.TeatcherID=tc.ID and p6.NumberWeek=pr.NumberWeek and p6.YearID=pr.YearID and p6.YearProfile=pr.YearProfile) ThursdayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=6 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeThursday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=6 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeThursday

,(select p7.Cdate      from ProfilePermanences p7 where p7.NumberDay=7 and p7.TeatcherID=tc.ID and p7.NumberWeek=pr.NumberWeek and p7.YearID=pr.YearID and p7.YearProfile=pr.YearProfile) FridayDate
,(select p1.PringTime  from ProfilePermanences p1 where p1.NumberDay=7 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) PringTimeFriday
,(select p1.LogoutTime from ProfilePermanences p1 where p1.NumberDay=7 and p1.TeatcherID=tc.ID and p1.NumberWeek=pr.NumberWeek and p1.YearID=pr.YearID and p1.YearProfile=pr.YearProfile) LogoutTimeFriday

from Teacher tc inner join ProfilePermanences pr on tc.ID=pr.TeatcherID inner join TypeTeatcher tyt on tyt.ID=tc.TypeTeacherID
where  convert(date,pr.Cdate) between CONVERT(date, @starDate) and convert(date,@EndDate)
GO
/****** Object:  StoredProcedure [dbo].[GetProfilePermanence]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE proc [dbo].[GetProfilePermanence] (@stDate date,@enDate date)
 as
 select 
 tc.ID TeatcherID
,tc.TeacherName
,tc.Gender
,tc.Phone
,tc.[Address]
,tc.TypeTeacherID
,ty.TypeName
,pr.Cdate
,pr.[DayName]
,pr.NumberDay
,pr.NumberWeek
,pr.LogoutTime
,pr.PringTime
from ProfilePermanences pr inner join Teacher tc on tc.ID=pr.TeatcherID inner join TypeTeatcher ty on ty.ID=tc.TypeTeacherID
where CONVERT(date,pr.Cdate,101) between CONVERT(date,@stDate,101) and CONVERT(date,@enDate,101)
GO
/****** Object:  StoredProcedure [dbo].[getReportStudent]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[getReportStudent]
(@termid int,@yearid int, @levelid int)
as
select distinct bstd.stdid,bstd.SeqID,bstd.sname+' '+bstd.LastName as fullName,bstd.levelid,bstd.sgroup,bstd.BirthPlace,bstd.genderNumber,bstd.coursFialCount,
bstd.ResultTxt,bstd.studyYearEngl,bstd.natianalityt,bstd.lvlState,bstd.levelname ,bstd.StudentRamk,bstd.yearID
from BasicStudentDataV bstd where IsDelete=0 and termid=@termid and yearID=@yearid and levelid=@levelid
GO
/****** Object:  StoredProcedure [dbo].[getSchoolData]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[getSchoolData]
as
select scl.seqid,scl.schoolName,scl.LogoImage,scl.gover,scl.city,scl.AdminSchool,tch.TeacherName
 from schoolData scl inner join Teacher tch on scl.AdminSchool=tch.ID
GO
/****** Object:  StoredProcedure [dbo].[GetStudentData]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetStudentData](
@YearID int=0,@LevelID int=0 
)
as
select st.ID
      ,st.sname
	  ,st.LastName
	  ,st.bdate
	  ,st.BirthPlace
	  ,st.gender
	  ,st.levelid EnteryLevelID
	  ,st.natianalityt
	  ,st.SeqID
	  ,st.stdImage
	  ,st.Notes
	  ,st.Village
	  ,st.yearid YearEntery
	  ,stl.LevelID
	  ,stl.lvlState
	  ,stl.sgroup
	  ,stl.YearID  
	  ,stl.GroupID
from StudentLevels stl  inner join student st on stl.StdID=st.ID 

where stl.YearID=case when @YearID>0 then @YearID else stl.YearID end 
      and stl.LevelID=case when @LevelID>0 then @LevelID else stl.LevelID end
	  and isnull(st.IsDelete,0)=0 and isnull(stl.active,1)=1
	  order by  st.gender desc,st.sname,st.LastName
GO
/****** Object:  StoredProcedure [dbo].[getStudentDataFinal]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--select distinct ID,sname,courseid,coursename,levelid,levelname , TotalTerm1+TotalTerm2 from StudentData 
CREATE proc [dbo].[getStudentDataFinal] 
as
select ID, sname,courseid,coursename,yearid,studyYearArab ,levelid,levelname,BirthPlace,LastName,gender,natianalityt,sgroup,Village,Notes,bdate,
(select TotalAll from StudentData where StudentData.courseid=sdd.courseid and StudentData.ID=sdd.ID and termid=1 and StudentData.levelid=sdd.levelid and StudentData.yearid=sdd.yearid ) as term1 
,(select TotalAll from StudentData where StudentData.courseid=sdd.courseid and StudentData.ID=sdd.ID and termid=2 and StudentData.levelid=sdd.levelid and StudentData.yearid=sdd.yearid) as term2 ,
SUM(TotalAll) as TotalAll,

(case when SUM(totalAll)<50 then 1  else 0 end
 ) as aps
,(select COUNT(courseid) from StudentPrif where totalAll<50 and ID=sdd.ID)as coursecount,
(case  
DENSE_RANK() over ( partition by sdd.levelid order by sdd.levelid,sum(sdd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end)  as StudentRamk
 from StudentData sdd
group by ID,courseid ,sname,coursename,yearid,studyYearArab,levelid,levelname,BirthPlace,LastName,gender,natianalityt,sgroup,Village,Notes,bdate
GO
/****** Object:  StoredProcedure [dbo].[getStudentForManipulate]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[getStudentForManipulate]
as
select frs.courseid,frs.levelid,frs.sname+' '+frs.LastName FullName,frs.coursename,frs.TotalAllterm1,frs.TotalAllterm2,frs.coursFialCount,frs.amontapsentcourse
,frs.avgst,frs.bdate,frs.BirthPlace,frs.deg1term1,frs.deg1term2,frs.deg2term1,frs.deg2term2,frs.deg3term1,frs.deg3term2,frs.deg4term1,frs.deg4term2,frs.forfullterm1,frs.forfullterm2
,frs.gender,frs.IsDelete,frs.levelname,frs.lvlState,frs.natianalityt,frs.Notes,frs.PlanID,frs.SeqID,frs.sgroup,frs.stdid,frs.StudentRamk,frs.studyYearEngl,frs.TotalAll,frs.Village,frs.yearID


 from LevelCourse lvc inner join GetFinalResultStudent() frs 
on frs.courseid=lvc.CourseID and frs.PlanID=lvc.PlanID and frs.levelid=lvc.LevelID inner join plans pl on frs.PlanID=pl.ID 
and lvc.PlanID=pl.ID and pl.YearID=frs.yearID 
where  lvc.IsActive=1  and frs.coursFialCount>0
group by frs.courseid,frs.levelid,frs.sname+' '+frs.LastName,frs.coursename,frs.TotalAllterm1,frs.TotalAllterm2,frs.coursFialCount,frs.amontapsentcourse
,frs.avgst,frs.bdate,frs.BirthPlace,frs.deg1term1,frs.deg1term2,frs.deg2term1,frs.deg2term2,frs.deg3term1,frs.deg3term2,frs.deg4term1,frs.deg4term2,frs.forfullterm1,frs.forfullterm2
,frs.gender,frs.IsDelete,frs.levelname,frs.lvlState,frs.natianalityt,frs.Notes,frs.PlanID,frs.SeqID,frs.sgroup,frs.stdid,frs.StudentRamk,frs.studyYearEngl,frs.TotalAll,frs.Village,frs.yearID

--select * from GetFinalResultStudent()

GO
/****** Object:  StoredProcedure [dbo].[getStudentForManipulateWithParameter]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[getStudentForManipulateWithParameter]
(@yearid int ,@levelid int)
as
select frs.courseid,frs.levelid,frs.sname+' '+isnull(frs.LastName,'') FullName,frs.coursename,frs.TotalAllterm1,frs.TotalAllterm2,frs.coursFialCount,frs.amontapsentcourse
,frs.avgst,frs.bdate,frs.BirthPlace,frs.deg1term1,frs.deg1term2,frs.deg2term1,frs.deg2term2,frs.deg3term1,frs.deg3term2,frs.deg4term1,frs.deg4term2,frs.forfullterm1,frs.forfullterm2
,frs.gender,frs.IsDelete,frs.levelname,frs.lvlState,frs.natianalityt,frs.Notes,frs.PlanID,frs.SeqID,frs.sgroup,frs.stdid,frs.StudentRamk,frs.studyYearEngl,frs.TotalAll,frs.Village,frs.yearID


 from LevelCourse lvc inner join GetFinalResultStudent() frs 
on frs.courseid=lvc.CourseID and frs.PlanID=lvc.PlanID and frs.levelid=lvc.LevelID inner join plans pl on frs.PlanID=pl.ID 
and lvc.PlanID=pl.ID and pl.YearID=frs.yearID 
where  lvc.IsActive=1  and frs.coursFialCount>0 and frs.yearID=case when @yearid>0 then @yearid else frs.yearID end 
 and frs.levelid=case when @levelid>0 then @levelid else frs.levelid end 
 and (frs.TotalAllterm1+frs.TotalAllterm2)<50
group by frs.courseid,frs.levelid,frs.sname,frs.LastName,frs.coursename,frs.TotalAllterm1,frs.TotalAllterm2,frs.coursFialCount,frs.amontapsentcourse
,frs.avgst,frs.bdate,frs.BirthPlace,frs.deg1term1,frs.deg1term2,frs.deg2term1,frs.deg2term2,frs.deg3term1,frs.deg3term2,frs.deg4term1,frs.deg4term2,frs.forfullterm1,frs.forfullterm2
,frs.gender,frs.IsDelete,frs.levelname,frs.lvlState,frs.natianalityt,
frs.Notes,frs.PlanID,frs.SeqID,frs.sgroup,frs.stdid,frs.StudentRamk,frs.studyYearEngl,frs.TotalAll,frs.Village,frs.yearID
order by frs.sname
GO
/****** Object:  StoredProcedure [dbo].[getStudentForTertmResult]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[getStudentForTertmResult]
(@levelid int,@yearid int)
as
select * from BasicStudentDataV
where IsDelete=0 and levelid=@levelid and yearID=@yearid
GO
/****** Object:  StoredProcedure [dbo].[GetStudentTermData]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetStudentTermData](@TermID int,@YearID int ,@LevelID int)
as 
begin
declare @trmID int=@TermID,@YerID int=@YearID,@lvlid int=@LevelID
SELECT                 sdeg.stdid
                      , sdeg.sname
					  , sdeg.LastName
					  , sdeg.levelid
					  , sdeg.bdate
					  , sdeg.BirthPlace
					  , sdeg.gender
					  , sdeg.sgroup
					  , sdeg.GroupID
					  , sdeg.lvlState
					  , sdeg.IsLeave
					  , sdeg.SeqID
					  , sdeg.SeqID
					  , sdeg.Village
					  , sdeg.natianalityt
					  , sdeg.levelname
					  , SUM(CASE WHEN sdeg.CourseID = 1  THEN sdeg.deg1 ELSE 0 END) AS Qrndeg1
					  , SUM(CASE WHEN sdeg.CourseID = 1  THEN sdeg.deg2 ELSE 0 END) AS Qrndeg2
					  , SUM(CASE WHEN sdeg.CourseID = 1  THEN sdeg.forFull ELSE 0 END) AS QrnForFull
					  , SUM(CASE WHEN sdeg.CourseID = 1  THEN sdeg.TotalAll ELSE 0 END) AS QrnTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 2  THEN sdeg.deg1 ELSE 0 END) AS Islamicdeg1
					  , SUM(CASE WHEN sdeg.CourseID = 2  THEN sdeg.deg2 ELSE 0 END) AS Islamicdeg2
					  , SUM(CASE WHEN sdeg.CourseID = 2  THEN sdeg.forFull ELSE 0 END) AS IslamicForFull
					  , SUM(CASE WHEN sdeg.CourseID = 2  THEN sdeg.TotalAll ELSE 0 END) AS IslamicTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 3  THEN sdeg.deg1 ELSE 0 END) AS ardeg1
					  , SUM(CASE WHEN sdeg.CourseID = 3  THEN sdeg.deg2 ELSE 0 END) AS ardeg2
					  , SUM(CASE WHEN sdeg.CourseID = 3  THEN sdeg.forFull ELSE 0 END) AS arForFull
					  , SUM(CASE WHEN sdeg.CourseID = 3  THEN  sdeg.TotalAll ELSE 0 END) AS artTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 4  THEN sdeg.deg1 ELSE 0 END) AS Endeg1
					  , SUM(CASE WHEN sdeg.CourseID = 4  THEN sdeg.deg2 ELSE 0 END) AS Endeg2
					  , SUM(CASE WHEN sdeg.CourseID = 4  THEN sdeg.forFull ELSE 0 END) AS EnForFull
					  , SUM(CASE WHEN sdeg.CourseID = 4  THEN  sdeg.TotalAll ELSE 0 END) AS EnTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 5  THEN sdeg.deg1 ELSE 0 END) AS mathdeg1
					  , SUM(CASE WHEN sdeg.CourseID = 5  THEN sdeg.deg2 ELSE 0 END) AS mathdeg2 
					  , SUM(CASE WHEN sdeg.CourseID = 5  THEN sdeg.forFull ELSE 0 END) AS mathForFull
					  , SUM(CASE WHEN sdeg.CourseID = 5  THEN  sdeg.TotalAll ELSE 0 END) AS mathTotalAll
                      , SUM(CASE WHEN sdeg.CourseID = 6  THEN sdeg.deg1 ELSE 0 END) AS scodeg1
					  , SUM(CASE WHEN sdeg.CourseID = 6  THEN sdeg.deg2 ELSE 0 END) AS scodeg2
					  , SUM(CASE WHEN sdeg.CourseID = 6  THEN sdeg.forFull ELSE 0 END) AS scoForFull
					  , SUM(CASE WHEN sdeg.CourseID = 6  THEN  sdeg.TotalAll ELSE 0 END) AS scoTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 7  THEN sdeg.deg1 ELSE 0 END) AS scideg1
					  , SUM(CASE WHEN sdeg.CourseID = 7  THEN sdeg.deg2 ELSE 0 END) AS scideg2
					  , SUM(CASE WHEN sdeg.CourseID = 7  THEN sdeg.forFull ELSE 0 END) AS sciForFull
					  , SUM(CASE WHEN sdeg.CourseID = 7  THEN  sdeg.TotalAll ELSE 0 END) AS sciTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 8  THEN sdeg.deg1 ELSE 0 END) AS compdeg1 
                      , SUM(CASE WHEN sdeg.CourseID = 8  THEN sdeg.deg2 ELSE 0 END) AS compdeg2
					  , SUM(CASE WHEN sdeg.CourseID = 8  THEN sdeg.forFull ELSE 0 END) AS compForFull
					  , SUM(CASE WHEN sdeg.CourseID = 8  THEN  sdeg.TotalAll ELSE 0 END) AS compTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 9  THEN sdeg.deg1 ELSE 0 END)  AS artdeg1
					  , SUM(CASE WHEN sdeg.CourseID = 9  THEN sdeg.deg2 ELSE 0 END) AS artdeg2
					  , SUM(CASE WHEN sdeg.CourseID = 9  THEN sdeg.forFull ELSE 0 END) AS artForFull
					  , SUM(CASE WHEN sdeg.CourseID = 9  THEN  sdeg.TotalAll ELSE 0 END) AS artTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 10 THEN sdeg.deg1 ELSE 0 END) AS sportdeg1
					  , SUM(CASE WHEN sdeg.CourseID = 10 THEN sdeg.deg2 ELSE 0 END) AS sportdeg2
					  , SUM(CASE WHEN sdeg.CourseID = 10 THEN sdeg.forFull ELSE 0 END) AS sportForFull
					  , SUM(CASE WHEN sdeg.CourseID = 10 THEN  sdeg.TotalAll ELSE 0 END) AS sportTotalAll
					  , SUM(case when sdeg.forFull>0 then 1 else 0 end) AS CountForFullCourse
					, sdeg.curseCount AS LevelCrsCounts
					, sdeg.coursFialCount
					, sdeg.amontapsentcourse
					, sdeg.rnkTotal AS ttl
					, ROUND(sdeg.avgst, 2) AS prcnt
					, sdeg.StudentRamk, sdeg.yearID
					
					, CASE WHEN sdeg.amontapsentcourse > 0 THEN '3' WHEN sdeg.[coursFialCount] >= 1 THEN '2' WHEN sdeg.coursFialCount <= 0 THEN '1' END AS ResultTxt
					, CASE WHEN sdeg.gender = 'انثى' THEN 2 ELSE 1 END AS genderNumber
FROM            dbo.BasicStudentDataV AS sdeg 
WHERE        (sdeg.IsDelete = 0 AND sdeg.termid=@trmID AND sdeg.levelid=@lvlid AND sdeg.yearID=@YerID)
GROUP BY sdeg.stdid
                      , sdeg.sname
					  , sdeg.LastName
					  , sdeg.levelid
					  , sdeg.bdate
					  , sdeg.BirthPlace
					  , sdeg.gender
					  , sdeg.sgroup
					  , sdeg.GroupID
					  , sdeg.lvlState
					  , sdeg.IsLeave
					  , sdeg.SeqID
					  , sdeg.Village
					  , sdeg.SeqID
					  , sdeg.natianalityt
					  , sdeg.levelname 
					  , sdeg.curseCount
					  , sdeg.coursFialCount
					  , sdeg.amontapsentcourse
					  , sdeg.rnkTotal
					  , sdeg.avgst
					  , sdeg.StudentRamk
					  , sdeg.yearID
					  , ResultTxt
					  , genderNumber

	end
GO
/****** Object:  StoredProcedure [dbo].[GetStudentThatNoAddToDegree]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[GetStudentThatNoAddToDegree]
(
@YearID int
)
as
begin
select s.* from StudentLevels sl inner join student s on s.ID=sl.StdID  where s.IsDelete=0 and sl.YearID=@YearID and sl.StdID not in(
select ID  from 

	(select distinct st.ID,st.sname,st.LastName,st.BirthPlace,st.gender,st.Village,st.GroupID
	 from student st full outer join studentdegree std on st.ID=std.studentid 
	full outer join StudentLevels stl on st.ID=stl.StdID and stl.StdID=std.studentid and stl.LevelID=std.levelid
	where st.IsDelete=0 and stl.YearID=@YearID and std.yearID=@YearID 
	
	) as tmp)
	
	end
GO
/****** Object:  StoredProcedure [dbo].[GetTypSchool]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[GetTypSchool]
as
select 
case when basicLvl>0 and ScondLvl>0 then 0 
     when basicLvl>0 and ScondLvl<=0 then 1
	 when basicLvl<=0 and ScondLvl>0 then 2
	 end as typSchool
from
(
select
 sum(case when lvl.LevelTypeID=1 and lvl.IsStop=0 then 1 else 0 end) basicLvl
 ,sum(case when lvl.LevelTypeID=2 and lvl.IsStop=0 then 1 else 0 end) ScondLvl
 from levels lvl
 ) tmb
GO
/****** Object:  StoredProcedure [dbo].[GetTypSchoolByYear]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[GetTypSchoolByYear](@YearID int)
as
--declare @YearID int =2026
select 
isnull(case when basicLvl>0 and ScondLvl>0 then 0 
     when basicLvl>0 and ScondLvl<=0 then 1
	 when basicLvl<=0 and ScondLvl>0 then 2
	 end,1) as typSchool
from
(
select
  (select Count(*) from student s inner join StudentLevels stl on s.ID=stl.StdID 
inner join levels lvl on lvl.levelid=stl.LevelID

 where s.IsDelete=0 and stl.YearID=case when @YearID>0 then @YearID else stl.YearID end and lvl.LevelTypeID=1 and lvl.IsStop=0) basicLvl
 ,(select Count(*) from student s inner join StudentLevels stl on s.ID=stl.StdID 
inner join levels lvl on lvl.levelid=stl.LevelID

 where s.IsDelete=0 and stl.YearID=case when @YearID>0 then @YearID else stl.YearID end and lvl.LevelTypeID=2 and lvl.IsStop=0) ScondLvl
 --from levels lvl
 ) tmb
GO
/****** Object:  StoredProcedure [dbo].[MergeStudenToGroup]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[MergeStudenToGroup]
(
@GroupID int,
@YearID int,
@LevelID int
)
as
begin

update student set GroupID=@GroupID where ID in (select stdl.StdID from StudentLevels stdl where stdl.YearID=@YearID and stdl.LevelID=@LevelID) and ISNULL(IsDelete,0)=0
update StudentLevels set GroupID=@GroupID 
where YearID=@YearID and LevelID=@LevelID

update StudentLevels set sgroup=gr.GroupName
from dbo.StudentLevels inner join dbo.[Group] gr on gr.ID=dbo.StudentLevels.GroupID 
where YearID=@YearID and LevelID=@LevelID

UPDATE student SET sgroup=gr.GroupName 
from dbo.student inner join dbo.[Group] gr on gr.ID=dbo.student.GroupID 
end
GO
/****** Object:  StoredProcedure [dbo].[Proc_AddProfilPermanences]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[Proc_AddProfilPermanences] (@yearID int,@startdate datetime,@endDate datetime )
as
declare @sdate datetime=@startdate,@edate datetime =@endDate--, @YearID int=2017
set datefirst 6;
while (@sdate<=@edate)
begin
insert into ProfilePermanences (TeatcherID,Cdate,NumberDay,NumberWeek,[DayName],YearProfile,YearID)
select tbl.ID,tbl.cdate,dynumber,numweek,dyname,profileYear,@YearID YearID from (
select ID,@sdate cdate,DATEPART(DW,@sdate) dynumber
,DATEPART(WEEK,@sdate) numweek
,case  when DATEPART(DW,@sdate)=1 then N'السبت'
       when DATEPART(DW,@sdate)=2 then N'الاحد'
	   when DATEPART(DW,@sdate)=3 then N'الاثنين'
	   when DATEPART(DW,@sdate)=4 then N'الثلاثاء'
	   when DATEPART(DW,@sdate)=5 then N'الاربعاء'
	   when DATEPART(DW,@sdate)=6 then N'الخميس'
	   when DATEPART(DW,@sdate)=7 then N'الجمعة' end dyname
,DATEPART(YYYY,@sdate) profileYear
 from Teacher) tbl 
where tbl.ID not in (select  pr.TeatcherID from ProfilePermanences pr where CONVERT(date ,pr.Cdate)=CONVERT(date ,@sdate))
 set @sdate=DATEADD(DAY,1,@sdate);
 -- left outer join (select p.ID, p.TeatcherID,p.Cdate,p.NumberDay from ProfilePermanences p ) pr on convert(date,pr.Cdate,101)=CONVERT(date, tbl.cdate,101) --and pr.YearProfile=tbl.profileYear
 --where pr.YearID=@YearID
 --where tbl.ID not in (select pr.TeatcherID from ProfilePermanences pr where CONVERT(date,pr.Cdate,101)=convert(date,tbl.cdate,101) and pr.NumberDay=tbl.dynumber and pr.NumberWeek=tbl.numweek and pr.YearID=@YearID and pr.YearProfile=tbl.profileYear) 
 --select * from ProfilePermanences
 end
GO
/****** Object:  StoredProcedure [dbo].[proc_GetDegreeFromTermToAnother]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[proc_GetDegreeFromTermToAnother]
(
 @target int ,@termID int
 ,@levelID int,@YearID int,@stdid int=0
)
as
--declare @target int =1,@termID int=2
update studentdegree set deg1=tmp.deg1,deg2=tmp.deg2
from
(
select sd.*
from studentdegree inner join studentdegree sd on studentdegree.studentid=sd.studentid and studentdegree.courseID=sd.courseID and studentdegree.levelid=sd.levelid
and studentdegree.termid=sd.termid and studentdegree.yearID=sd.yearID

where studentDegree.yearID=@YearID and studentdegree.levelid=@levelID and studentdegree.termid=@target
) as tmp inner join studentdegree on 
studentdegree.studentid=tmp.studentid and studentdegree.courseID=tmp.courseID and studentdegree.levelid=tmp.levelid
and studentdegree.termid=@termID and studentdegree.yearID=tmp.yearID and studentdegree.studentid=@stdid
GO
/****** Object:  StoredProcedure [dbo].[Proc_GetFinalResultDataForTermNew]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[Proc_GetFinalResultDataForTermNew](@TermID int,@YearID int ,@LevelID int)
as
--declare @yearid int= 2010,@levelid int=2



--declare @yearid int= 2010,@levelid int=2 ,@TermID int=1
select *, case when coursFialCount<=0 then RamkByGroupInner else '' end RamkByGroup
,case when coursFialCount<=0 then RamkByLevelInner else '' end RamkByLevel 
,round((ttl/LevelCrsCounts),2) avarage
from
(select                
                       sd.studentid stdid
                      , st.sname
					  , st.LastName
					  , sd.levelid levelid
					  , st.bdate
					  , st.BirthPlace
					  , st.gender
					  , stl.sgroup
					  , stl.GroupID
					  , stl.lvlState
					  , isnull(st.IsLeave,0) IsLeave
					  , st.SeqID
					  ,(select rse.NumperPass from RoomStudentInExam rse where rse.TermID=sd.termid and rse.YearID=sd.yearID and rse.LevelID=sd.levelid and rse.StdID=sd.studentid) as NumberPass
					  , st.Village
					  , st.natianalityt
					  , (select lv.levelname from levels lv where lv.levelid=sd.levelid) levelname
					  ,sd.termid
					  , SUM(CASE WHEN sd.CourseID = 1  THEN sd.deg1 ELSE 0 END) AS Qrndeg1
					  , SUM(CASE WHEN sd.CourseID = 1  THEN sd.deg2 ELSE 0 END) AS Qrndeg2
					  , SUM(CASE WHEN sd.CourseID = 1  THEN sd.forFull ELSE 0 END) AS QrnForFull
					  , SUM(CASE WHEN sd.CourseID = 1  THEN sd.TotalAll ELSE 0 END) AS QrnTotalAll
					  , SUM(CASE WHEN sd.CourseID = 2  THEN sd.deg1 ELSE 0 END) AS Islamicdeg1
					  , SUM(CASE WHEN sd.CourseID = 2  THEN sd.deg2 ELSE 0 END) AS Islamicdeg2
					  , SUM(CASE WHEN sd.CourseID = 2  THEN sd.forFull ELSE 0 END) AS IslamicForFull
					  , SUM(CASE WHEN sd.CourseID = 2  THEN sd.TotalAll ELSE 0 END) AS IslamicTotalAll
					  , SUM(CASE WHEN sd.CourseID = 3  THEN sd.deg1 ELSE 0 END) AS ardeg1
					  , SUM(CASE WHEN sd.CourseID = 3  THEN sd.deg2 ELSE 0 END) AS ardeg2
					  , SUM(CASE WHEN sd.CourseID = 3  THEN sd.forFull ELSE 0 END) AS arForFull
					  , SUM(CASE WHEN sd.CourseID = 3  THEN sd.TotalAll ELSE 0 END) AS arTotalAll
					  , SUM(CASE WHEN sd.CourseID = 4  THEN sd.deg1 ELSE 0 END) AS Endeg1
					  , SUM(CASE WHEN sd.CourseID = 4  THEN sd.deg2 ELSE 0 END) AS Endeg2
					  , SUM(CASE WHEN sd.CourseID = 4  THEN sd.forFull ELSE 0 END) AS EnForFull
					  , SUM(CASE WHEN sd.CourseID = 4  THEN sd.TotalAll ELSE 0 END) AS EnTotalAll
					  , SUM(CASE WHEN sd.CourseID = 5  THEN sd.deg1 ELSE 0 END) AS mathdeg1
					  , SUM(CASE WHEN sd.CourseID = 5  THEN sd.deg2 ELSE 0 END) AS mathdeg2 
					  , SUM(CASE WHEN sd.CourseID = 5  THEN sd.forFull ELSE 0 END) AS mathForFull
					  , SUM(CASE WHEN sd.CourseID = 5  THEN sd.TotalAll ELSE 0 END) AS mathTotalAll
                      , SUM(CASE WHEN sd.CourseID = 6  THEN sd.deg1 ELSE 0 END) AS scodeg1
					  , SUM(CASE WHEN sd.CourseID = 6  THEN sd.deg2 ELSE 0 END) AS scodeg2
					  , SUM(CASE WHEN sd.CourseID = 6  THEN sd.forFull ELSE 0 END) AS scoForFull
					  , SUM(CASE WHEN sd.CourseID = 6  THEN sd.TotalAll ELSE 0 END) AS scoTotalAll
					  , SUM(CASE WHEN sd.CourseID = 7  THEN sd.deg1 ELSE 0 END) AS scideg1
					  , SUM(CASE WHEN sd.CourseID = 7  THEN sd.deg2 ELSE 0 END) AS scideg2
					  , SUM(CASE WHEN sd.CourseID = 7  THEN sd.forFull ELSE 0 END) AS sciForFull
					  , SUM(CASE WHEN sd.CourseID = 7  THEN sd.TotalAll ELSE 0 END) AS sciTotalAll
					  , SUM(CASE WHEN sd.CourseID = 8  THEN sd.deg1 ELSE 0 END) AS compdeg1 
                      , SUM(CASE WHEN sd.CourseID = 8  THEN sd.deg2 ELSE 0 END) AS compdeg2
					  , SUM(CASE WHEN sd.CourseID = 8  THEN sd.forFull ELSE 0 END) AS compForFull
					  , SUM(CASE WHEN sd.CourseID = 8  THEN sd.TotalAll ELSE 0 END) AS compTotalAll
					  , SUM(CASE WHEN sd.CourseID = 9  THEN sd.deg1 ELSE 0 END)  AS artdeg1
					  , SUM(CASE WHEN sd.CourseID = 9  THEN sd.deg2 ELSE 0 END) AS artdeg2
					  , SUM(CASE WHEN sd.CourseID = 9  THEN sd.forFull ELSE 0 END) AS artForFull
					  , SUM(CASE WHEN sd.CourseID = 9  THEN sd.TotalAll ELSE 0 END) AS artTotalAll
					  , SUM(CASE WHEN sd.CourseID = 10 THEN sd.deg1 ELSE 0 END) AS sportdeg1
					  , SUM(CASE WHEN sd.CourseID = 10 THEN sd.deg2 ELSE 0 END) AS sportdeg2
					  , SUM(CASE WHEN sd.CourseID = 10 THEN sd.forFull ELSE 0 END) AS sportForFull
					  , SUM(CASE WHEN sd.CourseID = 10 THEN sd.TotalAll ELSE 0 END) AS sportTotalAll

					  ,sum(case when sd.courseID=11 then sd.deg1 else 0 end) PhysicDeg1
                      ,sum(case when sd.courseID=11 then sd.deg2 else 0 end) PhysicDeg2
                      ,sum(case when sd.courseID=11 then sd.forFull else 0 end) PhysicForFull
                      ,sum(case when sd.courseID=11 then sd.TotalAll else 0 end) PhysicTotal
                      
                      ,sum(case when sd.courseID=12 then sd.deg1 else 0 end) chemistryDeg1
                      ,sum(case when sd.courseID=12 then sd.deg2 else 0 end) chemistryDeg2
                      ,sum(case when sd.courseID=12 then sd.forFull else 0 end) chemistryForFull
                      ,sum(case when sd.courseID=12 then sd.TotalAll else 0 end) chemistryTotal
                      
                      ,sum(case when sd.courseID=13 then sd.deg1 else 0 end) BiologyDeg1
                      ,sum(case when sd.courseID=13 then sd.deg2 else 0 end) BiologyDeg2
                      ,sum(case when sd.courseID=13 then sd.forFull else 0 end) BiologyForFull
                      ,sum(case when sd.courseID=13 then sd.TotalAll else 0 end) BiologyTotal

					  ,sum(case when sd.courseID=14 then sd.deg1 else 0 end) Geographic1
                      ,sum(case when sd.courseID=14 then sd.deg2 else 0 end) Geographic2
                      ,sum(case when sd.courseID=14 then sd.forFull else 0 end) GeographicForFull
                      ,sum(case when sd.courseID=14 then sd.TotalAll else 0 end) GeographicTotal

					  ,sum(case when sd.courseID=15 then sd.deg1 else 0 end) History1
                      ,sum(case when sd.courseID=15 then sd.deg2 else 0 end) History2
                      ,sum(case when sd.courseID=15 then sd.forFull else 0 end) HistoryFull
                      ,sum(case when sd.courseID=15 then sd.TotalAll else 0 end) History1Total
                      
                      ,sum(case when sd.courseID=16 then sd.deg1 else 0 end) Community1
                      ,sum(case when sd.courseID=16 then sd.deg2 else 0 end) Community2
                      ,sum(case when sd.courseID=16 then sd.forFull else 0 end) Community1Full
                      ,sum(case when sd.courseID=16 then sd.TotalAll else 0 end) Community1Total


					  , SUM(case when sd.forFull>0 then 1 else 0 end) AS CountForFullCourse
					  ,isnull(SUM(case when (sd.forFull)>0 then 1 else 0 end ),0) CountCourseForFull
					  ,SUm(sd.forFull) TotalAllForFull
					, (select count(*)  from dbo.LevelCourse lvc where lvc.LevelID=sd.levelid and lvc.IsActive=1 and lvc.termID=sd.termid and lvc.PlanID =(select p.ID from Plans p where p.YearID=sd.yearID)) AS LevelCrsCounts
					, isnull((select cf.coursFialCount from dbo.GetCourseFialPerTerm() cf where cf.levelid=sd.levelid and cf.termid=sd.termid and cf.studentid=sd.studentid and cf.YearID=sd.yearID),0) coursFialCount
		            , (select count(*) from studentdegree d1 inner join dbo.LevelCourse lvc on lvc.ID=d1.courseLevelID where lvc.IsActive=1 and d1.amontapsentcourse>0 and d1.studentid=sd.studentid and d1.levelid=sd.levelid and d1.termid=sd.termid and d1.yearID=sd.yearID) amontapsentcourse
					, (select sum(d1.TotalAll) from studentdegree d1 inner join dbo.LevelCourse lvc on lvc.ID=d1.courseLevelID where lvc.IsActive=1 and d1.studentid=sd.studentid and d1.levelid=sd.levelid and d1.termid=sd.termid and d1.yearID=sd.yearID) AS ttl
					--, ROUND(sdeg.avgst, 2) AS prcnt
					, (case  
DENSE_RANK() over ( partition by sd.yearid, sd.levelid,sd.termid,stl.GroupID order by sd.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end)  
  as RamkByGroupInner

					, (case  
DENSE_RANK() over ( partition by sd.yearid, sd.levelid,sd.termid order by sd.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end)  RamkByLevelInner
					, sd.yearID
					
					--, CASE WHEN isnull(sdeg.amontapsentcourse,0) > 0 THEN '3' WHEN isnull(sdeg.[coursFialCount],0) >= 1 THEN '2' WHEN isnull(sdeg.coursFialCount,0) <= 0 THEN '1' END AS ResultTxt
					, CASE WHEN st.gender = 'انثى' THEN 2 ELSE 1 END AS genderNumber 
					
					from studentdegree sd inner join dbo.student st on st.ID=sd.studentid inner join dbo.StudentLevels stl on st.ID=stl.StdID and stl.LevelID=sd.levelid and stl.YearID=sd.yearID
 where stl.YearID=@YearID and  sd.termid=@TermID and ISNULL(stl.active,1)=1 and
 st.IsDelete=0 and stl.LevelID=@LevelID  
group by               sd.yearID
                       ,sd.levelid
					   ,sd.termid
                      , sd.studentid
                      , st.sname
					  , st.LastName
					  
					  , st.bdate
					  , st.BirthPlace
					  , st.gender
					  , stl.sgroup
					  , stl.GroupID
					  , stl.lvlState
					  , st.IsLeave
					  , st.SeqID
					  , st.Village
					  , st.natianalityt
   ) tbl
   order by tbl.yearID, tbl.levelid,tbl.gender desc ,tbl.sname,tbl.LastName
GO
/****** Object:  StoredProcedure [dbo].[proc_GetFinalResultStudentNew]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[proc_GetFinalResultStudentNew](@yearid int,@levelid int)
as
declare @myearid int=@yearid,@mlevelid int=@levelid
select *, case when coursFialCount<=0 then RamkByGroupInner else '' end RamkByGroup
,case when coursFialCount<=0 then RamkByLevelInner else '' end RamkByLevel 
,round((ttl/lvlCourseCount),2) avarage from 
(
select sd.studentid ,sd.levelid,sd.yearID
--,  stl.stdid
  , st.sname
  , st.LastName
  --, st.levelid
  , st.bdate
  , st.BirthPlace
  , st.gender
  , stl.sgroup
  , stl.GroupID
  , stl.lvlState
  , isnull(st.IsLeave,0) IsLeave
  , st.SeqID
  , st.natianalityt
  , (select lv.levelname from levels lv where lv.levelid=sd.levelid) levelname

,sum(case when sd.termid=1 and sd.courseID=1 then sd.TotalAll else 0 end) qrn1
,sum(case when sd.termid=2 and sd.courseID=1 then sd.TotalAll else 0 end) qrn2
,sum(case when sd.courseID=1 then sd.forFull else 0 end) qrnForFull
,sum(case when sd.courseID=1 then sd.TotalAll else 0 end) qrnTotal

,sum(case when sd.termid=1 and sd.courseID=2 then sd.TotalAll else 0 end) Islamic1
,sum(case when sd.termid=2 and sd.courseID=2 then sd.TotalAll else 0 end) Islamic2
,sum(case when sd.courseID=2 then sd.forFull else 0 end) IslamicForFull
,sum(case when sd.courseID=2 then sd.TotalAll else 0 end) IslamicTotal

,sum(case when sd.termid=1 and sd.courseID=3 then sd.TotalAll else 0 end) Arabic1
,sum(case when sd.termid=2 and sd.courseID=3 then sd.TotalAll else 0 end) Arabic2
,sum(case when sd.courseID=3 then sd.forFull else 0 end) ArabicForFull
,sum(case when sd.courseID=3 then sd.TotalAll else 0 end) ArabicTotal

,sum(case when sd.termid=1 and sd.courseID=4 then sd.TotalAll else 0 end) English1
,sum(case when sd.termid=2 and sd.courseID=4 then sd.TotalAll else 0 end) English2
,sum(case when sd.courseID=4 then sd.forFull else 0 end) EnglishForFull
,sum(case when sd.courseID=4 then sd.TotalAll else 0 end) EnglishTotal

,sum(case when sd.termid=1 and sd.courseID=5 then sd.TotalAll else 0 end) Math1
,sum(case when sd.termid=2 and sd.courseID=5 then sd.TotalAll else 0 end) Math2
,sum(case when sd.courseID=5 then sd.forFull else 0 end) MathForFull
,sum(case when sd.courseID=5 then sd.TotalAll else 0 end) MathTotal

,sum(case when sd.termid=1 and sd.courseID=6 then sd.TotalAll else 0 end) Socil1
,sum(case when sd.termid=2 and sd.courseID=6 then sd.TotalAll else 0 end) Socil2
,sum(case when sd.courseID=6 then sd.forFull else 0 end) ScoForFull
,sum(case when sd.courseID=6 then sd.TotalAll else 0 end) ScoTotal

,sum(case when sd.termid=1 and sd.courseID=7 then sd.TotalAll else 0 end) Sciense1
,sum(case when sd.termid=2 and sd.courseID=7 then sd.TotalAll else 0 end) Sciense2
,sum(case when sd.courseID=7 then sd.forFull else 0 end) SciForFull
,sum(case when sd.courseID=7 then sd.TotalAll else 0 end) SciTotal

,sum(case when sd.termid=1 and sd.courseID=8 then sd.TotalAll else 0 end) Comp1
,sum(case when sd.termid=2 and sd.courseID=8 then sd.TotalAll else 0 end) Comp2
,sum(case when sd.courseID=8 then sd.forFull else 0 end) ComputerForFull
,sum(case when sd.courseID=8 then sd.TotalAll else 0 end) CompTotal

,sum(case when sd.termid=1 and sd.courseID=9 then sd.TotalAll else 0 end) Art1
,sum(case when sd.termid=2 and sd.courseID=9 then sd.TotalAll else 0 end) Art2
,sum(case when sd.courseID=9 then sd.forFull else 0 end) ArtForFull
,sum(case when sd.courseID=9 then sd.TotalAll else 0 end) ArtTotal

,sum(case when sd.termid=1 and sd.courseID=10 then sd.TotalAll else 0 end) Sport1
,sum(case when sd.termid=2 and sd.courseID=10 then sd.TotalAll else 0 end) Sport2
,sum(case when sd.courseID=10 then sd.forFull else 0 end) SportForFull
,sum(case when sd.courseID=10 then sd.TotalAll else 0 end) SportTotal

,sum(case when sd.termid=1 and sd.courseID=11 then sd.TotalAll else 0 end) Physic1
,sum(case when sd.termid=2 and sd.courseID=11 then sd.TotalAll else 0 end) Physic2
,sum(case when sd.courseID=11 then sd.forFull else 0 end) PhysicForFull
,sum(case when sd.courseID=11 then sd.TotalAll else 0 end) PhysicTotal

,sum(case when sd.termid=1 and sd.courseID=12 then sd.TotalAll else 0 end) chemistry1
,sum(case when sd.termid=2 and sd.courseID=12 then sd.TotalAll else 0 end) chemistry2
,sum(case when sd.courseID=12 then sd.forFull else 0 end) chemistryForFull
,sum(case when sd.courseID=12 then sd.TotalAll else 0 end) chemistryTotal

,sum(case when sd.termid=1 and sd.courseID=13 then sd.TotalAll else 0 end) Biology1
,sum(case when sd.termid=2 and sd.courseID=13 then sd.TotalAll else 0 end) Biology2
,sum(case when sd.courseID=13 then sd.forFull else 0 end) BiologyForFull
,sum(case when sd.courseID=13 then sd.TotalAll else 0 end) BiologyTotal

,sum(case when sd.termid=1 and sd.courseID=14 then sd.TotalAll else 0 end) Geographic1
,sum(case when sd.termid=2 and sd.courseID=14 then sd.TotalAll else 0 end) Geographic2
,sum(case when sd.courseID=14 then sd.forFull else 0 end) GeographicFull
,sum(case when sd.courseID=14 then sd.TotalAll else 0 end) GeographicTotal

,sum(case when sd.termid=1 and sd.courseID=15 then sd.TotalAll else 0 end) History1
,sum(case when sd.termid=2 and sd.courseID=15 then sd.TotalAll else 0 end) History2
,sum(case when sd.courseID=15 then sd.forFull else 0 end) HistoryFull
,sum(case when sd.courseID=15 then sd.TotalAll else 0 end) History1Total

,sum(case when sd.termid=1 and sd.courseID=16 then sd.TotalAll else 0 end) Community1
,sum(case when sd.termid=2 and sd.courseID=16 then sd.TotalAll else 0 end) Community2
,sum(case when sd.courseID=16 then sd.forFull else 0 end) Community1Full
,sum(case when sd.courseID=16 then sd.TotalAll else 0 end) Community1Total

,ISNULL((select tms.TotalMins from GetTotalMinsGrade() tms where tms.LevelID=sd.levelid and tms.studentid=sd.studentid and tms.YearID=sd.yearID),0) ttmines
,case when (sum(case when sd.courseID=1 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=1 then sd.TotalAll else 0 end)-50 else 0 end qrnmins
,case when (sum(case when sd.courseID=2 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=2 then sd.TotalAll else 0 end)-50 else 0 end IslamicMins
,case when (sum(case when sd.courseID=3 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=3 then sd.TotalAll else 0 end)-50 else 0 end ArabicMM
,case when (sum(case when sd.courseID=5 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=5 then sd.TotalAll else 0 end)-50 else 0 end MathMins
,case when (sum(case when sd.courseID=4 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=4 then sd.TotalAll else 0 end)-50 else 0 end EngMins
,case when (sum(case when sd.courseID=6 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=6 then sd.TotalAll else 0 end)-50 else 0 end ScoMins
,case when (sum(case when sd.courseID=7 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=7 then sd.TotalAll else 0 end)-50 else 0 end SciMins
,case when (sum(case when sd.courseID=8 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=8 then sd.TotalAll else 0 end)-50 else 0 end CompMins
,case when (sum(case when sd.courseID=9 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=9 then sd.TotalAll else 0 end)-50 else 0 end ArtMins
,case when (sum(case when sd.courseID=10 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=10 then sd.TotalAll else 0 end)-50 else 0 end SportMins
,case when (sum(case when sd.courseID=11 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=11 then sd.TotalAll else 0 end)-50 else 0 end PhysicMins
,case when (sum(case when sd.courseID=12 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=12 then sd.TotalAll else 0 end)-50 else 0 end ChemistryMins
,case when (sum(case when sd.courseID=13 then sd.TotalAll else 0 end)-50)<0 then sum(case when sd.courseID=13 then sd.TotalAll else 0 end)-50 else 0 end BiologyMins


,isnull(SUM(case when (sd.forFull>0) then 1 else 0 end ),0) CountCourseForFull
,(select count(*)  from dbo.LevelCourse lvc where lvc.LevelID=sd.levelid and lvc.IsActive=1 and lvc.termID=2 and lvc.PlanID =(select p.ID from Plans p where p.YearID=sd.yearID)) lvlCourseCount
,(select sum(d1.TotalAll) from studentdegree d1 inner join dbo.LevelCourse lvc on lvc.ID=d1.courseLevelID where lvc.IsActive=1 and d1.studentid=sd.studentid and d1.levelid=sd.levelid and d1.yearID=sd.yearID) ttl
,SUm(sd.forFull) TotalAllForFull
,DENSE_RANK() over ( partition by sd.yearid, sd.levelid order by sd.levelid,((select sum(d1.TotalAll) from studentdegree d1 inner join dbo.LevelCourse lvc on lvc.ID=d1.courseLevelID where lvc.IsActive=1 and d1.studentid=sd.studentid and d1.levelid=sd.levelid and d1.yearID=sd.yearID)
) desc) 
  as StudentRamkNumberByLevel
  ,(case  
DENSE_RANK() over ( partition by sd.yearid, sd.levelid order by sd.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end) 
  as RamkByLevelInner
  , 
DENSE_RANK() over ( partition by sd.yearid, sd.levelid,stl.GroupID order by sd.levelid,((select sum(d1.TotalAll) from studentdegree d1 inner join dbo.LevelCourse lvc on lvc.ID=d1.courseLevelID where lvc.IsActive=1 and d1.studentid=sd.studentid and d1.levelid=sd.levelid and d1.yearID=sd.yearID)
) desc) 
  as StudentRamkNumberByGroup
  ,(case  
DENSE_RANK() over ( partition by sd.yearid, sd.levelid,stl.GroupID order by sd.levelid,sum(sd.TotalAll) desc) 

when 1  then N'الأول' 
when 2  then N'الثاني'
when 3  then N'الثالث'
when 4  then N'الرابع'
when 5  then N'الخامس'
when 6  then N'السادس'
when 7  then N'السابع'
when 8  then N'الثامن'
when 9  then N'التاسع'
when 10 then N'العاشر'
else	N''
end)  
  as RamkByGroupInner
  , CASE WHEN st.gender = 'انثى' THEN 2 ELSE 1 END AS genderNumber
,(select count(*) from studentdegree d1 inner join dbo.LevelCourse lvc on lvc.ID=d1.courseLevelID where lvc.IsActive=1 and d1.amontapsentcourse>0 and d1.studentid=sd.studentid and d1.levelid=sd.levelid and d1.yearID=sd.yearID) cntApsentCourse
,isnull((select cf.coursFialCount from dbo.GetCourseFail() cf where cf.levelid=sd.levelid and cf.studentid=sd.studentid and cf.YearID=sd.yearID),0) coursFialCount
,(select count(*) from StudentLevels sl where sl.StdID=sd.studentid and sl.lvlState=N'معيد' AND SL.LevelID=SD.levelid and sl.YearID<=sd.yearID) countFailYear
from studentdegree sd inner join dbo.student st on st.ID=sd.studentid inner join dbo.StudentLevels stl on st.ID=stl.StdID and stl.LevelID=sd.levelid and stl.YearID=sd.yearID
 where stl.YearID=@myearid and  ISNULL(stl.active,1)=1 and
 st.IsDelete=0 and stl.LevelID=@mlevelid  
group by sd.yearID, sd.levelid, sd.studentid 
       , st.sname
  , st.LastName
  --, st.levelid
  , st.bdate
  , st.BirthPlace
  , st.gender
  , stl.sgroup
  , stl.GroupID
  , stl.lvlState
  , st.IsLeave
  , st.SeqID
  , st.natianalityt
  ) tbl
  order by tbl.yearID, tbl.levelid,tbl.gender desc ,tbl.sname,tbl.LastName
GO
/****** Object:  StoredProcedure [dbo].[proc_GetResultFinalStudent]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[proc_GetResultFinalStudent](@yearid int,
	@levelid int,
	@studentid int)
	as
declare @yerid int=@yearid,
	@levlid int=@levelid,
	@studntid int=@studentid
select
  sdeg.stdid
  , sdeg.sname
  , sdeg.LastName
  , sdeg.levelid
  , sdeg.bdate
  , sdeg.BirthPlace
  , sdeg.gender
  , sdeg.sgroup
  , sdeg.GroupID
  , sdeg.lvlState
  , sdeg.IsLeave
  , sdeg.SeqID
  , sdeg.natianalityt
  , sdeg.levelname
 -- , 
 --sdeg.stdid
 --         , sdeg.sname
 --         , sdeg.LastName
	--	  , sdeg.levelid
	--	  , sdeg.bdate
	--	  , sdeg.BirthPlace
	--	  , sdeg.gender
	--	  , sdeg.sgroup
	--	  , sdeg.GroupID
 --         , sdeg.lvlState
	--	  , sdeg.IsLeave
 --         , sdeg.SeqID
	--	  , sdeg.natianalityt
	--	  , sdeg.levelname 
          , SUM(CASE WHEN sdeg.CourseID = 1 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS QrnDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 1 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS QrnDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 1   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS QrnForFull
		  , SUM(CASE WHEN sdeg.CourseID = 2 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS IslamicDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 2 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END)   AS IslamicDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 2   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS IslamicForFull
		  , SUM(CASE WHEN sdeg.CourseID = 3 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS arDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 3 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS arDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 3   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS ArForFull
		  , SUM(CASE WHEN sdeg.CourseID = 4 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS EnDegTotal1 
          , SUM(CASE WHEN sdeg.CourseID = 4 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS EnDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 4   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS EnForFull
		  , SUM(CASE WHEN sdeg.CourseID = 5 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS mathDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 5 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS mathDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 5   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS MathForFull
		  , SUM(CASE WHEN sdeg.CourseID = 6 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS scoDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 6 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS scoDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 6   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS ScoForFull 
          , SUM(CASE WHEN sdeg.CourseID = 7 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS sciDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 7 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS sciDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 7   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS SciForFull
		  , SUM(CASE WHEN sdeg.CourseID = 8 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS compDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 8 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS compDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 8   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS CompForFull
		  , SUM(CASE WHEN sdeg.CourseID = 9 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END) AS artDegTotal1 
          , SUM(CASE WHEN sdeg.CourseID = 9 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS artDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 9   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS ArtForFull
		  , SUM(CASE WHEN sdeg.CourseID = 10 AND TotalAllterm1 > 0 THEN sdeg.TotalAllterm1 ELSE 0 END)AS sportDegTotal1
		  , SUM(CASE WHEN sdeg.CourseID = 10 AND TotalAllterm2 > 0 THEN sdeg.TotalAllterm2 ELSE 0 END) AS sportDegTotal2
		  , SUM(CASE WHEN sdeg.CourseID = 10   THEN sdeg.forfullterm1+sdeg.forfullterm2 ELSE 0 END) AS SportForFull
		  ,isnull(SUM(case when (sdeg.forfullterm1+sdeg.forfullterm2)>0 then 1 else 0 end ),0) CountCourseForFull
		  ,SUm(sdeg.forfullterm1+sdeg.forfullterm2) TotalAllForFull
		  , lvlsFunc.curseCount AS LevelCrsCounts
          , isnull(rnk.coursFialCount,0) coursFialCount
		  , isnull(rnk.amontapsentcourse,0) amontapsentcourse
		  , rnk.TotalAll AS ttl
		  , ROUND(rnk.avgst, 2) AS prcnt
		  ,case when isnull(rnk.coursFialCount,0)<=0 then rnk.StudentRamk else '' end StudentRamk
		   ,case when isnull(rnk.coursFialCount,0)<=0 then rnk.GroupIDStudentRamk else '' end GroupIDStudentRamk
		  , sdeg.yearID
          , CASE WHEN isnull(rnk.amontapsentcourse,0) > 0 THEN '3' WHEN isnull(rnk.[coursFialCount],0) >= 1 THEN '2' WHEN isnull(rnk.coursFialCount,0) <= 0 THEN '1' END AS ResultTxt
          , CASE WHEN sdeg.gender = 'انثى' THEN 2 ELSE 1 END AS genderNumber

 from
(
select 
st.ID as stdid,st.sname,st.SeqID,st.BirthPlace,st.LastName,st.gender,st.natianalityt,stlv.lvlState,grp.GroupName as sgroup
,stlv.GroupID,
st.bdate,st.Village,st.Notes,st.IsDelete,isnull(st.IsLeave,0) as IsLeave,
cr.courseid,
cr.coursename,
  sum( case when tr.termid=1 then sd.deg1 else 0 end) as deg1term1 ,
 sum( case when tr.termid=2 then sd.deg1 else 0 end) as deg1term2,
 sum( case when tr.termid=1 then sd.deg2 else 0 end) as deg2term1,
 sum( case when tr.termid=2 then sd.deg2 else 0 end) as deg2term2,
 sum( case when tr.termid=1 then sd.deg3 else 0 end) as deg3term1,
 sum( case when tr.termid=2 then sd.deg3 else 0 end) as deg3term2,
 sum( case when tr.termid=1 then sd.deg4 else 0 end) as deg4term1,
 sum( case when tr.termid=2 then sd.deg4 else 0 end) as deg4term2,
 sum( case when tr.termid=1 then sd.forFull else 0 end) as forfullterm1,
 sum( case when tr.termid=2 then sd.forFull else 0 end) as forfullterm2,
 sum( case when tr.termid=1 then sd.TotalAll else 0 end) as TotalAllterm1,
 sum( case when tr.termid=2 then sd.TotalAll else 0 end) as TotalAllterm2,
 --SUM(lvc.minDegree) mindeg,
lvl.levelid,lvl.levelname ,
sty.seqid as yearID,
sty.studyYearEngl,
lvc.PlanID

from studentdegree sd inner join student st on sd.studentid=st.ID
inner join LevelCourse lvc on sd.courseLevelID=lvc.ID 
inner join levels lvl on lvc.LevelID=lvl.levelid
inner join course cr on lvc.CourseID=cr.courseid 
inner join terms tr on sd.termid=tr.termid and lvc.termID=tr.termid
 inner join StudentLevels stlv on st.ID=stlv.StdID and sd.levelid=stlv.LevelID 
inner join studyYear sty on sd.yearID=sty.seqid and stlv.YearID=sty.seqid
inner join dbo.[Group] grp on grp.ID=stlv.GroupID
group by st.ID,st.sname,st.SeqID,st.BirthPlace,st.LastName,st.gender,st.natianalityt,stlv.lvlState,grp.GroupName,stlv.GroupID,
st.bdate,st.Village,st.Notes,st.IsDelete,st.IsLeave,cr.courseid,cr.coursename,lvl.levelid,levelname,sty.seqid,sty.studyYearEngl,lvc.PlanID
) as sdeg inner join [dbo].[GetRankWithAvrage]() rnk 

on rnk.stdid=sdeg.stdid and sdeg.levelid=rnk.levelid and sdeg.yearID=rnk.yearID
inner join getCountCourseLevel() lvlsFunc on sdeg.levelid=lvlsFunc.LevelID
where sdeg.IsDelete=0 and sdeg.levelid=@levlid and sdeg.yearID=@yerid --and sdeg.stdid=case when @studentid>0 then @studentid else sdeg.stdid end
group by sdeg.stdid
          , sdeg.sname
          , sdeg.LastName
		  , sdeg.levelid
		  , sdeg.bdate
		  , sdeg.BirthPlace
		  , sdeg.gender
		  , sdeg.sgroup
		  , sdeg.GroupID
          , sdeg.lvlState
		  , sdeg.IsLeave
          , sdeg.SeqID
		  , sdeg.natianalityt
		  , sdeg.levelname 
		  , lvlsFunc.curseCount
		  , rnk.coursFialCount
		  , rnk.amontapsentcourse
		  , rnk.TotalAll 
		  , ROUND(rnk.avgst, 2) 
		  , rnk.StudentRamk
		  ,rnk.GroupIDStudentRamk
		  , sdeg.yearID
		  
		  order by gender desc,sdeg.sname,sdeg.LastName
GO
/****** Object:  StoredProcedure [dbo].[Proc_GetStudentDataForTerm]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[Proc_GetStudentDataForTerm](@TermID int,@YearID int ,@LevelID int)
as 
begin
declare @trmID int=@TermID,@YerID int=@YearID,@lvlid int=@LevelID
SELECT                 sdeg.stdid
                      , sdeg.sname
					  , sdeg.LastName
					  , sdeg.levelid
					  , sdeg.bdate
					  , sdeg.BirthPlace
					  , sdeg.gender
					  , sdeg.sgroup
					  , sdeg.GroupID
					  , sdeg.lvlState
					  , sdeg.IsLeave
					  , sdeg.SeqID
					  ,(select rse.NumperPass from RoomStudentInExam rse where rse.TermID=sdeg.termid and rse.YearID=sdeg.yearID and rse.LevelID=sdeg.levelid and rse.StdID=sdeg.stdid) as NumberPass
					  , sdeg.Village
					  , sdeg.natianalityt
					  , sdeg.levelname
					  ,sdeg.termid
					  , SUM(CASE WHEN sdeg.CourseID = 1  THEN sdeg.deg1 ELSE 0 END) AS Qrndeg1
					  , SUM(CASE WHEN sdeg.CourseID = 1  THEN sdeg.deg2 ELSE 0 END) AS Qrndeg2
					  , SUM(CASE WHEN sdeg.CourseID = 1  THEN sdeg.forFull ELSE 0 END) AS QrnForFull
					  , SUM(CASE WHEN sdeg.CourseID = 1  THEN sdeg.TotalAll ELSE 0 END) AS QrnTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 2  THEN sdeg.deg1 ELSE 0 END) AS Islamicdeg1
					  , SUM(CASE WHEN sdeg.CourseID = 2  THEN sdeg.deg2 ELSE 0 END) AS Islamicdeg2
					  , SUM(CASE WHEN sdeg.CourseID = 2  THEN sdeg.forFull ELSE 0 END) AS IslamicForFull
					  , SUM(CASE WHEN sdeg.CourseID = 2  THEN sdeg.TotalAll ELSE 0 END) AS IslamicTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 3  THEN sdeg.deg1 ELSE 0 END) AS ardeg1
					  , SUM(CASE WHEN sdeg.CourseID = 3  THEN sdeg.deg2 ELSE 0 END) AS ardeg2
					  , SUM(CASE WHEN sdeg.CourseID = 3  THEN sdeg.forFull ELSE 0 END) AS arForFull
					  , SUM(CASE WHEN sdeg.CourseID = 3  THEN  sdeg.TotalAll ELSE 0 END) AS arTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 4  THEN sdeg.deg1 ELSE 0 END) AS Endeg1
					  , SUM(CASE WHEN sdeg.CourseID = 4  THEN sdeg.deg2 ELSE 0 END) AS Endeg2
					  , SUM(CASE WHEN sdeg.CourseID = 4  THEN sdeg.forFull ELSE 0 END) AS EnForFull
					  , SUM(CASE WHEN sdeg.CourseID = 4  THEN  sdeg.TotalAll ELSE 0 END) AS EnTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 5  THEN sdeg.deg1 ELSE 0 END) AS mathdeg1
					  , SUM(CASE WHEN sdeg.CourseID = 5  THEN sdeg.deg2 ELSE 0 END) AS mathdeg2 
					  , SUM(CASE WHEN sdeg.CourseID = 5  THEN sdeg.forFull ELSE 0 END) AS mathForFull
					  , SUM(CASE WHEN sdeg.CourseID = 5  THEN  sdeg.TotalAll ELSE 0 END) AS mathTotalAll
                      , SUM(CASE WHEN sdeg.CourseID = 6  THEN sdeg.deg1 ELSE 0 END) AS scodeg1
					  , SUM(CASE WHEN sdeg.CourseID = 6  THEN sdeg.deg2 ELSE 0 END) AS scodeg2
					  , SUM(CASE WHEN sdeg.CourseID = 6  THEN sdeg.forFull ELSE 0 END) AS scoForFull
					  , SUM(CASE WHEN sdeg.CourseID = 6  THEN  sdeg.TotalAll ELSE 0 END) AS scoTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 7  THEN sdeg.deg1 ELSE 0 END) AS scideg1
					  , SUM(CASE WHEN sdeg.CourseID = 7  THEN sdeg.deg2 ELSE 0 END) AS scideg2
					  , SUM(CASE WHEN sdeg.CourseID = 7  THEN sdeg.forFull ELSE 0 END) AS sciForFull
					  , SUM(CASE WHEN sdeg.CourseID = 7  THEN  sdeg.TotalAll ELSE 0 END) AS sciTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 8  THEN sdeg.deg1 ELSE 0 END) AS compdeg1 
                      , SUM(CASE WHEN sdeg.CourseID = 8  THEN sdeg.deg2 ELSE 0 END) AS compdeg2
					  , SUM(CASE WHEN sdeg.CourseID = 8  THEN sdeg.forFull ELSE 0 END) AS compForFull
					  , SUM(CASE WHEN sdeg.CourseID = 8  THEN  sdeg.TotalAll ELSE 0 END) AS compTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 9  THEN sdeg.deg1 ELSE 0 END)  AS artdeg1
					  , SUM(CASE WHEN sdeg.CourseID = 9  THEN sdeg.deg2 ELSE 0 END) AS artdeg2
					  , SUM(CASE WHEN sdeg.CourseID = 9  THEN sdeg.forFull ELSE 0 END) AS artForFull
					  , SUM(CASE WHEN sdeg.CourseID = 9  THEN  sdeg.TotalAll ELSE 0 END) AS artTotalAll
					  , SUM(CASE WHEN sdeg.CourseID = 10 THEN sdeg.deg1 ELSE 0 END) AS sportdeg1
					  , SUM(CASE WHEN sdeg.CourseID = 10 THEN sdeg.deg2 ELSE 0 END) AS sportdeg2
					  , SUM(CASE WHEN sdeg.CourseID = 10 THEN sdeg.forFull ELSE 0 END) AS sportForFull
					  , SUM(CASE WHEN sdeg.CourseID = 10 THEN  sdeg.TotalAll ELSE 0 END) AS sportTotalAll
					  , SUM(case when sdeg.forFull>0 then 1 else 0 end) AS CountForFullCourse
					  ,isnull(SUM(case when (sdeg.forFull)>0 then 1 else 0 end ),0) CountCourseForFull
					  ,SUm(sdeg.forFull) TotalAllForFull
					, sdeg.curseCount AS LevelCrsCounts
					, isnull(sdeg.coursFialCount,0) coursFialCount
		            , isnull(sdeg.amontapsentcourse,0) amontapsentcourse
					, sdeg.rnkTotal AS ttl
					, ROUND(sdeg.avgst, 2) AS prcnt
					, case when isnull(sdeg.coursFialCount,0)<=0 then sdeg.StudentRamk else '' end StudentRamk
					, case when isnull(sdeg.coursFialCount,0)<=0 then sdeg.StudentRamkByLevel else '' end StudentRamkByLevel
					, sdeg.yearID
					
					, CASE WHEN isnull(sdeg.amontapsentcourse,0) > 0 THEN '3' WHEN isnull(sdeg.[coursFialCount],0) >= 1 THEN '2' WHEN isnull(sdeg.coursFialCount,0) <= 0 THEN '1' END AS ResultTxt
					, CASE WHEN sdeg.gender = 'انثى' THEN 2 ELSE 1 END AS genderNumber
FROM            dbo.BasicStudentDataV AS sdeg 
WHERE        (sdeg.IsDelete = 0  AND sdeg.levelid= @lvlid AND sdeg.yearID=@YerID AND sdeg.termid= @trmID )
GROUP BY               genderNumber
                      , sdeg.levelid
                      , sdeg.sname
					  , sdeg.LastName
					  , sdeg.stdid
					  , sdeg.bdate
					  , sdeg.BirthPlace
					  , sdeg.gender
					  , sdeg.sgroup
					  , sdeg.GroupID
					  , sdeg.lvlState
					  , sdeg.IsLeave
					  , sdeg.SeqID
					  , sdeg.Village
					  , sdeg.SeqID
					  , sdeg.natianalityt
					  , sdeg.levelname 
					  , sdeg.curseCount
					  , sdeg.coursFialCount
					  , sdeg.amontapsentcourse
					  , sdeg.rnkTotal
					  , sdeg.avgst
					  , sdeg.StudentRamk
					  ,sdeg.StudentRamkByLevel
					  , sdeg.yearID
					  , ResultTxt
					 
					  ,sdeg.termid
					  --order by  sdeg.sname
	end
GO
/****** Object:  StoredProcedure [dbo].[Proc_RestStudentToPrevLevel]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[Proc_RestStudentToPrevLevel](@stdid int,@lvlID int,@YearID int,@note nvarchar(100))
as
--declare @stdid int,@lvlID int,@YearID int,@note nvarchar(100)
update StudentLevels set LevelID=@lvlID ,lvlState=N'معيد' ,Note=@note
where StdID=@stdid and YearID=@YearID



--select * from StudentLevels where lvlState=N'معيد' AND StdID=202
GO
/****** Object:  StoredProcedure [dbo].[proc_UpdateGroupForStudent]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[proc_UpdateGroupForStudent](@YearID int,@lvlid int)
as
UPDATE student SET GroupID=stl.GroupID ,sgroup=stl.sgroup
from dbo.student inner join dbo.StudentLevels stl on student.ID=stl.StdID 
where stl.YearID=@YearID and stl.LevelID=case when @lvlid>0 then @lvlid else stl.LevelID end
GO
/****** Object:  StoredProcedure [dbo].[proc_UpdateLevelStateForStudent]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[proc_UpdateLevelStateForStudent](@YearID int)
as
UPDATE student SET lvlState=stl.lvlState 
from dbo.student inner join dbo.StudentLevels stl on student.ID=stl.StdID 
where stl.YearID=@YearID
GO
/****** Object:  StoredProcedure [dbo].[RollBackForFull]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[RollBackForFull](@stdid int,@levelid int,@yearid int)
as
begin
if(@stdid>0)
begin
update studentdegree set forFull=0 
where studentid=@stdid and levelid=@levelid and yearID=@yearid and termid=2
end
else if(@stdid<=0)
begin
update studentdegree set forFull=0 
where levelid=@levelid and yearID=yearID and termid=2
end
end
GO
/****** Object:  StoredProcedure [dbo].[UpdateBreeders]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[UpdateBreeders]( @planID int ,@brdID int ,@termID int,@lvlid int NULL)
as

update LevelCourse set BredLevel=@brdID
where LevelID=@lvlid and termID=@termID and PlanID=@planID
GO
/****** Object:  StoredProcedure [dbo].[UpdateDegreeForStudentApsent]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[UpdateDegreeForStudentApsent]
(@std int,@courseid int,@levelid int,@termid int,@total float ,@yearid int )
as
declare 
@orderDegree float,
@crsid int
,@planid int
begin
select @planid= ID from Plans where YearID=@yearid
select @orderDegree= sum(minDegree) from LevelCourse where CourseID=@courseid and LevelID=@levelid and PlanID=@planid

select @crsid= ID from LevelCourse where CourseID=@courseid and LevelID=@levelid and termID=@termid and PlanID=@planid

update studentdegree set forFull=(@orderDegree-@total) where 
studentid=@std and courseLevelID=@crsid and termid=@termid and @total<@orderDegree and yearID=@yearid
end
GO
/****** Object:  StoredProcedure [dbo].[UpdatePageOperationRoles]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[UpdatePageOperationRoles]
(@Flag int)
as
 
   create table #tmp(id int)
   insert into #tmp select ID from Roles where ID=case when @flag=-1 then ID else @flag end order by ID asc
   while(exists(select * from #tmp))
    begin
     declare @sq int
     select top 1 @sq= id from #tmp 
     insert into PageOperationRoles (PageOperationID,RoleID,IsActive )
     select ID,@sq,0 from PageOperaions where ID not in(select PageOperationID from PageOperationRoles where RoleID=@sq and RoleID is not null) and PageOperaions.IsActive=1 and (PageOperaions.OperationName is not null and PageOperaions.OperationSymbol is not null )
     
	 delete from #tmp where id=@sq 
    end
     drop table #tmp ;
	 --delete from PageOperationRoles where PageOperationID in(select ID from PageOperaions where IsActive=0 or OperationName is null or OperationSymbol is null)
 --select @Flag;
 --select RoleID,COUNT(*)  from PageOperationRoles where RoleID=case when @flag=-1 then RoleID else @flag end group by RoleID
--select RoleID,COUNT(*)  from PageOperationRoles 
--group by RoleID



GO
/****** Object:  StoredProcedure [dbo].[UpdateStudentDegree]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[UpdateStudentDegree](@deg1 float,@deg2 float,@levelid int,@courseid int,@studentid int,@termid int,@yearid int)
as
begin
update studentdegree set 
deg1=isnull(@deg1,deg1),deg2=isnull(@deg2,deg2)
where studentid=@studentid and termid=@termid and courseID=@courseid and levelid=@levelid and yearID=@yearid
end
GO
/****** Object:  StoredProcedure [dbo].[UpdateStudentDegreeNew]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[UpdateStudentDegreeNew]
(@QranDeg1 float
,@QranDeg2 float
,@IslamicDeg1 float
,@IslamicDeg2 float
,@ArabicDeg1 float
,@ArabicDeg2 float
,@EngDeg1 float
,@EngDeg2 float
,@MathDeg1 float
,@MathDeg2 float
,@ScoDeg1 float
,@ScoDeg2 float
,@SciDeg1 float
,@SciDeg2 float
,@CompDeg1 float
,@CompDeg2 float
,@ArtDeg1 float
,@ArtDeg2 float
,@SportDeg1 float
,@SportDeg2 float
,@PhysicDeg1 float
,@PhysicDeg2 float
,@ChemstryDeg1 float
,@ChemstryDeg2 float
,@BiologyDeg1 float
,@BiologyDeg2 float
,@GeographicDeg1 float
,@GeographicDeg2 float
,@HistoryDeg1 float
,@HistoryDeg2 float
,@CommunityDeg1 float
,@CommunityDeg2 float
,@levelid int
--,@courseid int
,@studentid int
,@termid int
,@yearid int)
as
begin
update studentdegree set 
deg1=isnull(@QranDeg1,deg1),deg2=isnull(@QranDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=1 and levelid=@levelid and yearID=@yearid

update studentdegree set 
deg1=isnull(@IslamicDeg1,deg1),deg2=isnull(@IslamicDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=2 and levelid=@levelid and yearID=@yearid


update studentdegree set 
deg1=isnull(@ArabicDeg1,deg1),deg2=isnull(@ArabicDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=3 and levelid=@levelid and yearID=@yearid


update studentdegree set 
deg1=isnull(@EngDeg1,deg1),deg2=isnull(@EngDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=4 and levelid=@levelid and yearID=@yearid

update studentdegree set 
deg1=isnull(@MathDeg1,deg1),deg2=isnull(@MathDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=5 and levelid=@levelid and yearID=@yearid


update studentdegree set 
deg1=isnull(@ScoDeg1,deg1),deg2=isnull(@ScoDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=6 and levelid=@levelid and yearID=@yearid


update studentdegree set 
deg1=isnull(@SciDeg1,deg1),deg2=isnull(@SciDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=7 and levelid=@levelid and yearID=@yearid


update studentdegree set 
deg1=isnull(@CompDeg1,deg1),deg2=isnull(@CompDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=8 and levelid=@levelid and yearID=@yearid


update studentdegree set 
deg1=isnull(@ArtDeg1,deg1),deg2=isnull(@ArtDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=9 and levelid=@levelid and yearID=@yearid


update studentdegree set 
deg1=isnull(@SportDeg1,deg1),deg2=isnull(@SportDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=10 and levelid=@levelid and yearID=@yearid


update studentdegree set 
deg1=isnull(@PhysicDeg1,deg1),deg2=isnull(@PhysicDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=11 and levelid=@levelid and yearID=@yearid


update studentdegree set 
deg1=isnull(@ChemstryDeg1,deg1),deg2=isnull(@ChemstryDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=12 and levelid=@levelid and yearID=@yearid


update studentdegree set 
deg1=isnull(@BiologyDeg1,deg1),deg2=isnull(@BiologyDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=13 and levelid=@levelid and yearID=@yearid



update studentdegree set 
deg1=isnull(@GeographicDeg1,deg1),deg2=isnull(@GeographicDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=14 and levelid=@levelid and yearID=@yearid



update studentdegree set 
deg1=isnull(@HistoryDeg1,deg1),deg2=isnull(@HistoryDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=15 and levelid=@levelid and yearID=@yearid



update studentdegree set 
deg1=isnull(@CommunityDeg1,deg1),deg2=isnull(@CommunityDeg2,deg2)
where studentid=@studentid and termid=@termid and courseID=16 and levelid=@levelid and yearID=@yearid




end
GO
/****** Object:  StoredProcedure [dbo].[upgradeDegreeForSuccessStudent]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[upgradeDegreeForSuccessStudent](@degterm1 float=-1 ,@degterm2 float=-1,@conditionup float=-1)
as
begin
if(@degterm1=-1 and @conditionup=-1) 
update studentdegree set deg2=deg2+(25-(deg2+deg1)) where total<25 and amontapsentcourse<4 ;

if(@degterm2=-1 and @conditionup=-1) 
update studentdegree set deg4=deg4+(25-(deg4+deg3)) where total2<25 and amontapsentcourse<4;
if(@degterm1>0 and @conditionup=-1) 
update studentdegree set deg2=deg2+(25-(deg2+deg1)) where total<25 and amontapsentcourse<4;

if(@degterm1>0 and @conditionup>0) 
update studentdegree set deg2=deg2+(25-(deg2+deg1)) where total<25 and amontapsentcourse<4;

end
GO
/****** Object:  StoredProcedure [dbo].[UpgradeStudentForNextLevel]    Script Date: 2024-10-07 04:25:41 م ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--insert into student

CREATE proc [dbo].[UpgradeStudentForNextLevel]
(
@yearid int ,@levelid int
)
as
declare @nextyear int
,@nxtlevelid int,
@cntUpgrade int,
@cntCurentstudent int
begin transaction


select @nextyear=NextYear from studyYear where IsActive=1 and seqid=@yearid

select @nxtlevelid=nextLevelID from levels where levelid=@levelid
--if(@nxtlevelid>0)
--begin
--select  COUNT(distinct stdid) from GetFinalResultStudent() frs where frs.levelid=@levelid and frs.yearID=@yearid

--select COUNT(stdid) from StudentLevels stdlv where stdlv.YearID=2 and stdlv.StdID in(select StdID from GetFinalResultStudent() frs 
--where frs.levelid=@levelid and frs.yearID=@yearid)
--end
--if(@nxtlevelid<=0 or @nxtlevelid is null)
--begin
--select COUNT(distinct stdid) from GetFinalResultStudent() frs inner join levels lvl on frs.levelid=lvl.levelid
-- where frs.levelid=@levelid and frs.yearID=@yearid  and lvl.nextLevelID is  null


--select COUNT(stdid) from StudentLevels stdlv
--inner join levels lvl on stdlv.LevelID=lvl.levelid
-- where stdlv.YearID=@nextyear and stdlv.StdID in(select StdID from GetFinalResultStudent() frs where frs.levelid=@levelid and frs.yearID=@yearid)
-- and lvl.nextLevelID is  null
--end
if(@nextyear<=0 or @nextyear is null)
begin
raiserror('لا يوجد عام جديد',16,1) return
end

--if(@nxtlevelid<=0)
--begin
--select distinct  st.ID,case when fsr.coursFialCount<=0 then lvl.nextLevelID else fsr.levelid end as levl,
--@nextyear yearid, 1 active ,case when fsr.coursFialCount<=0 then 'مستجد' else 'معيد' end as statusS
-- from GetFinalResultStudent() fsr inner join levels lvl on fsr.levelid=lvl.levelid inner join student st on st.ID=fsr.stdid
-- where st.yearID in (select seqid from studyYear where seqid=@yearid)  and fsr.levelid=@levelid and fsr.yearID=@yearid and fsr.coursFialCount>0



 --update StudentLevels set active=0 where YearID=@yearid
 --update student set status=(select lvlState from StudentLevels slv where slv.active=1 and slv.YearID=@nextyear and slv.StdID=student.ID)
--end
if(@nxtlevelid>0)
begin
insert into StudentLevels
select distinct  st.ID,case when fsr.coursFialCount<=0 then lvl.nextLevelID else fsr.levelid end as levl,
@nextyear yearid, 1 active ,case when fsr.coursFialCount<=0 then 'مستجد' else 'معيد' end as statusS,fsr.sgroup,fsr.GroupID
 from GetFinalResultStudent() fsr inner join levels lvl on fsr.levelid=lvl.levelid inner join student st on st.ID=fsr.stdid 
 inner join StudentLevels stdlv on st.ID=stdlv.StdID
 where stdlv.yearID in (select seqid from studyYear where seqid=@yearid)  and fsr.yearID=@yearid and lvl.nextLevelID is not null
 end
 if(@nxtlevelid<=0 or @nxtlevelid is null)
 begin
 insert into StudentLevels
 select distinct  st.ID,case when fsr.coursFialCount<=0 then lvl.nextLevelID else fsr.levelid end as levl,
@nextyear yearid, 1 active ,case when fsr.coursFialCount<=0 then 'مستجد' else 'معيد' end as statusS,fsr.sgroup,fsr.GroupID
 from GetFinalResultStudent() fsr inner join levels lvl on fsr.levelid=lvl.levelid inner join student st on st.ID=fsr.stdid 
 inner join StudentLevels stdlv on st.ID=stdlv.StdID
 where stdlv.yearID in (select seqid from studyYear where seqid=@yearid)  and fsr.yearID=@yearid and lvl.nextLevelID is null and fsr.coursFialCount>=1
 end
--if exists (select StdID from StudentLevels  std where  YearID=@yearid and LevelID=@levelid/*curent*/ and StdID in(select StdID from StudentLevels stdlv where YearID=@nextyear and stdlv.StdID=std.StdID))
--begin
--raiserror('لقد تم الترفيع مسبقا ',16,1) return
--end

--if not exists (select StdID from StudentLevels std where  YearID=@yearid and LevelID=@levelid/*curent*/ and StdID  not in(select StdID from StudentLevels stdlv where YearID=@nextyear and stdlv.StdID=std.StdID))
--begin
--insert into StudentLevels
--select distinct  st.ID,case when fsr.coursFialCount<=0 then lvl.nextLevelID else fsr.levelid end as levl,
--@nextyear yearid, 1 active ,case when fsr.coursFialCount<=0 then 'مستجد' else 'معيد' end as statusS
-- from GetFinalResultStudent() fsr inner join levels lvl on fsr.levelid=lvl.levelid inner join student st on st.ID=fsr.stdid
-- where st.yearID in (select seqid from studyYear where seqid=@yearid)  and fsr.levelid=@levelid and fsr.yearID=@yearid
 --update StudentLevels set active=0 where YearID=@yearid
 --update student set status=(select lvlState from StudentLevels slv where slv.active=1 and slv.YearID=@nextyear and slv.StdID=student.ID)
 --end
 
 commit transaction
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "student"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'amountCourseApsent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'amountCourseApsent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "sd"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 232
            End
            DisplayFlags = 280
            TopColumn = 12
         End
         Begin Table = "st"
            Begin Extent = 
               Top = 6
               Left = 270
               Bottom = 136
               Right = 440
            End
            DisplayFlags = 280
            TopColumn = 12
         End
         Begin Table = "stdlv"
            Begin Extent = 
               Top = 6
               Left = 686
               Bottom = 136
               Right = 856
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "lvc"
            Begin Extent = 
               Top = 138
               Left = 38
               Bottom = 268
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "grp"
            Begin Extent = 
               Top = 6
               Left = 894
               Bottom = 102
               Right = 1064
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "lvl"
            Begin Extent = 
               Top = 138
               Left = 246
               Bottom = 268
               Right = 443
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "cr"
            Begin Extent = 
               Top = 270
               Left = 38
               Bottom = 383
               Right = 220
            End
            DisplayFlags = 280
            TopColumn = 0
  ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'BasicStudentDataV'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane2', @value=N'       End
         Begin Table = "tr"
            Begin Extent = 
               Top = 270
               Left = 258
               Bottom = 366
               Right = 428
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "sty"
            Begin Extent = 
               Top = 366
               Left = 258
               Bottom = 496
               Right = 428
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "rnk"
            Begin Extent = 
               Top = 6
               Left = 478
               Bottom = 136
               Right = 648
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 47
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'BasicStudentDataV'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=2 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'BasicStudentDataV'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[41] 4[21] 2[10] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "sd"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 232
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "lv"
            Begin Extent = 
               Top = 6
               Left = 270
               Bottom = 119
               Right = 467
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'beginresult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'beginresult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "studentdegree"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 211
               Right = 232
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'finalResult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'finalResult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "st"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "stdlvl"
            Begin Extent = 
               Top = 6
               Left = 478
               Bottom = 136
               Right = 648
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "std"
            Begin Extent = 
               Top = 6
               Left = 246
               Bottom = 136
               Right = 440
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "lvcr"
            Begin Extent = 
               Top = 138
               Left = 38
               Bottom = 268
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "lvl"
            Begin Extent = 
               Top = 138
               Left = 246
               Bottom = 268
               Right = 443
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "cr"
            Begin Extent = 
               Top = 270
               Left = 38
               Bottom = 383
               Right = 220
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "trm"
            Begin Extent = 
               Top = 270
               Left = 258
               Bottom = 366
               Right = 428
            End
            DisplayFlags = 280
            TopColumn = 0
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'StudentData'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane2', @value=N'         End
         Begin Table = "sy"
            Begin Extent = 
               Top = 366
               Left = 258
               Bottom = 496
               Right = 428
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "grp"
            Begin Extent = 
               Top = 6
               Left = 686
               Bottom = 102
               Right = 856
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'StudentData'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=2 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'StudentData'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "student"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 211
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 4
         End
         Begin Table = "levels"
            Begin Extent = 
               Top = 16
               Left = 347
               Bottom = 112
               Right = 517
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "studentdegree"
            Begin Extent = 
               Top = 87
               Left = 572
               Bottom = 217
               Right = 742
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "studyYear"
            Begin Extent = 
               Top = 51
               Left = 671
               Bottom = 164
               Right = 841
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "course"
            Begin Extent = 
               Top = 155
               Left = 303
               Bottom = 251
               Right = 473
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "terms"
            Begin Extent = 
               Top = 252
               Left = 38
               Bottom = 348
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "studentwithtrtaib"
            Begin Extent = 
               Top = 330
               Left = 246
               Bottom = 460
               Right = 416
            End
            Displ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'studentDegreeV'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane2', @value=N'ayFlags = 280
            TopColumn = 0
         End
         Begin Table = "finalResult"
            Begin Extent = 
               Top = 348
               Left = 38
               Bottom = 444
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'studentDegreeV'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=2 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'studentDegreeV'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = -285
         Left = 0
      End
      Begin Tables = 
         Begin Table = "student"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "levels"
            Begin Extent = 
               Top = 6
               Left = 246
               Bottom = 102
               Right = 416
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "studentdegree"
            Begin Extent = 
               Top = 102
               Left = 246
               Bottom = 232
               Right = 416
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "studyYear"
            Begin Extent = 
               Top = 138
               Left = 38
               Bottom = 268
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "course"
            Begin Extent = 
               Top = 234
               Left = 246
               Bottom = 347
               Right = 428
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "terms"
            Begin Extent = 
               Top = 270
               Left = 38
               Bottom = 366
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "allstudentwithtrtaibforfinal"
            Begin Extent = 
               Top = 348
               Left = 246
               Bottom = 478
               Right = 416
            End
   ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'studentFinalResult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane2', @value=N'         DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "amountCourseApsent"
            Begin Extent = 
               Top = 366
               Left = 38
               Bottom = 520
               Right = 239
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 26
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'studentFinalResult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=2 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'studentFinalResult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "sdeg"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 224
            End
            DisplayFlags = 280
            TopColumn = 15
         End
         Begin Table = "lvlsFunc"
            Begin Extent = 
               Top = 6
               Left = 262
               Bottom = 102
               Right = 448
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 29
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 12
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'StudentHorizentalV'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'StudentHorizentalV'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "st"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 13
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'studentnearsuccess'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'studentnearsuccess'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "std"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 248
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "lvcr"
            Begin Extent = 
               Top = 6
               Left = 286
               Bottom = 136
               Right = 472
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "st"
            Begin Extent = 
               Top = 138
               Left = 38
               Bottom = 268
               Right = 224
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "cr"
            Begin Extent = 
               Top = 138
               Left = 262
               Bottom = 251
               Right = 460
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 12
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'StudentPrif'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'StudentPrif'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "std"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "tr"
            Begin Extent = 
               Top = 6
               Left = 246
               Bottom = 136
               Right = 416
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'studentwithtrtaib'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'studentwithtrtaib'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "topstudent"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 119
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'top10degree'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'top10degree'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "sd"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 224
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "st"
            Begin Extent = 
               Top = 6
               Left = 262
               Bottom = 136
               Right = 448
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 12
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'topstudent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'topstudent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'trtaib'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'trtaib'
GO
USE [master]
GO
ALTER DATABASE [schoolDb] SET  READ_WRITE 
GO
